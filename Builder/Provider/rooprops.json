{"success":true,"data":{"*Module":{"events":[],"props":[{"name":"app","type":"Object","desc":"Application (used in perm name) and relates to directory that file is written to..","def":""},{"name":"perm","type":"String","desc":"(Optional) Permision name (eg. ListCompanies)","def":""},{"name":"permtype","type":"String","desc":"Optional) A,E,S...","def":"S"},{"name":"disabled","type":"Number","desc":"Disable this panel (turn it into a function to run things at module load time)","def":"1"},{"name":"modkey","type":"Number","desc":"Order of item (for tabs)","def":""},{"name":"module","type":"Object","desc":"Module name (eg. Pman.Tab.XXXX or Pman.Dialog.XXXX","def":"Pman.Tab."},{"name":"region","type":"String","desc":"center|south|east|west|north","def":"center"},{"name":"parent","type":"Object","desc":"Name of Module to add this to.","def":"Pman"},{"name":"name","type":"String","desc":"Text to display when loading","def":"Un-named Part"}]},"Roo.Ajax":{"props":[{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (conn, options)\n{\n\n}","desc":"Fires before a network request is made to retrieve a data object.","name":"beforerequest","type":"function"},{"sig":"function (conn, response, options)\n{\n\n}","desc":"Fires if the request was successfully completed.","name":"requestcomplete","type":"function"},{"sig":"function (conn, response, options)\n{\n\n}","desc":"Fires if an error HTTP status was returned from the server.\nSee {@link http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec10.html} for details of HTTP status codes.","name":"requestexception","type":"function"}]},"Roo.BasicDialog":{"props":[{"desc":"Id or element from which the dialog should animate while opening\n(defaults to null with no animation)","name":"animateTarget","type":"String\/Element","memberOf":""},{"desc":"True to auto create from scratch, or using a DomHelper Object (defaults to false)","name":"autoCreate","type":"Boolean\/DomHelper","memberOf":""},{"desc":"True to allow the dialog body contents to overflow and display scrollbars (defaults to false)","name":"autoScroll","type":"Boolean","memberOf":""},{"desc":"If true, all elements with class 'x-dlg-tab' will get automatically converted to tabs (defaults to false)","name":"autoTabs","type":"Boolean","memberOf":""},{"desc":"Valid values are \"left,\" \"center\" and \"right\" (defaults to \"right\")","name":"buttonAlign","type":"String","memberOf":""},{"desc":"Array of buttons","name":"buttons","type":"Array","memberOf":""},{"desc":"False to remove the built-in top-right corner close button (defaults to true)","name":"closable","type":"Boolean","memberOf":""},{"desc":"False to remove the built-in top-right corner collapse button (defaults to true)","name":"collapsible","type":"Boolean","memberOf":""},{"desc":"True to keep the dialog constrained within the visible viewport boundaries (defaults to true)","name":"constraintoviewport","type":"Boolean","memberOf":""},{"desc":"False to disable dragging of the dialog within the viewport (defaults to true)","name":"draggable","type":"Boolean","memberOf":""},{"desc":"True to ensure that anytime the dialog is shown or resized it gets centered (defaults to false)","name":"fixedcenter","type":"Boolean","memberOf":""},{"desc":"Height of the dialog in pixels (can also be set via CSS).  Determined by browser if unspecified.","name":"height","type":"Number","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"Minimum width of all dialog buttons (defaults to 75)","name":"minButtonWidth","type":"Number","memberOf":""},{"desc":"The minimum allowable height for a resizable dialog (defaults to 80)","name":"minHeight","type":"Number","memberOf":""},{"desc":"The minimum allowable width for a resizable dialog (defaults to 200)","name":"minWidth","type":"Number","memberOf":""},{"desc":"True to show the dialog modally, preventing user interaction with the rest of the page (defaults to false)","name":"modal","type":"Boolean","memberOf":""},{"desc":"True to drag a lightweight proxy element rather than the dialog itself, used when\ndraggable = true (defaults to false)","name":"proxyDrag","type":"Boolean","memberOf":""},{"desc":"False to disable manual dialog resizing (defaults to true)","name":"resizable","type":"Boolean","memberOf":""},{"desc":"Which resize handles to display - see the {@link Roo.Resizable} handles config\nproperty for valid values (defaults to 'all')","name":"resizeHandles","type":"String","memberOf":""},{"desc":"True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right\nshadow (defaults to false)","name":"shadow","type":"Boolean\/String","memberOf":""},{"desc":"The number of pixels to offset the shadow if displayed (defaults to 5)","name":"shadowOffset","type":"Number","memberOf":""},{"desc":"True to create an iframe shim that prevents selects from showing through (defaults to false)","name":"shim","type":"Boolean","memberOf":""},{"desc":"True to cause the dimensions to be recalculated before the dialog is shown (defaults to false)","name":"syncHeightBeforeShow","type":"Boolean","memberOf":""},{"desc":"The tag name of tab elements, used when autoTabs = true (defaults to 'div')","name":"tabTag","type":"String","memberOf":""},{"desc":"Default text to display in the title bar (defaults to null)","name":"title","type":"String","memberOf":""},{"desc":"Width of the dialog in pixels (can also be set via CSS).  Determined by browser if unspecified.","name":"width","type":"Number","memberOf":""},{"desc":"The default left page coordinate of the dialog (defaults to center screen)","name":"x","type":"Number","memberOf":""},{"desc":"The default top page coordinate of the dialog (defaults to center screen)","name":"y","type":"Number","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before this dialog is hidden.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before this dialog is shown.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this dialog is hidden.","name":"hide","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when a key is pressed","name":"keydown","type":"function"},{"sig":"function (_self, x, y)\n{\n\n}","desc":"Fires when this dialog is moved by the user.","name":"move","type":"function"},{"sig":"function (_self, width, height)\n{\n\n}","desc":"Fires when this dialog is resized by the user.","name":"resize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this dialog is shown.","name":"show","type":"function"}]},"Roo.BasicLayoutRegion":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, panel, e)\n{\n\n}","desc":"Fires before a panel is removed (or closed). To cancel the removal set \"e.cancel = true\" on the event argument.","name":"beforeremove","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this region is collapsed.","name":"collapsed","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this region is expanded.","name":"expanded","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the layout for this region is changed.","name":"invalidated","type":"function"},{"sig":"function (_self, panel)\n{\n\n}","desc":"Fires when a panel is activated.","name":"panelactivated","type":"function"},{"sig":"function (_self, panel)\n{\n\n}","desc":"Fires when a panel is added.","name":"paneladded","type":"function"},{"sig":"function (_self, panel)\n{\n\n}","desc":"Fires when a panel is removed.","name":"panelremoved","type":"function"},{"sig":"function (_self, newSize)\n{\n\n}","desc":"Fires when the user resizes this region.","name":"resized","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this region slides out of view.","name":"slidehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this region is slid into view.","name":"slideshow","type":"function"},{"sig":"function (_self, visibility)\n{\n\n}","desc":"Fires when this region is shown or hidden","name":"visibilitychange","type":"function"}]},"Roo.BorderLayout":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires when a layout is performed.","name":"layout","type":"function"},{"sig":"function (region)\n{\n\n}","desc":"Fires when a region is collapsed.","name":"regioncollapsed","type":"function"},{"sig":"function (region)\n{\n\n}","desc":"Fires when a region is expanded.","name":"regionexpanded","type":"function"},{"sig":"function (region, newSize)\n{\n\n}","desc":"Fires when the user resizes a region.","name":"regionresized","type":"function"}]},"Roo.BoxComponent":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"height (optional) size of component","name":"height","type":"Number","memberOf":""},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"width (optional) size of component","name":"width","type":"Number","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self, x, y)\n{\n\n}","desc":"Fires after the component is moved.","name":"move","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}","desc":"Fires after the component is resized.","name":"resize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"}]},"Roo.Button":{"props":[{"desc":"The type of event to map to the button's event handler (defaults to 'click')","name":"clickEvent","type":"String","memberOf":""},{"desc":"A CSS class to apply to the button's main element.","name":"cls","type":"String","memberOf":""},{"desc":"True to start disabled (defaults to false)","name":"disabled","type":"Boolean","memberOf":""},{"desc":"True to enable pressed\/not pressed toggling (defaults to false)","name":"enableToggle","type":"Boolean","memberOf":""},{"desc":"False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)","name":"handleMouseEvents","type":"Boolean","memberOf":""},{"desc":"A function called when the button is clicked (can be used instead of click event)","name":"handler","type":"Function","memberOf":""},{"desc":"True to start hidden (defaults to false)","name":"hidden","type":"Boolean","memberOf":""},{"desc":"The path to an image to display in the button (the image will be set as the background-image\nCSS property of the button by default, so if you want a mixed icon\/text button, set cls:\"x-btn-text-icon\")","name":"icon","type":"String","memberOf":""},{"desc":"A css class which sets a background image to be used as the icon for this button (defaults to undefined).","name":"iconCls","type":"String","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).","name":"menu","type":"Mixed","memberOf":""},{"desc":"The position to align the menu to (see {@link Roo.Element#alignTo} for more details, defaults to 'tl-bl?').","name":"menuAlign","type":"String","memberOf":""},{"desc":"The minimum width for this button (used to give a set of buttons a common width)","name":"minWidth","type":"Number","memberOf":""},{"desc":"True to start pressed (only if enableToggle = true)","name":"pressed","type":"Boolean","memberOf":""},{"desc":"The element to append the button to","name":"renderTo","type":"String\/HTMLElement\/Element","memberOf":""},{"desc":"True to repeat fire the click event while the mouse is down. This can also be\n  an {@link Roo.util.ClickRepeater} config object (defaults to false).","name":"repeat","type":"Boolean\/Object","memberOf":""},{"desc":"The scope of the handler","name":"scope","type":"Object","memberOf":""},{"desc":"The DOM tabIndex for this button (defaults to undefined)","name":"tabIndex","type":"Number","memberOf":""},{"desc":"(Optional)\nAn {@link Roo.Template} with which to create the Button's main element. This Template must\ncontain numeric substitution parameter 0 if it is to display the tRoo property. Changing the template could\nrequire code modifications if required elements (e.g. a button) aren't present.","name":"template","type":"Roo.Template","memberOf":""},{"desc":"The button text","name":"text","type":"String","memberOf":""},{"desc":"The group this toggle button is a member of (only 1 per group can be pressed, only\n   applies if enableToggle = true)","name":"toggleGroup","type":"String","memberOf":""},{"desc":"The tooltip for the button - can be a string or QuickTips config object","name":"tooltip","type":"String\/Object","memberOf":""},{"desc":"The type of tooltip to use. Either \"qtip\" (default) for QuickTips or \"title\" for title attribute.","name":"tooltipType","type":"String","memberOf":""},{"desc":"The button's type, corresponding to the DOM input element type attribute.  Either \"submit,\" \"reset\" or \"button\" (default).","name":"type","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this button is clicked","name":"click","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when the mouse exits the button","name":"mouseout","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when the mouse hovers over the button","name":"mouseover","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the button is rendered","name":"render","type":"function"},{"sig":"function (_self, pressed)\n{\n\n}","desc":"Fires when the \"pressed\" state of this button changes (only if enableToggle = true)","name":"toggle","type":"function"}]},"Roo.ColorPalette":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"If set to true then reselecting a color that is already selected fires the selection event","name":"allowReselect","type":"Boolean","memberOf":""},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"The CSS class to apply to the containing element (defaults to \"x-color-palette\")","name":"itemCls","type":"String","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"The initial color to highlight (should be a valid 6-digit color hex code without the # symbol).  Note that\nthe hex codes are case-sensitive.","name":"value","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self, color)\n{\n\n}","desc":"Fires when a color is selected","name":"select","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"}]},"Roo.Component":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":""},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":""},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":""},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"}]},"Roo.ContentPanel":{"props":[{"desc":"Values to <b>add<\/b> to the width\/height when doing a {@link #fitToFrame} (default is [0, 0])","name":"adjustments","type":"Array","memberOf":""},{"desc":"True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create","name":"autoCreate","type":"Boolean\/Object","memberOf":""},{"desc":"True to scroll overflow in this panel (use with {@link #fitToFrame})","name":"autoScroll","type":"Boolean","memberOf":""},{"desc":"True if the panel should not be activated when it is added (defaults to false)","name":"background","type":"Boolean","memberOf":""},{"desc":"True if the panel can be closed\/removed","name":"closable","type":"Boolean","memberOf":""},{"desc":"When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)","name":"fitContainer","type":"Boolean","memberOf":""},{"desc":"True for this panel to adjust its size to fit when the region resizes  (defaults to false)","name":"fitToFrame","type":"Boolean","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"When used with {@link #url}, calls {@link #setUrl} with this value","name":"loadOnce","type":"Boolean","memberOf":""},{"desc":"When used with {@link #url}, calls {@link #setUrl} with this value","name":"params","type":"String\/Object","memberOf":""},{"desc":"An element to resize if {@link #fitToFrame} is true (instead of this panel's element)","name":"resizeEl","type":"String\/HTMLElement\/Element","memberOf":""},{"desc":"The title for this panel","name":"title","type":"String","memberOf":""},{"desc":"A toolbar for this panel","name":"toolbar","type":"Toolbar","memberOf":""},{"desc":"Calls {@link #setUrl} with this value","name":"url","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires when this panel is activated.","name":"activate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this panel is activated.","name":"deactivate","type":"function"},{"sig":"function (_self, width, height)\n{\n\n}","desc":"Fires when this panel is resized if fitToFrame is true.","name":"resize","type":"function"}]},"Roo.DDView":{"props":[{"desc":"Causes ctrl\/drag operations to copy nodes rather than move.","name":"allowCopy","type":"Boolean","memberOf":""},{"desc":"Causes drag operations to copy nodes rather than move.","name":"copy","type":"Boolean","memberOf":""},{"desc":"The ddgroup name(s) for the View's DragZone.","name":"dragGroup","type":"String\/Array","memberOf":""},{"desc":"The ddgroup name(s) for the View's DropZone.","name":"dropGroup","type":"String\/Array","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.DatePicker":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"The text to display on the cancel button","name":"cancelText","type":"String","memberOf":""},{"desc":"True to constrain the date picker to the viewport (defaults to true)","name":"constrainToViewport","type":"Boolean","memberOf":""},{"desc":"An array of textual day names which can be overriden for localization support (defaults to Date.dayNames)","name":"dayNames","type":"Array","memberOf":""},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"JavaScript regular expression used to disable a pattern of dates (defaults to null)","name":"disabledDatesRE","type":"RegExp","memberOf":""},{"desc":"The tooltip text to display when the date falls on a disabled date (defaults to \"\")","name":"disabledDatesText","type":"String","memberOf":""},{"desc":"An array of days to disable, 0-based. For example, [0, 6] disables Sunday and Saturday (defaults to null).","name":"disabledDays","type":"Array","memberOf":""},{"desc":"The tooltip to display when the date falls on a disabled day (defaults to \"\")","name":"disabledDaysText","type":"String","memberOf":""},{"desc":"The default date format string which can be overriden for localization support.  The format must be\nvalid according to {@link Date#parseDate} (defaults to 'm\/d\/y').","name":"format","type":"String","memberOf":""},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"Maximum allowable date (JavaScript date object, defaults to null)","name":"maxDate","type":"Date","memberOf":""},{"desc":"The error text to display if the maxDate validation fails (defaults to \"This date is after the maximum date\")","name":"maxText","type":"String","memberOf":""},{"desc":"Minimum allowable date (JavaScript date object, defaults to null)","name":"minDate","type":"Date","memberOf":""},{"desc":"The error text to display if the minDate validation fails (defaults to \"This date is before the minimum date\")","name":"minText","type":"String","memberOf":""},{"desc":"An array of textual month names which can be overriden for localization support (defaults to Date.monthNames)","name":"monthNames","type":"Array","memberOf":""},{"desc":"The header month selector tooltip (defaults to 'Choose a month (Control+Up\/Down to move years)')","name":"monthYearText","type":"String","memberOf":""},{"desc":"The next month navigation button tooltip (defaults to 'Next Month (Control+Right)')","name":"nextText","type":"String","memberOf":""},{"desc":"The text to display on the ok button","name":"okText","type":"String","memberOf":""},{"desc":"The previous month navigation button tooltip (defaults to 'Previous Month (Control+Left)')","name":"prevText","type":"String","memberOf":""},{"desc":"Show a clear button (usefull for date form elements that can be blank.)","name":"showClear","type":"Bool","memberOf":""},{"desc":"Day index at which the week should begin, 0-based (defaults to 0, which is Sunday)","name":"startDay","type":"Number","memberOf":""},{"desc":"The text to display on the button that selects the current date (defaults to \"Today\")","name":"todayText","type":"String","memberOf":""},{"desc":"The tooltip to display for the button that selects the current date (defaults to \"{current date} (Spacebar)\")","name":"todayTip","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self, date)\n{\n\n}","desc":"Fires when a date is selected","name":"select","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"}]},"Roo.Editor":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"The position to align to (see {@link Roo.Element#alignTo} for more details, defaults to \"c-c?\").","name":"alignment","type":"String","memberOf":""},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"True for the editor to automatically adopt the size of the underlying field, \"width\" to adopt the width only,\nor \"height\" to adopt the height only (defaults to false)","name":"autosize","type":"Boolean\/String","memberOf":""},{"desc":"True to cancel the edit when the escape key is pressed (defaults to false)","name":"cancelOnEsc","type":"Boolean","memberOf":""},{"desc":"True to complete the edit when the enter key is pressed (defaults to false)","name":"completeOnEnter","type":"Boolean","memberOf":""},{"desc":"True to constrain the editor to the viewport","name":"constrain","type":"Boolean","memberOf":""},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"False to keep the bound element visible while the editor is displayed (defaults to true)","name":"hideEl","type":"Boolean","memberOf":""},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"True to skip the the edit completion process (no save, no events fired) if the user completes an edit and\nthe value has not changed (defaults to false).  Applies only to string values - edits for other data types\nwill never be ignored.","name":"ignoreNoChange","type":"Boolean","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"True to automatically revert the field value and cancel the edit when the user completes an edit and the field\nvalidation fails (defaults to true)","name":"revertInvalid","type":"Boolean","memberOf":""},{"desc":"\"sides\" for sides\/bottom only, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"frame\")","name":"shadow","type":"Boolean\/String","memberOf":""},{"desc":"True to update the innerHTML of the bound element when the update completes (defaults to false)","name":"updateEl","type":"Boolean","memberOf":""},{"desc":"The data value of the underlying field (defaults to \"\")","name":"value","type":"Mixed","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, value, startValue)\n{\n\n}","desc":"Fires after a change has been made to the field, but before the change is reflected in the underlying\nfield.  Saving the change to the field can be canceled by returning false from the handler of this event.\nNote that if the value has not changed and ignoreNoChange = true, the editing will still end but this\nevent will not fire since no edit actually occurred.","name":"beforecomplete","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self, boundEl, value)\n{\n\n}","desc":"Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning\nfalse from the handler of this event.","name":"beforestartedit","type":"function"},{"sig":"function (_self, value, startValue)\n{\n\n}","desc":"Fires after editing is complete and any changed value has been written to the underlying field.","name":"complete","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.","name":"specialkey","type":"function"},{"sig":"function (boundEl, value)\n{\n\n}","desc":"Fires when this editor is displayed","name":"startedit","type":"function"}]},"Roo.Fx":{"props":[{"desc":"A css class to apply after the effect","name":"afterCls","type":"String","memberOf":""},{"desc":"A style specification string, e.g. \"width:100px\", or an object in the form {width:\"100px\"}, or\na function which returns such a specification that will be applied to the Element after the effect finishes","name":"afterStyle","type":"String\/Object\/Function","memberOf":""},{"desc":"Whether the effect should block other effects from queueing while it runs","name":"block","type":"Boolean","memberOf":""},{"desc":"A function called when the effect is finished","name":"callback","type":"Function","memberOf":""},{"desc":"Whether to allow subsequently-queued effects to run at the same time as the current effect, or to ensure that they run in sequence","name":"concurrent","type":"Boolean","memberOf":""},{"desc":"The length of time (in seconds) that the effect should last","name":"duration","type":"Number","memberOf":""},{"desc":"A valid Easing value for the effect","name":"easing","type":"String","memberOf":""},{"desc":"Whether the Element should be removed from the DOM and destroyed after the effect finishes","name":"remove","type":"Boolean","memberOf":""},{"desc":"The scope of the effect function","name":"scope","type":"Object","memberOf":""},{"desc":"Whether subsequent effects should be stopped and removed after the current effect finishes","name":"stopFx","type":"Boolean","memberOf":""},{"desc":"Whether to use the <i>display<\/i> CSS property instead of <i>visibility<\/i> when hiding Elements (only applies to \neffects that end with the element being visually hidden, ignored otherwise)","name":"useDisplay","type":"Boolean","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.GridPanel":{"props":[{"desc":"Values to <b>add<\/b> to the width\/height when doing a {@link #fitToFrame} (default is [0, 0])","name":"adjustments","type":"Array","memberOf":"Roo.ContentPanel"},{"desc":"True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create","name":"autoCreate","type":"Boolean\/Object","memberOf":"Roo.ContentPanel"},{"desc":"True to scroll overflow in this panel (use with {@link #fitToFrame})","name":"autoScroll","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"True if the panel should not be activated when it is added (defaults to false)","name":"background","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"True if the panel can be closed\/removed","name":"closable","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)","name":"fitContainer","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"True for this panel to adjust its size to fit when the region resizes  (defaults to false)","name":"fitToFrame","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"When used with {@link #url}, calls {@link #setUrl} with this value","name":"loadOnce","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"When used with {@link #url}, calls {@link #setUrl} with this value","name":"params","type":"String\/Object","memberOf":"Roo.ContentPanel"},{"desc":"An element to resize if {@link #fitToFrame} is true (instead of this panel's element)","name":"resizeEl","type":"String\/HTMLElement\/Element","memberOf":"Roo.ContentPanel"},{"desc":"The title for this panel","name":"title","type":"String","memberOf":"Roo.ContentPanel"},{"desc":"A toolbar for this panel","name":"toolbar","type":"Toolbar","memberOf":"Roo.ContentPanel"},{"desc":"Calls {@link #setUrl} with this value","name":"url","type":"String","memberOf":"Roo.ContentPanel"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires when this panel is activated.","name":"activate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this panel is activated.","name":"deactivate","type":"function"},{"sig":"function (_self, width, height)\n{\n\n}","desc":"Fires when this panel is resized if fitToFrame is true.","name":"resize","type":"function"}]},"Roo.JsonView":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, index, node, e)\n{\n\n}","desc":"Fires before a click is processed. Returns false to cancel the default action.","name":"beforeclick","type":"function"},{"sig":"function (_self, data)\n{\n\n}","desc":"Fires before rendering of the downloaded JSON data.","name":"beforerender","type":"function"},{"sig":"function (_self, node, selections)\n{\n\n}","desc":"Fires before a selection is made. If any handlers return false, the selection is cancelled.","name":"beforeselect","type":"function"},{"sig":"function (_self, index, node, e)\n{\n\n}","desc":"Fires when a template node is clicked.","name":"click","type":"function"},{"sig":"function (_self, index, node, e)\n{\n\n}","desc":"Fires when a template node is right clicked.","name":"contextmenu","type":"function"},{"sig":"function (_self, index, node, e)\n{\n\n}","desc":"Fires when a template node is double clicked.","name":"dblclick","type":"function"},{"sig":"function (_self, data, response)\n{\n\n}","desc":"Fires when data is loaded.","name":"load","type":"function"},{"sig":"function (_self, response)\n{\n\n}","desc":"Fires when loading fails.","name":"loadexception","type":"function"},{"sig":"function (_self, selections)\n{\n\n}","desc":"Fires when the selected nodes change.","name":"selectionchange","type":"function"}]},"Roo.KeyNav":{"props":[{"desc":"The method to call on the {@link Roo.EventObject} after this KeyNav intercepts a key.  Valid values are\n{@link Roo.EventObject#stopEvent}, {@link Roo.EventObject#preventDefault} and\n{@link Roo.EventObject#stopPropagation} (defaults to 'stopEvent')","name":"defaultEventAction","type":"String","memberOf":""},{"desc":"True to disable this KeyNav instance (defaults to false)","name":"disabled","type":"Boolean","memberOf":""},{"desc":"Handle the keydown event instead of keypress (defaults to false).  KeyNav automatically does this for IE since\nIE does not propagate special keys on keypress, but setting this to true will force other browsers to also\nhandle keydown instead of keypress.","name":"forceKeyDown","type":"Boolean","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.Layer":{"props":[{"desc":"CSS class to add to the element","name":"cls","type":"String","memberOf":""},{"desc":"False to disable constrain to viewport (defaults to true)","name":"constrain","type":"Boolean","memberOf":""},{"desc":"DomHelper object config to create element with (defaults to {tag: \"div\", cls: \"x-layer\"}).","name":"dh","type":"Object","memberOf":""},{"desc":"True to create a shadow element with default class \"x-layer-shadow\", or\nyou can pass a string with a CSS class name. False turns off the shadow.","name":"shadow","type":"String\/Boolean","memberOf":""},{"desc":"Number of pixels to offset the shadow (defaults to 3)","name":"shadowOffset","type":"Number","memberOf":""},{"desc":"False to disable the iframe shim in browsers which need one (defaults to true)","name":"shim","type":"Boolean","memberOf":""},{"desc":"Starting z-index (defaults to 11000)","name":"zindex","type":"Number","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.LayoutDialog":{"props":[{"desc":"Id or element from which the dialog should animate while opening\n(defaults to null with no animation)","name":"animateTarget","type":"String\/Element","memberOf":"Roo.BasicDialog"},{"desc":"True to auto create from scratch, or using a DomHelper Object (defaults to false)","name":"autoCreate","type":"Boolean\/DomHelper","memberOf":"Roo.BasicDialog"},{"desc":"True to allow the dialog body contents to overflow and display scrollbars (defaults to false)","name":"autoScroll","type":"Boolean","memberOf":"Roo.BasicDialog"},{"desc":"If true, all elements with class 'x-dlg-tab' will get automatically converted to tabs (defaults to false)","name":"autoTabs","type":"Boolean","memberOf":"Roo.BasicDialog"},{"desc":"Valid values are \"left,\" \"center\" and \"right\" (defaults to \"right\")","name":"buttonAlign","type":"String","memberOf":"Roo.BasicDialog"},{"desc":"Array of buttons","name":"buttons","type":"Array","memberOf":"Roo.BasicDialog"},{"desc":"False to remove the built-in top-right corner close button (defaults to true)","name":"closable","type":"Boolean","memberOf":"Roo.BasicDialog"},{"desc":"False to remove the built-in top-right corner collapse button (defaults to true)","name":"collapsible","type":"Boolean","memberOf":"Roo.BasicDialog"},{"desc":"True to keep the dialog constrained within the visible viewport boundaries (defaults to true)","name":"constraintoviewport","type":"Boolean","memberOf":"Roo.BasicDialog"},{"desc":"False to disable dragging of the dialog within the viewport (defaults to true)","name":"draggable","type":"Boolean","memberOf":"Roo.BasicDialog"},{"desc":"True to ensure that anytime the dialog is shown or resized it gets centered (defaults to false)","name":"fixedcenter","type":"Boolean","memberOf":"Roo.BasicDialog"},{"desc":"Height of the dialog in pixels (can also be set via CSS).  Determined by browser if unspecified.","name":"height","type":"Number","memberOf":"Roo.BasicDialog"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"Minimum width of all dialog buttons (defaults to 75)","name":"minButtonWidth","type":"Number","memberOf":"Roo.BasicDialog"},{"desc":"The minimum allowable height for a resizable dialog (defaults to 80)","name":"minHeight","type":"Number","memberOf":"Roo.BasicDialog"},{"desc":"The minimum allowable width for a resizable dialog (defaults to 200)","name":"minWidth","type":"Number","memberOf":"Roo.BasicDialog"},{"desc":"True to show the dialog modally, preventing user interaction with the rest of the page (defaults to false)","name":"modal","type":"Boolean","memberOf":"Roo.BasicDialog"},{"desc":"True to drag a lightweight proxy element rather than the dialog itself, used when\ndraggable = true (defaults to false)","name":"proxyDrag","type":"Boolean","memberOf":"Roo.BasicDialog"},{"desc":"False to disable manual dialog resizing (defaults to true)","name":"resizable","type":"Boolean","memberOf":"Roo.BasicDialog"},{"desc":"Which resize handles to display - see the {@link Roo.Resizable} handles config\nproperty for valid values (defaults to 'all')","name":"resizeHandles","type":"String","memberOf":"Roo.BasicDialog"},{"desc":"True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right\nshadow (defaults to false)","name":"shadow","type":"Boolean\/String","memberOf":"Roo.BasicDialog"},{"desc":"The number of pixels to offset the shadow if displayed (defaults to 5)","name":"shadowOffset","type":"Number","memberOf":"Roo.BasicDialog"},{"desc":"True to create an iframe shim that prevents selects from showing through (defaults to false)","name":"shim","type":"Boolean","memberOf":"Roo.BasicDialog"},{"desc":"True to cause the dimensions to be recalculated before the dialog is shown (defaults to false)","name":"syncHeightBeforeShow","type":"Boolean","memberOf":"Roo.BasicDialog"},{"desc":"The tag name of tab elements, used when autoTabs = true (defaults to 'div')","name":"tabTag","type":"String","memberOf":"Roo.BasicDialog"},{"desc":"Default text to display in the title bar (defaults to null)","name":"title","type":"String","memberOf":"Roo.BasicDialog"},{"desc":"Width of the dialog in pixels (can also be set via CSS).  Determined by browser if unspecified.","name":"width","type":"Number","memberOf":"Roo.BasicDialog"},{"desc":"The default left page coordinate of the dialog (defaults to center screen)","name":"x","type":"Number","memberOf":"Roo.BasicDialog"},{"desc":"The default top page coordinate of the dialog (defaults to center screen)","name":"y","type":"Number","memberOf":"Roo.BasicDialog"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before this dialog is hidden.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before this dialog is shown.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this dialog is hidden.","name":"hide","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when a key is pressed","name":"keydown","type":"function"},{"sig":"function (_self, x, y)\n{\n\n}","desc":"Fires when this dialog is moved by the user.","name":"move","type":"function"},{"sig":"function (_self, width, height)\n{\n\n}","desc":"Fires when this dialog is resized by the user.","name":"resize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this dialog is shown.","name":"show","type":"function"}]},"Roo.LayoutManager":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires when a layout is performed.","name":"layout","type":"function"},{"sig":"function (region)\n{\n\n}","desc":"Fires when a region is collapsed.","name":"regioncollapsed","type":"function"},{"sig":"function (region)\n{\n\n}","desc":"Fires when a region is expanded.","name":"regionexpanded","type":"function"},{"sig":"function (region, newSize)\n{\n\n}","desc":"Fires when the user resizes a region.","name":"regionresized","type":"function"}]},"Roo.LayoutRegion":{"props":[{"desc":"True to always display tabs even when there is only 1 panel (defaults to false)","name":"alwaysShowTabs","type":"Boolean","memberOf":""},{"desc":"True to animate expand\/collapse (defaults to false)","name":"animate","type":"Boolean","memberOf":""},{"desc":"False to disable auto hiding when the mouse leaves the \"floated\" region (defaults to true)","name":"autoHide","type":"Boolean","memberOf":""},{"desc":"True to enable overflow scrolling (defaults to false)","name":"autoScroll","type":"Boolean","memberOf":""},{"desc":"True to place the close icon on the tabs instead of the region titlebar (defaults to false)","name":"closeOnTab","type":"Boolean","memberOf":""},{"desc":"Margins for the element when collapsed (defaults to: north\/south {top: 2, left: 0, right:0, bottom: 2} or east\/west {top: 0, left: 2, right:2, bottom: 0})","name":"cmargins","type":"Object","memberOf":""},{"desc":"True to set the initial display to collapsed (defaults to false)","name":"collapsed","type":"Boolean","memberOf":""},{"desc":"Optional string message to display in the collapsed block of a north or south region","name":"collapsedTitle","type":"String","memberOf":""},{"desc":"False to disable collapsing (defaults to true)","name":"collapsible","type":"Boolean","memberOf":""},{"desc":"True to disable tab tooltips","name":"disableTabTips","type":"Boolean","memberOf":""},{"desc":"False to disable floating (defaults to true)","name":"floatable","type":"Boolean","memberOf":""},{"desc":"For North\/South panels","name":"height","type":"Number","memberOf":""},{"desc":"True to start the region hidden (defaults to false)","name":"hidden","type":"Boolean","memberOf":""},{"desc":"True to hide the tab strip (defaults to false)","name":"hideTabs","type":"Boolean","memberOf":""},{"desc":"True to hide the region when it has no panels","name":"hideWhenEmpty","type":"Boolean","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"Margins for the element (defaults to {top: 0, left: 0, right:0, bottom: 0})","name":"margins","type":"Object","memberOf":""},{"desc":"The minimum tab width (defaults to 40)","name":"minTabWidth","type":"Number","memberOf":""},{"desc":"The preferred tab width (defaults to 150)","name":"preferredTabWidth","type":"Number","memberOf":""},{"desc":"True to preserve removed panels so they can be readded later (defaults to false)","name":"preservePanels","type":"Boolean","memberOf":""},{"desc":"True to enable automatic tab resizing. This will resize the tabs so they are all the same size and fit within\nthe space available, similar to FireFox 1.5 tabs (defaults to false)","name":"resizeTabs","type":"Boolean","memberOf":""},{"desc":"True to show a pin button","name":"showPin","type":"Boolean","memberOf":""},{"desc":"To show the splitter","name":"split","type":"Boolean","memberOf":""},{"desc":"\"top\" or \"bottom\" (defaults to \"bottom\")","name":"tabPosition","type":"String","memberOf":""},{"desc":"The title for the region (overrides panel titles)","name":"title","type":"String","memberOf":""},{"desc":"True to display a title bar (defaults to true)","name":"titlebar","type":"Boolean","memberOf":""},{"desc":"For East\/West panels","name":"width","type":"Number","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, panel, e)\n{\n\n}","desc":"Fires before a panel is removed (or closed). To cancel the removal set \"e.cancel = true\" on the event argument.","name":"beforeremove","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this region is collapsed.","name":"collapsed","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this region is expanded.","name":"expanded","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the layout for this region is changed.","name":"invalidated","type":"function"},{"sig":"function (_self, panel)\n{\n\n}","desc":"Fires when a panel is activated.","name":"panelactivated","type":"function"},{"sig":"function (_self, panel)\n{\n\n}","desc":"Fires when a panel is added.","name":"paneladded","type":"function"},{"sig":"function (_self, panel)\n{\n\n}","desc":"Fires when a panel is removed.","name":"panelremoved","type":"function"},{"sig":"function (_self, newSize)\n{\n\n}","desc":"Fires when the user resizes this region.","name":"resized","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this region slides out of view.","name":"slidehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this region is slid into view.","name":"slideshow","type":"function"},{"sig":"function (_self, visibility)\n{\n\n}","desc":"Fires when this region is shown or hidden","name":"visibilitychange","type":"function"}]},"Roo.LoadMask":{"props":[{"desc":"The text to display in a centered loading message box (defaults to 'Loading...')","name":"msg","type":"String","memberOf":""},{"desc":"The CSS class to apply to the loading message element (defaults to \"x-mask-loading\")","name":"msgCls","type":"String","memberOf":""},{"desc":"True to create a single-use mask that is automatically destroyed after loading (useful for page loads),\nFalse to persist the mask element reference for multiple uses (e.g., for paged data widgets).  Defaults to false.","name":"removeMask","type":"Boolean","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.NestedLayoutPanel":{"props":[{"desc":"Values to <b>add<\/b> to the width\/height when doing a {@link #fitToFrame} (default is [0, 0])","name":"adjustments","type":"Array","memberOf":"Roo.ContentPanel"},{"desc":"True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create","name":"autoCreate","type":"Boolean\/Object","memberOf":"Roo.ContentPanel"},{"desc":"True to scroll overflow in this panel (use with {@link #fitToFrame})","name":"autoScroll","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"True if the panel should not be activated when it is added (defaults to false)","name":"background","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"True if the panel can be closed\/removed","name":"closable","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)","name":"fitContainer","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"True for this panel to adjust its size to fit when the region resizes  (defaults to false)","name":"fitToFrame","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"When used with {@link #url}, calls {@link #setUrl} with this value","name":"loadOnce","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"When used with {@link #url}, calls {@link #setUrl} with this value","name":"params","type":"String\/Object","memberOf":"Roo.ContentPanel"},{"desc":"An element to resize if {@link #fitToFrame} is true (instead of this panel's element)","name":"resizeEl","type":"String\/HTMLElement\/Element","memberOf":"Roo.ContentPanel"},{"desc":"The title for this panel","name":"title","type":"String","memberOf":"Roo.ContentPanel"},{"desc":"A toolbar for this panel","name":"toolbar","type":"Toolbar","memberOf":"Roo.ContentPanel"},{"desc":"Calls {@link #setUrl} with this value","name":"url","type":"String","memberOf":"Roo.ContentPanel"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires when this panel is activated.","name":"activate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this panel is activated.","name":"deactivate","type":"function"},{"sig":"function (_self, width, height)\n{\n\n}","desc":"Fires when this panel is resized if fitToFrame is true.","name":"resize","type":"function"}]},"Roo.PagingToolbar":{"props":[{"desc":"container The id or element that will contain the toolbar","name":"container","type":"String\/HTMLElement\/Element","memberOf":""},{"desc":"The underlying data store providing the paged data","name":"dataSource","type":"Roo.data.Store","memberOf":""},{"desc":"True to display the displayMsg (defaults to false)","name":"displayInfo","type":"Boolean","memberOf":""},{"desc":"The paging status message to display (defaults to \"Displaying {start} - {end} of {total}\")","name":"displayMsg","type":"String","memberOf":""},{"desc":"The message to display when no records are found (defaults to \"No data to display\")","name":"emptyMsg","type":"String","memberOf":""},{"desc":"array of button configs or elements to add","name":"items","type":"Roo.data.Store","memberOf":"Roo.Toolbar"},{"desc":"The number of records to display per page (defaults to 20)","name":"pageSize","type":"Number","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.ReaderLayout":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires when a layout is performed.","name":"layout","type":"function"},{"sig":"function (region)\n{\n\n}","desc":"Fires when a region is collapsed.","name":"regioncollapsed","type":"function"},{"sig":"function (region)\n{\n\n}","desc":"Fires when a region is expanded.","name":"regionexpanded","type":"function"},{"sig":"function (region, newSize)\n{\n\n}","desc":"Fires when the user resizes a region.","name":"regionresized","type":"function"}]},"Roo.Resizable":{"props":[{"desc":"String \"auto\" or an array [width, height] with values to be <b>added<\/b> to the\nresize operation's new size (defaults to [0, 0])","name":"adjustments","type":"Array\/String","memberOf":""},{"desc":"True to animate the resize (not compatible with dynamic sizing, defaults to false)","name":"animate","type":"Boolean","memberOf":""},{"desc":"Constrain the resize to a particular element","name":"constrainTo","type":"String\/HTMLElement\/Element","memberOf":""},{"desc":"True to disable mouse tracking. This is only applied at config time. (defaults to false)","name":"disableTrackOver","type":"Boolean","memberOf":""},{"desc":"Convenience to initialize drag drop (defaults to false)","name":"draggable","type":"Boolean","memberOf":""},{"desc":"Animation duration if animate = true (defaults to .35)","name":"duration","type":"Number","memberOf":""},{"desc":"True to resize the element while dragging instead of using a proxy (defaults to false)","name":"dynamic","type":"Boolean","memberOf":""},{"desc":"Animation easing if animate = true (defaults to 'easingOutStrong')","name":"easing","type":"String","memberOf":""},{"desc":"False to disable resizing (defaults to true)","name":"enabled","type":"Boolean","memberOf":""},{"desc":"String consisting of the resize handles to display (defaults to undefined)","name":"handles","type":"String","memberOf":""},{"desc":"The height of the element in pixels (defaults to null)","name":"height","type":"Number","memberOf":""},{"desc":"The increment to snap the height resize in pixels (dynamic must be true, defaults to 0)","name":"heightIncrement","type":"Number","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"The maximum height for the element (defaults to 10000)","name":"maxHeight","type":"Number","memberOf":""},{"desc":"The maximum width for the element (defaults to 10000)","name":"maxWidth","type":"Number","memberOf":""},{"desc":"The minimum height for the element (defaults to 5)","name":"minHeight","type":"Number","memberOf":""},{"desc":"The minimum width for the element (defaults to 5)","name":"minWidth","type":"Number","memberOf":""},{"desc":"The minimum allowed page X for the element (only used for west resizing, defaults to 0)","name":"minX","type":"Number","memberOf":""},{"desc":"The minimum allowed page Y for the element (only used for north resizing, defaults to 0)","name":"minY","type":"Number","memberOf":""},{"desc":"<b>Deprecated<\/b>.  The old style of adding multi-direction resize handles, deprecated\nin favor of the handles config option (defaults to false)","name":"multiDirectional","type":"Boolean","memberOf":""},{"desc":"True to ensure that the resize handles are always visible, false to display them only when the\nuser mouses over the resizable borders. This is only applied at config time. (defaults to false)","name":"pinned","type":"Boolean","memberOf":""},{"desc":"True to preserve the original ratio between height and width during resize (defaults to false)","name":"preserveRatio","type":"Boolean","memberOf":""},{"desc":"True to resize the first child, or id\/element to resize (defaults to false)","name":"resizeChild","type":"Boolean\/String\/Element","memberOf":""},{"desc":"Constrain the resize to a particular region","name":"resizeRegion","type":"Roo.lib.Region","memberOf":""},{"desc":"True for transparent handles. This is only applied at config time. (defaults to false)","name":"transparent","type":"Boolean","memberOf":""},{"desc":"The width of the element in pixels (defaults to null)","name":"width","type":"Number","memberOf":""},{"desc":"The increment to snap the width resize in pixels (dynamic must be true, defaults to 0)","name":"widthIncrement","type":"Number","memberOf":""},{"desc":"True to wrap an element with a div if needed (required for textareas and images, defaults to false)","name":"wrap","type":"Boolean","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, e)\n{\n\n}","desc":"Fired before resize is allowed. Set enabled to false to cancel resize.","name":"beforeresize","type":"function"},{"sig":"function (_self, width, height, e)\n{\n\n}","desc":"Fired after a resize.","name":"resize","type":"function"}]},"Roo.Shadow":{"props":[{"desc":"The shadow display mode.  Supports the following options:<br \/>\nsides: Shadow displays on both sides and bottom only<br \/>\nframe: Shadow displays equally on all four sides<br \/>\ndrop: Traditional bottom-right drop shadow (default)","name":"mode","type":"String","memberOf":""},{"desc":"The number of pixels to offset the shadow from the element (defaults to 4)","name":"offset","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.SplitBar":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before the splitter is dragged","name":"beforeresize","type":"function"},{"sig":"function (_self, newSize)\n{\n\n}","desc":"Fires when the splitter is moved","name":"moved","type":"function"},{"sig":"function (_self, newSize)\n{\n\n}","desc":"Fires when the splitter is moved (alias for {@link #event-moved})","name":"resize","type":"function"}]},"Roo.SplitButton":{"props":[{"desc":"A function called when the arrow button is clicked (can be used instead of click event)","name":"arrowHandler","type":"Function","memberOf":""},{"desc":"The title attribute of the arrow","name":"arrowTooltip","type":"String","memberOf":""},{"desc":"The type of event to map to the button's event handler (defaults to 'click')","name":"clickEvent","type":"String","memberOf":"Roo.Button"},{"desc":"A CSS class to apply to the button's main element.","name":"cls","type":"String","memberOf":"Roo.Button"},{"desc":"True to start disabled (defaults to false)","name":"disabled","type":"Boolean","memberOf":"Roo.Button"},{"desc":"True to enable pressed\/not pressed toggling (defaults to false)","name":"enableToggle","type":"Boolean","memberOf":"Roo.Button"},{"desc":"False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)","name":"handleMouseEvents","type":"Boolean","memberOf":"Roo.Button"},{"desc":"A function called when the button is clicked (can be used instead of click event)","name":"handler","type":"Function","memberOf":"Roo.Button"},{"desc":"True to start hidden (defaults to false)","name":"hidden","type":"Boolean","memberOf":"Roo.Button"},{"desc":"The path to an image to display in the button (the image will be set as the background-image\nCSS property of the button by default, so if you want a mixed icon\/text button, set cls:\"x-btn-text-icon\")","name":"icon","type":"String","memberOf":"Roo.Button"},{"desc":"A css class which sets a background image to be used as the icon for this button (defaults to undefined).","name":"iconCls","type":"String","memberOf":"Roo.Button"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).","name":"menu","type":"Mixed","memberOf":"Roo.Button"},{"desc":"The position to align the menu to (see {@link Roo.Element#alignTo} for more details, defaults to 'tl-bl?').","name":"menuAlign","type":"String","memberOf":"Roo.Button"},{"desc":"The minimum width for this button (used to give a set of buttons a common width)","name":"minWidth","type":"Number","memberOf":"Roo.Button"},{"desc":"True to start pressed (only if enableToggle = true)","name":"pressed","type":"Boolean","memberOf":"Roo.Button"},{"desc":"The element to append the button to","name":"renderTo","type":"String\/HTMLElement\/Element","memberOf":"Roo.Button"},{"desc":"True to repeat fire the click event while the mouse is down. This can also be\n  an {@link Roo.util.ClickRepeater} config object (defaults to false).","name":"repeat","type":"Boolean\/Object","memberOf":"Roo.Button"},{"desc":"The scope of the handler","name":"scope","type":"Object","memberOf":"Roo.Button"},{"desc":"The DOM tabIndex for this button (defaults to undefined)","name":"tabIndex","type":"Number","memberOf":"Roo.Button"},{"desc":"(Optional)\nAn {@link Roo.Template} with which to create the Button's main element. This Template must\ncontain numeric substitution parameter 0 if it is to display the tRoo property. Changing the template could\nrequire code modifications if required elements (e.g. a button) aren't present.","name":"template","type":"Roo.Template","memberOf":"Roo.Button"},{"desc":"The button text","name":"text","type":"String","memberOf":"Roo.Button"},{"desc":"The group this toggle button is a member of (only 1 per group can be pressed, only\n   applies if enableToggle = true)","name":"toggleGroup","type":"String","memberOf":"Roo.Button"},{"desc":"The tooltip for the button - can be a string or QuickTips config object","name":"tooltip","type":"String\/Object","memberOf":"Roo.Button"},{"desc":"The type of tooltip to use. Either \"qtip\" (default) for QuickTips or \"title\" for title attribute.","name":"tooltipType","type":"String","memberOf":"Roo.Button"},{"desc":"The button's type, corresponding to the DOM input element type attribute.  Either \"submit,\" \"reset\" or \"button\" (default).","name":"type","type":"String","memberOf":"Roo.Button"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this button's arrow is clicked","name":"arrowclick","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this button is clicked","name":"click","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when the mouse exits the button","name":"mouseout","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when the mouse hovers over the button","name":"mouseover","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the button is rendered","name":"render","type":"function"},{"sig":"function (_self, pressed)\n{\n\n}","desc":"Fires when the \"pressed\" state of this button changes (only if enableToggle = true)","name":"toggle","type":"function"}]},"Roo.SplitLayoutRegion":{"props":[{"desc":"True to always display tabs even when there is only 1 panel (defaults to false)","name":"alwaysShowTabs","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"True to animate expand\/collapse (defaults to false)","name":"animate","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"False to disable auto hiding when the mouse leaves the \"floated\" region (defaults to true)","name":"autoHide","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"True to enable overflow scrolling (defaults to false)","name":"autoScroll","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"True to place the close icon on the tabs instead of the region titlebar (defaults to false)","name":"closeOnTab","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"Margins for the element when collapsed (defaults to: north\/south {top: 2, left: 0, right:0, bottom: 2} or east\/west {top: 0, left: 2, right:2, bottom: 0})","name":"cmargins","type":"Object","memberOf":"Roo.LayoutRegion"},{"desc":"True to set the initial display to collapsed (defaults to false)","name":"collapsed","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"Optional string message to display in the collapsed block of a north or south region","name":"collapsedTitle","type":"String","memberOf":"Roo.LayoutRegion"},{"desc":"False to disable collapsing (defaults to true)","name":"collapsible","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"True to disable tab tooltips","name":"disableTabTips","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"False to disable floating (defaults to true)","name":"floatable","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"For North\/South panels","name":"height","type":"Number","memberOf":"Roo.LayoutRegion"},{"desc":"True to start the region hidden (defaults to false)","name":"hidden","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"True to hide the tab strip (defaults to false)","name":"hideTabs","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"True to hide the region when it has no panels","name":"hideWhenEmpty","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"Margins for the element (defaults to {top: 0, left: 0, right:0, bottom: 0})","name":"margins","type":"Object","memberOf":"Roo.LayoutRegion"},{"desc":"The minimum tab width (defaults to 40)","name":"minTabWidth","type":"Number","memberOf":"Roo.LayoutRegion"},{"desc":"The preferred tab width (defaults to 150)","name":"preferredTabWidth","type":"Number","memberOf":"Roo.LayoutRegion"},{"desc":"True to preserve removed panels so they can be readded later (defaults to false)","name":"preservePanels","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"True to enable automatic tab resizing. This will resize the tabs so they are all the same size and fit within\nthe space available, similar to FireFox 1.5 tabs (defaults to false)","name":"resizeTabs","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"True to show a pin button","name":"showPin","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"To show the splitter","name":"split","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"\"top\" or \"bottom\" (defaults to \"bottom\")","name":"tabPosition","type":"String","memberOf":"Roo.LayoutRegion"},{"desc":"The title for the region (overrides panel titles)","name":"title","type":"String","memberOf":"Roo.LayoutRegion"},{"desc":"True to display a title bar (defaults to true)","name":"titlebar","type":"Boolean","memberOf":"Roo.LayoutRegion"},{"desc":"For East\/West panels","name":"width","type":"Number","memberOf":"Roo.LayoutRegion"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, panel, e)\n{\n\n}","desc":"Fires before a panel is removed (or closed). To cancel the removal set \"e.cancel = true\" on the event argument.","name":"beforeremove","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this region is collapsed.","name":"collapsed","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this region is expanded.","name":"expanded","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the layout for this region is changed.","name":"invalidated","type":"function"},{"sig":"function (_self, panel)\n{\n\n}","desc":"Fires when a panel is activated.","name":"panelactivated","type":"function"},{"sig":"function (_self, panel)\n{\n\n}","desc":"Fires when a panel is added.","name":"paneladded","type":"function"},{"sig":"function (_self, panel)\n{\n\n}","desc":"Fires when a panel is removed.","name":"panelremoved","type":"function"},{"sig":"function (_self, newSize)\n{\n\n}","desc":"Fires when the user resizes this region.","name":"resized","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this region slides out of view.","name":"slidehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this region is slid into view.","name":"slideshow","type":"function"},{"sig":"function (_self, visibility)\n{\n\n}","desc":"Fires when this region is shown or hidden","name":"visibilitychange","type":"function"}]},"Roo.TabPanel":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, e, tab)\n{\n\n}","desc":"Fires before the active tab changes, set cancel to true on the \"e\" parameter to cancel the change","name":"beforetabchange","type":"function"},{"sig":"function (_self, activePanel)\n{\n\n}","desc":"Fires when the active tab changes","name":"tabchange","type":"function"}]},"Roo.TabPanelItem":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (tabPanel, _self)\n{\n\n}","desc":"Fires when this tab becomes the active tab.","name":"activate","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires before this tab is closed. To cancel the close, set cancel to true on e (e.cancel = true).","name":"beforeclose","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this tab is closed.","name":"close","type":"function"},{"sig":"function (tabPanel, _self)\n{\n\n}","desc":"Fires when this tab is no longer the active tab.","name":"deactivate","type":"function"}]},"Roo.Toolbar.Button":{"props":[{"desc":"The type of event to map to the button's event handler (defaults to 'click')","name":"clickEvent","type":"String","memberOf":"Roo.Button"},{"desc":"A CSS class to apply to the button's main element.","name":"cls","type":"String","memberOf":"Roo.Button"},{"desc":"True to start disabled (defaults to false)","name":"disabled","type":"Boolean","memberOf":"Roo.Button"},{"desc":"True to enable pressed\/not pressed toggling (defaults to false)","name":"enableToggle","type":"Boolean","memberOf":"Roo.Button"},{"desc":"False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)","name":"handleMouseEvents","type":"Boolean","memberOf":"Roo.Button"},{"desc":"A function called when the button is clicked (can be used instead of click event)","name":"handler","type":"Function","memberOf":"Roo.Button"},{"desc":"True to start hidden (defaults to false)","name":"hidden","type":"Boolean","memberOf":"Roo.Button"},{"desc":"The path to an image to display in the button (the image will be set as the background-image\nCSS property of the button by default, so if you want a mixed icon\/text button, set cls:\"x-btn-text-icon\")","name":"icon","type":"String","memberOf":"Roo.Button"},{"desc":"A css class which sets a background image to be used as the icon for this button (defaults to undefined).","name":"iconCls","type":"String","memberOf":"Roo.Button"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).","name":"menu","type":"Mixed","memberOf":"Roo.Button"},{"desc":"The position to align the menu to (see {@link Roo.Element#alignTo} for more details, defaults to 'tl-bl?').","name":"menuAlign","type":"String","memberOf":"Roo.Button"},{"desc":"The minimum width for this button (used to give a set of buttons a common width)","name":"minWidth","type":"Number","memberOf":"Roo.Button"},{"desc":"True to start pressed (only if enableToggle = true)","name":"pressed","type":"Boolean","memberOf":"Roo.Button"},{"desc":"The element to append the button to","name":"renderTo","type":"String\/HTMLElement\/Element","memberOf":"Roo.Button"},{"desc":"True to repeat fire the click event while the mouse is down. This can also be\n  an {@link Roo.util.ClickRepeater} config object (defaults to false).","name":"repeat","type":"Boolean\/Object","memberOf":"Roo.Button"},{"desc":"The scope of the handler","name":"scope","type":"Object","memberOf":"Roo.Button"},{"desc":"The DOM tabIndex for this button (defaults to undefined)","name":"tabIndex","type":"Number","memberOf":"Roo.Button"},{"desc":"(Optional)\nAn {@link Roo.Template} with which to create the Button's main element. This Template must\ncontain numeric substitution parameter 0 if it is to display the tRoo property. Changing the template could\nrequire code modifications if required elements (e.g. a button) aren't present.","name":"template","type":"Roo.Template","memberOf":"Roo.Button"},{"desc":"The button text","name":"text","type":"String","memberOf":"Roo.Button"},{"desc":"The group this toggle button is a member of (only 1 per group can be pressed, only\n   applies if enableToggle = true)","name":"toggleGroup","type":"String","memberOf":"Roo.Button"},{"desc":"The tooltip for the button - can be a string or QuickTips config object","name":"tooltip","type":"String\/Object","memberOf":"Roo.Button"},{"desc":"The type of tooltip to use. Either \"qtip\" (default) for QuickTips or \"title\" for title attribute.","name":"tooltipType","type":"String","memberOf":"Roo.Button"},{"desc":"The button's type, corresponding to the DOM input element type attribute.  Either \"submit,\" \"reset\" or \"button\" (default).","name":"type","type":"String","memberOf":"Roo.Button"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this button is clicked","name":"click","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when the mouse exits the button","name":"mouseout","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when the mouse hovers over the button","name":"mouseover","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the button is rendered","name":"render","type":"function"},{"sig":"function (_self, pressed)\n{\n\n}","desc":"Fires when the \"pressed\" state of this button changes (only if enableToggle = true)","name":"toggle","type":"function"}]},"Roo.Toolbar.SplitButton":{"props":[{"desc":"A function called when the arrow button is clicked (can be used instead of click event)","name":"arrowHandler","type":"Function","memberOf":"Roo.SplitButton"},{"desc":"The title attribute of the arrow","name":"arrowTooltip","type":"String","memberOf":"Roo.SplitButton"},{"desc":"The type of event to map to the button's event handler (defaults to 'click')","name":"clickEvent","type":"String","memberOf":"Roo.Button"},{"desc":"A CSS class to apply to the button's main element.","name":"cls","type":"String","memberOf":"Roo.Button"},{"desc":"True to start disabled (defaults to false)","name":"disabled","type":"Boolean","memberOf":"Roo.Button"},{"desc":"True to enable pressed\/not pressed toggling (defaults to false)","name":"enableToggle","type":"Boolean","memberOf":"Roo.Button"},{"desc":"False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)","name":"handleMouseEvents","type":"Boolean","memberOf":"Roo.Button"},{"desc":"A function called when the button is clicked (can be used instead of click event)","name":"handler","type":"Function","memberOf":"Roo.Button"},{"desc":"True to start hidden (defaults to false)","name":"hidden","type":"Boolean","memberOf":"Roo.Button"},{"desc":"The path to an image to display in the button (the image will be set as the background-image\nCSS property of the button by default, so if you want a mixed icon\/text button, set cls:\"x-btn-text-icon\")","name":"icon","type":"String","memberOf":"Roo.Button"},{"desc":"A css class which sets a background image to be used as the icon for this button (defaults to undefined).","name":"iconCls","type":"String","memberOf":"Roo.Button"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).","name":"menu","type":"Mixed","memberOf":"Roo.Button"},{"desc":"The position to align the menu to (see {@link Roo.Element#alignTo} for more details, defaults to 'tl-bl?').","name":"menuAlign","type":"String","memberOf":"Roo.Button"},{"desc":"The minimum width for this button (used to give a set of buttons a common width)","name":"minWidth","type":"Number","memberOf":"Roo.Button"},{"desc":"True to start pressed (only if enableToggle = true)","name":"pressed","type":"Boolean","memberOf":"Roo.Button"},{"desc":"The element to append the button to","name":"renderTo","type":"String\/HTMLElement\/Element","memberOf":"Roo.Button"},{"desc":"True to repeat fire the click event while the mouse is down. This can also be\n  an {@link Roo.util.ClickRepeater} config object (defaults to false).","name":"repeat","type":"Boolean\/Object","memberOf":"Roo.Button"},{"desc":"The scope of the handler","name":"scope","type":"Object","memberOf":"Roo.Button"},{"desc":"The DOM tabIndex for this button (defaults to undefined)","name":"tabIndex","type":"Number","memberOf":"Roo.Button"},{"desc":"(Optional)\nAn {@link Roo.Template} with which to create the Button's main element. This Template must\ncontain numeric substitution parameter 0 if it is to display the tRoo property. Changing the template could\nrequire code modifications if required elements (e.g. a button) aren't present.","name":"template","type":"Roo.Template","memberOf":"Roo.Button"},{"desc":"The button text","name":"text","type":"String","memberOf":"Roo.Button"},{"desc":"The group this toggle button is a member of (only 1 per group can be pressed, only\n   applies if enableToggle = true)","name":"toggleGroup","type":"String","memberOf":"Roo.Button"},{"desc":"The tooltip for the button - can be a string or QuickTips config object","name":"tooltip","type":"String\/Object","memberOf":"Roo.Button"},{"desc":"The type of tooltip to use. Either \"qtip\" (default) for QuickTips or \"title\" for title attribute.","name":"tooltipType","type":"String","memberOf":"Roo.Button"},{"desc":"The button's type, corresponding to the DOM input element type attribute.  Either \"submit,\" \"reset\" or \"button\" (default).","name":"type","type":"String","memberOf":"Roo.Button"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this button's arrow is clicked","name":"arrowclick","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this button is clicked","name":"click","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when the mouse exits the button","name":"mouseout","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when the mouse hovers over the button","name":"mouseover","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the button is rendered","name":"render","type":"function"},{"sig":"function (_self, pressed)\n{\n\n}","desc":"Fires when the \"pressed\" state of this button changes (only if enableToggle = true)","name":"toggle","type":"function"}]},"Roo.Toolbar":{"props":[{"desc":"The id or element that will contain the toolbar","name":"container","type":"String\/HTMLElement\/Element","memberOf":""},{"desc":"array of button configs or elements to add","name":"items","type":"Roo.data.Store","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.TreePanel":{"props":[{"desc":"Values to <b>add<\/b> to the width\/height when doing a {@link #fitToFrame} (default is [0, 0])","name":"adjustments","type":"Array","memberOf":"Roo.ContentPanel"},{"desc":"True to auto generate the DOM element for this panel, or a {@link Roo.DomHelper} config of the element to create","name":"autoCreate","type":"Boolean\/Object","memberOf":"Roo.ContentPanel"},{"desc":"True to scroll overflow in this panel (use with {@link #fitToFrame})","name":"autoScroll","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"True if the panel should not be activated when it is added (defaults to false)","name":"background","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"True if the panel can be closed\/removed","name":"closable","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"When using {@link #fitToFrame} and {@link #resizeEl}, you can also fit the parent container  (defaults to false)","name":"fitContainer","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"True for this panel to adjust its size to fit when the region resizes  (defaults to false)","name":"fitToFrame","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"When used with {@link #url}, calls {@link #setUrl} with this value","name":"loadOnce","type":"Boolean","memberOf":"Roo.ContentPanel"},{"desc":"When used with {@link #url}, calls {@link #setUrl} with this value","name":"params","type":"String\/Object","memberOf":"Roo.ContentPanel"},{"desc":"An element to resize if {@link #fitToFrame} is true (instead of this panel's element)","name":"resizeEl","type":"String\/HTMLElement\/Element","memberOf":"Roo.ContentPanel"},{"desc":"The title for this panel","name":"title","type":"String","memberOf":"Roo.ContentPanel"},{"desc":"A toolbar for this panel","name":"toolbar","type":"Toolbar","memberOf":"Roo.ContentPanel"},{"desc":"The tree TreePanel, with config etc.","name":"tree","type":"Roo.tree.TreePanel","memberOf":"Roo"},{"desc":"Calls {@link #setUrl} with this value","name":"url","type":"String","memberOf":"Roo.ContentPanel"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires when this panel is activated.","name":"activate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this panel is activated.","name":"deactivate","type":"function"},{"sig":"function (_self, width, height)\n{\n\n}","desc":"Fires when this panel is resized if fitToFrame is true.","name":"resize","type":"function"}]},"Roo.UpdateManager":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (el, url, params)\n{\n\n}","desc":"Fired before an update is made, return false from your handler and the update is cancelled.","name":"beforeupdate","type":"function"},{"sig":"function (el, oResponseObject)\n{\n\n}","desc":"Fired on update failure.","name":"failure","type":"function"},{"sig":"function (el, oResponseObject)\n{\n\n}","desc":"Fired after successful update is made.","name":"update","type":"function"}]},"Roo.View":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, index, node, e)\n{\n\n}","desc":"Fires before a click is processed. Returns false to cancel the default action.","name":"beforeclick","type":"function"},{"sig":"function (_self, node, selections)\n{\n\n}","desc":"Fires before a selection is made. If any handlers return false, the selection is cancelled.","name":"beforeselect","type":"function"},{"sig":"function (_self, index, node, e)\n{\n\n}","desc":"Fires when a template node is clicked.","name":"click","type":"function"},{"sig":"function (_self, index, node, e)\n{\n\n}","desc":"Fires when a template node is right clicked.","name":"contextmenu","type":"function"},{"sig":"function (_self, index, node, e)\n{\n\n}","desc":"Fires when a template node is double clicked.","name":"dblclick","type":"function"},{"sig":"function (_self, selections)\n{\n\n}","desc":"Fires when the selected nodes change.","name":"selectionchange","type":"function"}]},"Roo.data.ArrayReader":{"props":[{"desc":"(optional) The subscript within row Array that provides an ID for the Record","name":"id","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.data.Connection":{"props":[{"desc":"(Optional) Whether this request should abort any pending requests. (defaults to false)","name":"autoAbort","type":"Boolean","memberOf":""},{"desc":"(Optional) An object containing request headers which are added\n to each request made by this object. (defaults to undefined)","name":"defaultHeaders","type":"Object","memberOf":""},{"desc":"(Optional) True to add a unique cache-buster param to GET requests. (defaults to true)","name":"disableCaching","type":"Boolean","memberOf":""},{"desc":"(Optional) An object containing properties which are used as\nextra parameters to each request made by this object. (defaults to undefined)","name":"extraParams","type":"Object","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"(Optional) The default HTTP method to be used for requests. (defaults to undefined; if not set but parms are present will use POST, otherwise GET)","name":"method","type":"String","memberOf":""},{"desc":"(Optional) The timeout in milliseconds to be used for requests. (defaults to 30000)","name":"timeout","type":"Number","memberOf":""},{"desc":"(Optional) The default URL to be used for requests to the server. (defaults to undefined)","name":"url","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (conn, options)\n{\n\n}","desc":"Fires before a network request is made to retrieve a data object.","name":"beforerequest","type":"function"},{"sig":"function (conn, response, options)\n{\n\n}","desc":"Fires if the request was successfully completed.","name":"requestcomplete","type":"function"},{"sig":"function (conn, response, options)\n{\n\n}","desc":"Fires if an error HTTP status was returned from the server.\nSee {@link http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec10.html} for details of HTTP status codes.","name":"requestexception","type":"function"}]},"Roo.data.DataProxy":{"props":[{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (This, params)\n{\n\n}","desc":"Fires before a network request is made to retrieve a data object.","name":"beforeload","type":"function"},{"sig":"function (This, o, arg)\n{\n\n}","desc":"Fires before the load method's callback is called.","name":"load","type":"function"},{"sig":"function (This, o, arg, e)\n{\n\n}","desc":"Fires if an Exception occurs during data retrieval.","name":"loadexception","type":"function"}]},"Roo.data.HttpProxy":{"props":[{"desc":"(Optional) Whether this request should abort any pending requests. (defaults to false)","name":"autoAbort","type":"Boolean","memberOf":""},{"desc":"(Optional) An object containing request headers which are added\n to each request made by this object. (defaults to undefined)","name":"defaultHeaders","type":"Object","memberOf":""},{"desc":"(Optional) True to add a unique cache-buster param to GET requests. (defaults to true)","name":"disableCaching","type":"Boolean","memberOf":""},{"desc":"(Optional) An object containing properties which are used as\nextra parameters to each request made by this object. (defaults to undefined)","name":"extraParams","type":"Object","memberOf":""},{"desc":"(Optional) The default HTTP method to be used for requests. (defaults to undefined; if not set but parms are present will use POST, otherwise GET)","name":"method","type":"String","memberOf":""},{"desc":"(Optional) The timeout in milliseconds to be used for requests. (defaults to 30000)","name":"timeout","type":"Number","memberOf":""},{"desc":"(Optional) The default URL to be used for requests to the server. (defaults to undefined)","name":"url","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (This, params)\n{\n\n}","desc":"Fires before a network request is made to retrieve a data object.","name":"beforeload","type":"function"},{"sig":"function (This, o, arg)\n{\n\n}","desc":"Fires before the load method's callback is called.","name":"load","type":"function"},{"sig":"function (This, o, arg, e)\n{\n\n}","desc":"Fires if an Exception occurs during data retrieval.","name":"loadexception","type":"function"}]},"Roo.data.JsonReader":{"props":[{"desc":"Name of the property within a row object that contains a record identifier value.","name":"id","type":"String","memberOf":""},{"desc":"name of the property which contains the Array of row objects.","name":"root","type":"String","memberOf":""},{"desc":"Name of the property from which to retrieve the success attribute used by forms.","name":"successProperty","type":"String","memberOf":""},{"desc":"Name of the property from which to retrieve the total number of records\nin the dataset. This is only needed if the whole dataset is not passed in one go, but is being\npaged from the remote server.","name":"totalProperty","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.data.JsonStore":{"props":[{"desc":"An object containing properties which are to be sent as parameters\non any HTTP request","name":"baseParams","type":"Object","memberOf":"Roo.data.Store"},{"desc":"Inline data to be loaded when the store is initialized.","name":"data","type":"Array","memberOf":"Roo.data.Store"},{"desc":"An array of field definition objects, or field name strings.","name":"fields","type":"Array","memberOf":""},{"desc":"flag if data is locally available (and can be always looked up\nwithout a remote query - used by combo\/forms at present.","name":"isLocal","type":"boolean","memberOf":"Roo.data.Store"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"The Proxy object which provides access to a data object.","name":"proxy","type":"Roo.data.DataProxy","memberOf":"Roo.data.Store"},{"desc":"True to clear all modified record information each time the store is\nloaded or when a record is removed. (defaults to false).","name":"pruneModifiedRecords","type":"boolean","memberOf":"Roo.data.Store"},{"desc":"The Reader object which processes the data object and returns\nan Array of Roo.data.record objects which are cached keyed by their <em>id<\/em> property.","name":"reader","type":"Roo.data.Reader","memberOf":"Roo.data.Store"},{"desc":"True if sorting is to be handled by requesting the Proxy to provide a refreshed\nversion of the data object in sorted order, as opposed to sorting the Record cache in place (defaults to false).","name":"remoteSort","type":"boolean","memberOf":"Roo.data.Store"},{"desc":"A config object in the format: {field: \"fieldName\", direction: \"ASC|DESC\"}","name":"sortInfo","type":"Object","memberOf":"Roo.data.Store"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, records, index)\n{\n\n}","desc":"Fires when Records have been added to the Store","name":"add","type":"function"},{"sig":"function (_self, options)\n{\n\n}","desc":"Fires before a request is made for a new data object.  If the beforeload handler returns false\nthe load action will be canceled.","name":"beforeload","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the data cache has been cleared.","name":"clear","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the data cache has changed, and a widget which is using this Store\nas a Record cache should refresh its view.","name":"datachanged","type":"function"},{"sig":"function (_self, records, options)\n{\n\n}","desc":"Fires after a new set of Records has been loaded.","name":"load","type":"function"},{"sig":"function (, return, load, jsonData)\n{\n\n}","desc":"Fires if an exception occurs in the Proxy during loading.\nCalled with the signature of the Proxy's \"loadexception\" event.\nIf you return Json { data: [] , success: false, .... } then this will be thrown with the following args","name":"loadexception","type":"function"},{"sig":"function (_self, meta)\n{\n\n}","desc":"Fires when this store's reader provides new metadata (fields). This is currently only support for JsonReaders.","name":"metachange","type":"function"},{"sig":"function (_self, record, index)\n{\n\n}","desc":"Fires when a Record has been removed from the Store","name":"remove","type":"function"},{"sig":"function (_self, record, operation)\n{\n\n}","desc":"Fires when a Record has been updated","name":"update","type":"function"}]},"Roo.data.Node":{"props":[{"desc":"The id for this node. If one is not specified, one is generated.","name":"id","type":"String","memberOf":""},{"desc":"true if this node is a leaf and does not have children","name":"leaf","type":"Boolean","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (tree, _self, node, index)\n{\n\n}","desc":"Fires when a new child node is appended","name":"append","type":"function"},{"sig":"function (tree, _self, node)\n{\n\n}","desc":"Fires before a new child is appended, return false to cancel the append.","name":"beforeappend","type":"function"},{"sig":"function (tree, _self, node, refNode)\n{\n\n}","desc":"Fires before a new child is inserted, return false to cancel the insert.","name":"beforeinsert","type":"function"},{"sig":"function (tree, _self, oldParent, newParent, index)\n{\n\n}","desc":"Fires before this node is moved to a new location in the tree. Return false to cancel the move.","name":"beforemove","type":"function"},{"sig":"function (tree, _self, node)\n{\n\n}","desc":"Fires before a child is removed, return false to cancel the remove.","name":"beforeremove","type":"function"},{"sig":"function (tree, _self, node, refNode)\n{\n\n}","desc":"Fires when a new child node is inserted.","name":"insert","type":"function"},{"sig":"function (tree, _self, oldParent, newParent, index)\n{\n\n}","desc":"Fires when this node is moved to a new location in the tree","name":"move","type":"function"},{"sig":"function (tree, _self, node)\n{\n\n}","desc":"Fires when a child node is removed","name":"remove","type":"function"}]},"Roo.data.ScriptTagProxy":{"props":[{"desc":"(Optional) The name of the parameter to pass to the server which tells\nthe server the name of the callback function set up by the load call to process the returned data object.\nDefaults to \"callback\".<p>The server-side processing must read this parameter value, and generate\njavascript output which calls this named function passing the data object as its only parameter.","name":"callbackParam","type":"String","memberOf":""},{"desc":"(Optional) Defaults to true. Disable cacheing by adding a unique parameter\nname to the request.","name":"nocache","type":"Boolean","memberOf":""},{"desc":"(Optional) The number of milliseconds to wait for a response. Defaults to 30 seconds.","name":"timeout","type":"Number","memberOf":""},{"desc":"The URL from which to request the data object.","name":"url","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.data.SimpleStore":{"props":[{"desc":"An object containing properties which are to be sent as parameters\non any HTTP request","name":"baseParams","type":"Object","memberOf":"Roo.data.Store"},{"desc":"The multi-dimensional array of data","name":"data","type":"Array","memberOf":""},{"desc":"An array of field definition objects, or field name strings.","name":"fields","type":"Array","memberOf":""},{"desc":"The array index of the record id. Leave blank to auto generate ids.","name":"id","type":"Number","memberOf":""},{"desc":"flag if data is locally available (and can be always looked up\nwithout a remote query - used by combo\/forms at present.","name":"isLocal","type":"boolean","memberOf":"Roo.data.Store"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"The Proxy object which provides access to a data object.","name":"proxy","type":"Roo.data.DataProxy","memberOf":"Roo.data.Store"},{"desc":"True to clear all modified record information each time the store is\nloaded or when a record is removed. (defaults to false).","name":"pruneModifiedRecords","type":"boolean","memberOf":"Roo.data.Store"},{"desc":"The Reader object which processes the data object and returns\nan Array of Roo.data.record objects which are cached keyed by their <em>id<\/em> property.","name":"reader","type":"Roo.data.Reader","memberOf":"Roo.data.Store"},{"desc":"True if sorting is to be handled by requesting the Proxy to provide a refreshed\nversion of the data object in sorted order, as opposed to sorting the Record cache in place (defaults to false).","name":"remoteSort","type":"boolean","memberOf":"Roo.data.Store"},{"desc":"A config object in the format: {field: \"fieldName\", direction: \"ASC|DESC\"}","name":"sortInfo","type":"Object","memberOf":"Roo.data.Store"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, records, index)\n{\n\n}","desc":"Fires when Records have been added to the Store","name":"add","type":"function"},{"sig":"function (_self, options)\n{\n\n}","desc":"Fires before a request is made for a new data object.  If the beforeload handler returns false\nthe load action will be canceled.","name":"beforeload","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the data cache has been cleared.","name":"clear","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the data cache has changed, and a widget which is using this Store\nas a Record cache should refresh its view.","name":"datachanged","type":"function"},{"sig":"function (_self, records, options)\n{\n\n}","desc":"Fires after a new set of Records has been loaded.","name":"load","type":"function"},{"sig":"function (, return, load, jsonData)\n{\n\n}","desc":"Fires if an exception occurs in the Proxy during loading.\nCalled with the signature of the Proxy's \"loadexception\" event.\nIf you return Json { data: [] , success: false, .... } then this will be thrown with the following args","name":"loadexception","type":"function"},{"sig":"function (_self, meta)\n{\n\n}","desc":"Fires when this store's reader provides new metadata (fields). This is currently only support for JsonReaders.","name":"metachange","type":"function"},{"sig":"function (_self, record, index)\n{\n\n}","desc":"Fires when a Record has been removed from the Store","name":"remove","type":"function"},{"sig":"function (_self, record, operation)\n{\n\n}","desc":"Fires when a Record has been updated","name":"update","type":"function"}]},"Roo.data.Store":{"props":[{"desc":"An object containing properties which are to be sent as parameters\non any HTTP request","name":"baseParams","type":"Object","memberOf":""},{"desc":"Inline data to be loaded when the store is initialized.","name":"data","type":"Array","memberOf":""},{"desc":"flag if data is locally available (and can be always looked up\nwithout a remote query - used by combo\/forms at present.","name":"isLocal","type":"boolean","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"The Proxy object which provides access to a data object.","name":"proxy","type":"Roo.data.DataProxy","memberOf":""},{"desc":"True to clear all modified record information each time the store is\nloaded or when a record is removed. (defaults to false).","name":"pruneModifiedRecords","type":"boolean","memberOf":""},{"desc":"The Reader object which processes the data object and returns\nan Array of Roo.data.record objects which are cached keyed by their <em>id<\/em> property.","name":"reader","type":"Roo.data.Reader","memberOf":""},{"desc":"True if sorting is to be handled by requesting the Proxy to provide a refreshed\nversion of the data object in sorted order, as opposed to sorting the Record cache in place (defaults to false).","name":"remoteSort","type":"boolean","memberOf":""},{"desc":"A config object in the format: {field: \"fieldName\", direction: \"ASC|DESC\"}","name":"sortInfo","type":"Object","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, records, index)\n{\n\n}","desc":"Fires when Records have been added to the Store","name":"add","type":"function"},{"sig":"function (_self, options)\n{\n\n}","desc":"Fires before a request is made for a new data object.  If the beforeload handler returns false\nthe load action will be canceled.","name":"beforeload","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the data cache has been cleared.","name":"clear","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the data cache has changed, and a widget which is using this Store\nas a Record cache should refresh its view.","name":"datachanged","type":"function"},{"sig":"function (_self, records, options)\n{\n\n}","desc":"Fires after a new set of Records has been loaded.","name":"load","type":"function"},{"sig":"function (, return, load, jsonData)\n{\n\n}","desc":"Fires if an exception occurs in the Proxy during loading.\nCalled with the signature of the Proxy's \"loadexception\" event.\nIf you return Json { data: [] , success: false, .... } then this will be thrown with the following args","name":"loadexception","type":"function"},{"sig":"function (_self, meta)\n{\n\n}","desc":"Fires when this store's reader provides new metadata (fields). This is currently only support for JsonReaders.","name":"metachange","type":"function"},{"sig":"function (_self, record, index)\n{\n\n}","desc":"Fires when a Record has been removed from the Store","name":"remove","type":"function"},{"sig":"function (_self, record, operation)\n{\n\n}","desc":"Fires when a Record has been updated","name":"update","type":"function"}]},"Roo.data.Tree":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (tree, parent, node, index)\n{\n\n}","desc":"Fires when a new child node is appended to a node in this tree.","name":"append","type":"function"},{"sig":"function (tree, parent, node)\n{\n\n}","desc":"Fires before a new child is appended to a node in this tree, return false to cancel the append.","name":"beforeappend","type":"function"},{"sig":"function (tree, parent, node, refNode)\n{\n\n}","desc":"Fires before a new child is inserted in a node in this tree, return false to cancel the insert.","name":"beforeinsert","type":"function"},{"sig":"function (tree, node, oldParent, newParent, index)\n{\n\n}","desc":"Fires before a node is moved to a new location in the tree. Return false to cancel the move.","name":"beforemove","type":"function"},{"sig":"function (tree, parent, node)\n{\n\n}","desc":"Fires before a child is removed from a node in this tree, return false to cancel the remove.","name":"beforeremove","type":"function"},{"sig":"function (tree, parent, node, refNode)\n{\n\n}","desc":"Fires when a new child node is inserted in a node in this tree.","name":"insert","type":"function"},{"sig":"function (tree, node, oldParent, newParent, index)\n{\n\n}","desc":"Fires when a node is moved to a new location in the tree","name":"move","type":"function"},{"sig":"function (tree, parent, node)\n{\n\n}","desc":"Fires when a child node is removed from a node in this tree.","name":"remove","type":"function"}]},"Roo.data.XmlReader":{"props":[{"desc":"The DomQuery path relative from the record element to the element that contains\na record identifier value.","name":"id","type":"String","memberOf":""},{"desc":"The DomQuery path to the repeated element which contains record information.","name":"record","type":"String","memberOf":""},{"desc":"The DomQuery path to the success attribute used by forms.","name":"success","type":"String","memberOf":""},{"desc":"The DomQuery path from which to retrieve the total number of records\nin the dataset. This is only needed if the whole dataset is not passed in one go, but is being\npaged from the remote server.","name":"totalRecords","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.dd.DragSource":{"props":[{"desc":"The CSS class returned to the drag source when drop is allowed (defaults to \"x-dd-drop-ok\").","name":"dropAllowed","type":"String","memberOf":""},{"desc":"The CSS class returned to the drag source when drop is not allowed (defaults to \"x-dd-drop-nodrop\").","name":"dropNotAllowed","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.dd.DragZone":{"props":[{"desc":"True to register this container with the Scrollmanager\nfor auto scrolling during drag operations.","name":"containerScroll","type":"Boolean","memberOf":""},{"desc":"The CSS class returned to the drag source when drop is allowed (defaults to \"x-dd-drop-ok\").","name":"dropAllowed","type":"String","memberOf":"Roo.dd.DragSource"},{"desc":"The CSS class returned to the drag source when drop is not allowed (defaults to \"x-dd-drop-nodrop\").","name":"dropNotAllowed","type":"String","memberOf":"Roo.dd.DragSource"},{"desc":"The color to use when visually highlighting the drag source in the afterRepair\nmethod after a failed drop (defaults to \"c3daf9\" - light blue)","name":"hlColor","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.dd.DropTarget":{"props":[{"desc":"The CSS class returned to the drag source when drop is allowed (defaults to \"x-dd-drop-ok\").","name":"dropAllowed","type":"String","memberOf":""},{"desc":"The CSS class returned to the drag source when drop is not allowed (defaults to \"x-dd-drop-nodrop\").","name":"dropNotAllowed","type":"String","memberOf":""},{"desc":"The CSS class applied to the drop target element while the drag source is over it (defaults to \"\").","name":"overClass","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.dd.DropZone":{"props":[{"desc":"The CSS class returned to the drag source when drop is allowed (defaults to \"x-dd-drop-ok\").","name":"dropAllowed","type":"String","memberOf":"Roo.dd.DropTarget"},{"desc":"The CSS class returned to the drag source when drop is not allowed (defaults to \"x-dd-drop-nodrop\").","name":"dropNotAllowed","type":"String","memberOf":"Roo.dd.DropTarget"},{"desc":"The CSS class applied to the drop target element while the drag source is over it (defaults to \"\").","name":"overClass","type":"String","memberOf":"Roo.dd.DropTarget"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.dd.StatusProxy":{"props":[{"desc":"The CSS class to apply to the status element when drop is allowed (defaults to \"x-dd-drop-ok\").","name":"dropAllowed","type":"String","memberOf":""},{"desc":"The CSS class to apply to the status element when drop is not allowed (defaults to \"x-dd-drop-nodrop\").","name":"dropNotAllowed","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.form.BasicForm":{"props":[{"desc":"Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.","name":"baseParams","type":"Object","memberOf":""},{"desc":"An Roo.data.DataReader (e.g. {@link Roo.data.XmlReader}) to be used to read data when reading validation errors on \"submit\" actions.\nThis is completely optional as there is built-in support for processing JSON.","name":"errorReader","type":"DataReader","memberOf":""},{"desc":"Set to true if this form is a file upload.","name":"fileUpload","type":"Boolean","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"The request method to use (GET or POST) for form actions if one isn't supplied in the action options.","name":"method","type":"String","memberOf":""},{"desc":"An Roo.data.DataReader (e.g. {@link Roo.data.XmlReader}) to be used to read data when executing \"load\" actions.\nThis is optional as there is built-in support for processing JSON.","name":"reader","type":"DataReader","memberOf":""},{"desc":"Timeout for form actions in seconds (default is 30 seconds).","name":"timeout","type":"Number","memberOf":""},{"desc":"If set to true, form.reset() resets to the last loaded\nor setValues() data instead of when the form was first created.","name":"trackResetOnLoad","type":"Boolean","memberOf":""},{"desc":"The URL to use for form actions if one isn't supplied in the action options.","name":"url","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, action)\n{\n\n}","desc":"Fires when an action is completed.","name":"actioncomplete","type":"function"},{"sig":"function (_self, action)\n{\n\n}","desc":"Fires when an action fails.","name":"actionfailed","type":"function"},{"sig":"function (_self, action)\n{\n\n}","desc":"Fires before any action is performed. Return false to cancel the action.","name":"beforeaction","type":"function"}]},"Roo.form.Checkbox":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"checkbox\", autocomplete: \"off\"})","name":"autoCreate","type":"String\/Object","memberOf":""},{"desc":"The text that appears beside the checkbox","name":"boxLabel","type":"String","memberOf":""},{"desc":"True if the the checkbox should render already checked (defaults to false)","name":"checked","type":"Boolean","memberOf":""},{"desc":"A CSS class to apply to the field's underlying element.","name":"cls","type":"String","memberOf":"Roo.form.Field"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"True to disable the field (defaults to false).","name":"disabled","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The default CSS class for the checkbox (defaults to \"x-form-field\")","name":"fieldClass","type":"String","memberOf":""},{"desc":"Label to use when rendering a form.","name":"fieldLabel","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when the checkbox receives focus (defaults to undefined)","name":"focusClass","type":"String","memberOf":""},{"desc":"height (optional) size of component","name":"height","type":"Number","memberOf":"Roo.BoxComponent"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").","name":"inputType","type":"String","memberOf":"Roo.form.Field"},{"desc":"The value that should go into the generated input element's value attribute","name":"inputValue","type":"String","memberOf":""},{"desc":"The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")","name":"invalidClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")","name":"invalidText","type":"String","memberOf":"Roo.form.Field"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"<b>Experimental<\/b> The effect used when displaying a validation message under the field (defaults to 'normal').","name":"msgFx","type":"String","memberOf":"Roo.form.Field"},{"desc":"The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n<\/pre>","name":"msgTarget","type":"String","memberOf":"Roo.form.Field"},{"desc":"The field's HTML name attribute.","name":"name","type":"String","memberOf":"Roo.form.Field"},{"desc":"Mouse over tip","name":"qtip","type":"String","memberOf":"Roo.form.Field"},{"desc":"True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.","name":"readOnly","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).","name":"tabIndex","type":"Number","memberOf":"Roo.form.Field"},{"desc":"Whether the field should validate when it loses focus (defaults to true).","name":"validateOnBlur","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)","name":"validationDelay","type":"Number","memberOf":"Roo.form.Field"},{"desc":"The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").","name":"validationEvent","type":"String\/Boolean","memberOf":"Roo.form.Field"},{"desc":"A value to initialize this field with.","name":"value","type":"Mixed","memberOf":"Roo.form.Field"},{"desc":"The value that should go into the generated input element's value when unchecked.","name":"valueOff","type":"String","memberOf":""},{"desc":"width (optional) size of component","name":"width","type":"Number","memberOf":"Roo.BoxComponent"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field loses input focus.","name":"blur","type":"function"},{"sig":"function (_self, newValue, oldValue)\n{\n\n}","desc":"Fires just before the field blurs if the field value has changed.","name":"change","type":"function"},{"sig":"function (_self, checked)\n{\n\n}","desc":"Fires when the checkbox is checked or unchecked.","name":"check","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field receives input focus.","name":"focus","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self, msg)\n{\n\n}","desc":"Fires after the field has been marked as invalid.","name":"invalid","type":"function"},{"sig":"function (_self, x, y)\n{\n\n}","desc":"Fires after the component is moved.","name":"move","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}","desc":"Fires after the component is resized.","name":"resize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.","name":"specialkey","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the field has been validated with no errors.","name":"valid","type":"function"}]},"Roo.form.Column":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"A DomHelper element spec used to autocreate the column (defaults to {tag: 'div', cls: 'x-form-ct x-form-column'})","name":"autoCreate","type":"String\/Object","memberOf":""},{"desc":"True to add a clearing element at the end of this layout, equivalent to CSS clear: both (defaults to true)","name":"clear","type":"Boolean","memberOf":"Roo.form.Layout"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"True to suppress the display of field labels in this layout (defaults to false)","name":"hideLabels","type":"Boolean","memberOf":"Roo.form.Layout"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"Valid values are \"left,\" \"top\" and \"right\" (defaults to \"left\")","name":"labelAlign","type":"String","memberOf":"Roo.form.Layout"},{"desc":"The separator to use after field labels (defaults to ':')","name":"labelSeparator","type":"String","memberOf":"Roo.form.Layout"},{"desc":"Fixed width in pixels of all field labels (defaults to undefined)","name":"labelWidth","type":"Number","memberOf":"Roo.form.Layout"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"A style specification string, e.g. \"width:100px\", or object in the form {width:\"100px\"}, or\na function which returns such a specification.","name":"style","type":"String\/Object\/Function","memberOf":"Roo.form.Layout"},{"desc":"The fixed width of the column in pixels or CSS value (defaults to \"auto\")","name":"width","type":"Number\/String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"}]},"Roo.form.ComboBox":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"The text query to send to the server to return all records for the list with no filtering (defaults to '')","name":"allQuery","type":"String","memberOf":""},{"desc":"False to validate that the value length > 0 (defaults to true)","name":"allowBlank","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"A DomHelper element spec, or true for a default element spec (defaults to:\n{tag: \"input\", type: \"text\", size: \"24\", autocomplete: \"off\"})","name":"autoCreate","type":"Boolean\/Object","memberOf":""},{"desc":"Error text to display if the allow blank validation fails (defaults to \"This field is required\")","name":"blankText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"Prevents all focus calls, so it can work with things like HTML edtor bar","name":"blockFocus","type":"bool","memberOf":""},{"desc":"A CSS class to apply to the field's underlying element.","name":"cls","type":"String","memberOf":"Roo.form.Field"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"Disable showing of clear button.","name":"disableClear","type":"bool","memberOf":""},{"desc":"True to disable input keystroke filtering (defaults to false)","name":"disableKeyFilter","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"True to disable the field (defaults to false).","name":"disabled","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The underlying data field name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'text' if mode = 'local')","name":"displayField","type":"String","memberOf":""},{"desc":"False to prevent the user from typing text directly into the field, just like a\ntraditional select (defaults to true)","name":"editable","type":"Boolean","memberOf":""},{"desc":"The CSS class to apply to an empty field to style the {@link #emptyText} (defaults to\n'x-form-empty-field').  This class is automatically added and removed as needed depending on the current field value.","name":"emptyClass","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The default text to display in an empty field (defaults to null).","name":"emptyText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The default CSS class for the field (defaults to \"x-form-field\")","name":"fieldClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"Label to use when rendering a form.","name":"fieldLabel","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when the field receives focus (defaults to \"x-form-focus\")","name":"focusClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"True to restrict the selected value to one of the values in the list, false to\nallow the user to set arbitrary text into the field (defaults to false)","name":"forceSelection","type":"Boolean","memberOf":""},{"desc":"The height in pixels of the dropdown list resize handle if resizable = true (defaults to 8)","name":"handleHeight","type":"Number","memberOf":""},{"desc":"height (optional) size of component","name":"height","type":"Number","memberOf":"Roo.BoxComponent"},{"desc":"If specified, a hidden form field with this name is dynamically generated to store the\nfield's data value (defaults to the underlying DOM element's name)","name":"hiddenName","type":"String","memberOf":""},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"True to hide the trigger element and display only the base text field (defaults to false)","name":"hideTrigger","type":"Boolean","memberOf":"Roo.form.TriggerField"},{"desc":"The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").","name":"inputType","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")","name":"invalidClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")","name":"invalidText","type":"String","memberOf":"Roo.form.Field"},{"desc":"True to prevent the ComboBox from rendering until requested (should always be used when\nrendering into an Roo.Editor, defaults to false)","name":"lazyRender","type":"Boolean","memberOf":""},{"desc":"A valid anchor position value. See {@link Roo.Element#alignTo} for details on supported\nanchor positions (defaults to 'tl-bl')","name":"listAlign","type":"String","memberOf":""},{"desc":"CSS class to apply to the dropdown list element (defaults to '')","name":"listClass","type":"String","memberOf":""},{"desc":"The width in pixels of the dropdown list (defaults to the width of the ComboBox field)","name":"listWidth","type":"Number","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"The text to display in the dropdown list while data is loading.  Only applies\nwhen mode = 'remote' (defaults to 'Loading...')","name":"loadingText","type":"String","memberOf":""},{"desc":"An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)","name":"maskRe","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)","name":"maxHeight","type":"Number","memberOf":""},{"desc":"Maximum input field length allowed (defaults to Number.MAX_VALUE)","name":"maxLength","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")","name":"maxLengthText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The minimum number of characters the user must type before autocomplete and typeahead activate\n(defaults to 4, does not apply if editable = false)","name":"minChars","type":"Number","memberOf":""},{"desc":"Minimum input field length required (defaults to 0)","name":"minLength","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")","name":"minLengthText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if\nlistWidth has a higher value)","name":"minListWidth","type":"Number","memberOf":""},{"desc":"Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)","name":"mode","type":"String","memberOf":""},{"desc":"<b>Experimental<\/b> The effect used when displaying a validation message under the field (defaults to 'normal').","name":"msgFx","type":"String","memberOf":"Roo.form.Field"},{"desc":"The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n<\/pre>","name":"msgTarget","type":"String","memberOf":"Roo.form.Field"},{"desc":"The field's HTML name attribute.","name":"name","type":"String","memberOf":"Roo.form.Field"},{"desc":"If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the\nfilter queries will execute with page start and limit parameters.  Only applies when mode = 'remote' (defaults to 0)","name":"pageSize","type":"Number","memberOf":""},{"desc":"Mouse over tip","name":"qtip","type":"String","memberOf":"Roo.form.Field"},{"desc":"The length of time in milliseconds to delay between the start of typing and sending the\nquery to filter the dropdown list (defaults to 500 if mode = 'remote' or 10 if mode = 'local')","name":"queryDelay","type":"Number","memberOf":""},{"desc":"Name of the query as it will be passed on the querystring (defaults to 'query')","name":"queryParam","type":"String","memberOf":""},{"desc":"True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.","name":"readOnly","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.","name":"regex","type":"RegExp","memberOf":"Roo.form.TextField"},{"desc":"The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")","name":"regexText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"True to add a resize handle to the bottom of the dropdown list (defaults to false)","name":"resizable","type":"Boolean","memberOf":""},{"desc":"True to select any existing text in the field immediately on focus.  Only applies\nwhen editable = true (defaults to false)","name":"selectOnFocus","type":"Boolean","memberOf":""},{"desc":"CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')","name":"selectedClass","type":"String","memberOf":""},{"desc":"True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\" for bottom-right","name":"shadow","type":"Boolean\/String","memberOf":""},{"desc":"The data store to which this combo is bound (defaults to undefined)","name":"store","type":"Roo.data.Store","memberOf":""},{"desc":"The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).","name":"tabIndex","type":"Number","memberOf":"Roo.form.Field"},{"desc":"If supplied, a header element is created containing this text and added into the top of\nthe dropdown list (defaults to undefined, with no header element)","name":"title","type":"String","memberOf":""},{"desc":"The template to use to render the output","name":"tpl","type":"String\/Roo.Template","memberOf":""},{"desc":"The id, DOM node or element of an existing select to convert to a ComboBox","name":"transform","type":"String\/HTMLElement\/Element","memberOf":""},{"desc":"The action to execute when the trigger field is activated.  Use 'all' to run the\nquery specified by the allQuery config option (defaults to 'query')","name":"triggerAction","type":"String","memberOf":""},{"desc":"An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' and triggerClass will be <b>appended<\/b> if specified (defaults to 'x-form-arrow-trigger'\nwhich displays a downward arrow icon).","name":"triggerClass","type":"String","memberOf":""},{"desc":"True to populate and autoselect the remainder of the text being typed after a configurable\ndelay (typeAheadDelay) if it matches a known value (defaults to false)","name":"typeAhead","type":"Boolean","memberOf":""},{"desc":"The length of time in milliseconds to wait until the typeahead text is displayed\nif typeAhead = true (defaults to 250)","name":"typeAheadDelay","type":"Number","memberOf":""},{"desc":"Whether the field should validate when it loses focus (defaults to true).","name":"validateOnBlur","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)","name":"validationDelay","type":"Number","memberOf":"Roo.form.Field"},{"desc":"The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").","name":"validationEvent","type":"String\/Boolean","memberOf":"Roo.form.Field"},{"desc":"A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.","name":"validator","type":"Function","memberOf":"Roo.form.TextField"},{"desc":"A value to initialize this field with.","name":"value","type":"Mixed","memberOf":"Roo.form.Field"},{"desc":"The underlying data value name to bind to this CombBox (defaults to undefined if\nmode = 'remote' or 'value' if mode = 'local'). \nNote: use of a valueField requires the user make a selection\nin order for a value to be mapped.","name":"valueField","type":"String","memberOf":""},{"desc":"When using a name\/value combo, if the value passed to setValue is not found in\nthe store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined)","name":"valueNotFoundText","type":"String","memberOf":""},{"desc":"A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)","name":"vtype","type":"String","memberOf":"Roo.form.TextField"},{"desc":"width (optional) size of component","name":"width","type":"Number","memberOf":"Roo.BoxComponent"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, width)\n{\n\n}","desc":"Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.","name":"autosize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (combo, query, forceAll, cancel, e)\n{\n\n}","desc":"Fires before all queries are processed. Return false to cancel the query or set cancel to true.\nThe event object passed has these properties:","name":"beforequery","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (combo, record, index)\n{\n\n}","desc":"Fires before a list item is selected. Return false to cancel the selection.","name":"beforeselect","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field loses input focus.","name":"blur","type":"function"},{"sig":"function (_self, newValue, oldValue)\n{\n\n}","desc":"Fires just before the field blurs if the field value has changed.","name":"change","type":"function"},{"sig":"function (combo)\n{\n\n}","desc":"Fires when the dropdown list is collapsed","name":"collapse","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (combo)\n{\n\n}","desc":"Fires when the dropdown list is expanded","name":"expand","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field receives input focus.","name":"focus","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self, msg)\n{\n\n}","desc":"Fires after the field has been marked as invalid.","name":"invalid","type":"function"},{"sig":"function (_self, x, y)\n{\n\n}","desc":"Fires after the component is moved.","name":"move","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}","desc":"Fires after the component is resized.","name":"resize","type":"function"},{"sig":"function (combo, record, index)\n{\n\n}","desc":"Fires when a list item is selected","name":"select","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.","name":"specialkey","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the field has been validated with no errors.","name":"valid","type":"function"}]},"Roo.form.DateField":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"False to validate that the value length > 0 (defaults to true)","name":"allowBlank","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"Multiple date formats separated by \"|\" to try when parsing a user input value and it doesn't match the defined\nformat (defaults to 'm\/d\/Y|m-d-y|m-d-Y|m\/d|m-d|d').","name":"altFormats","type":"String","memberOf":""},{"desc":"A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"10\", autocomplete: \"off\"})","name":"autoCreate","type":"String\/Object","memberOf":""},{"desc":"Error text to display if the allow blank validation fails (defaults to \"This field is required\")","name":"blankText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"A CSS class to apply to the field's underlying element.","name":"cls","type":"String","memberOf":"Roo.form.Field"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"True to disable input keystroke filtering (defaults to false)","name":"disableKeyFilter","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"True to disable the field (defaults to false).","name":"disabled","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"An array of \"dates\" to disable, as strings. These strings will be used to build a dynamic regular\nexpression so they are very powerful. Some examples:\n<ul>\n<li>[\"03\/08\/2003\", \"09\/16\/2003\"] would disable those exact dates<\/li>\n<li>[\"03\/08\", \"09\/16\"] would disable those days for every year<\/li>\n<li>[\"^03\/08\"] would only match the beginning (useful if you are using short years)<\/li>\n<li>[\"03\/..\/2006\"] would disable every day in March 2006<\/li>\n<li>[\"^03\"] would disable every day in every March<\/li>\n<\/ul>\nIn order to support regular expressions, if you are using a date format that has \".\" in it, you will have to\nescape the dot when restricting dates. For example: [\"03\\\\.08\\\\.03\"].","name":"disabledDates","type":"Array","memberOf":""},{"desc":"The tooltip text to display when the date falls on a disabled date (defaults to 'Disabled')","name":"disabledDatesText","type":"String","memberOf":""},{"desc":"An array of days to disable, 0 based. For example, [0, 6] disables Sunday and Saturday (defaults to null).","name":"disabledDays","type":"Array","memberOf":""},{"desc":"The tooltip to display when the date falls on a disabled day (defaults to 'Disabled')","name":"disabledDaysText","type":"String","memberOf":""},{"desc":"The CSS class to apply to an empty field to style the {@link #emptyText} (defaults to\n'x-form-empty-field').  This class is automatically added and removed as needed depending on the current field value.","name":"emptyClass","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The default text to display in an empty field (defaults to null).","name":"emptyText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The default CSS class for the field (defaults to \"x-form-field\")","name":"fieldClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"Label to use when rendering a form.","name":"fieldLabel","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when the field receives focus (defaults to \"x-form-focus\")","name":"focusClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"The default date format string which can be overriden for localization support.  The format must be\nvalid according to {@link Date#parseDate} (defaults to 'm\/d\/y').","name":"format","type":"String","memberOf":""},{"desc":"height (optional) size of component","name":"height","type":"Number","memberOf":"Roo.BoxComponent"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"True to hide the trigger element and display only the base text field (defaults to false)","name":"hideTrigger","type":"Boolean","memberOf":"Roo.form.TriggerField"},{"desc":"The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").","name":"inputType","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")","name":"invalidClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"The error text to display when the date in the field is invalid (defaults to\n'{value} is not a valid date - it must be in the format {format}').","name":"invalidText","type":"String","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)","name":"maskRe","type":"String","memberOf":"Roo.form.TextField"},{"desc":"Maximum input field length allowed (defaults to Number.MAX_VALUE)","name":"maxLength","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")","name":"maxLengthText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The error text to display when the date in the cell is after maxValue (defaults to\n'The date in this field must be before {maxValue}').","name":"maxText","type":"String","memberOf":""},{"desc":"The maximum allowed date. Can be either a Javascript date object or a string date in a\nvalid format (defaults to null).","name":"maxValue","type":"Date\/String","memberOf":""},{"desc":"Minimum input field length required (defaults to 0)","name":"minLength","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")","name":"minLengthText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The error text to display when the date in the cell is before minValue (defaults to\n'The date in this field must be after {minValue}').","name":"minText","type":"String","memberOf":""},{"desc":"The minimum allowed date. Can be either a Javascript date object or a string date in a\nvalid format (defaults to null).","name":"minValue","type":"Date\/String","memberOf":""},{"desc":"<b>Experimental<\/b> The effect used when displaying a validation message under the field (defaults to 'normal').","name":"msgFx","type":"String","memberOf":"Roo.form.Field"},{"desc":"The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n<\/pre>","name":"msgTarget","type":"String","memberOf":"Roo.form.Field"},{"desc":"The field's HTML name attribute.","name":"name","type":"String","memberOf":"Roo.form.Field"},{"desc":"Mouse over tip","name":"qtip","type":"String","memberOf":"Roo.form.Field"},{"desc":"True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.","name":"readOnly","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.","name":"regex","type":"RegExp","memberOf":"Roo.form.TextField"},{"desc":"The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")","name":"regexText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"True to automatically select any existing field text when the field receives input focus (defaults to false)","name":"selectOnFocus","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).","name":"tabIndex","type":"Number","memberOf":"Roo.form.Field"},{"desc":"An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' and triggerClass will be <b>appended<\/b> if specified (defaults to 'x-form-date-trigger'\nwhich displays a calendar icon).","name":"triggerClass","type":"String","memberOf":""},{"desc":"if enabled, then the date field will use a hidden field to store the \nreal value as iso formated date. default (false)","name":"useIso","type":"bool","memberOf":""},{"desc":"Whether the field should validate when it loses focus (defaults to true).","name":"validateOnBlur","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)","name":"validationDelay","type":"Number","memberOf":"Roo.form.Field"},{"desc":"The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").","name":"validationEvent","type":"String\/Boolean","memberOf":"Roo.form.Field"},{"desc":"A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.","name":"validator","type":"Function","memberOf":"Roo.form.TextField"},{"desc":"A value to initialize this field with.","name":"value","type":"Mixed","memberOf":"Roo.form.Field"},{"desc":"A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)","name":"vtype","type":"String","memberOf":"Roo.form.TextField"},{"desc":"width (optional) size of component","name":"width","type":"Number","memberOf":"Roo.BoxComponent"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, width)\n{\n\n}","desc":"Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.","name":"autosize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field loses input focus.","name":"blur","type":"function"},{"sig":"function (_self, newValue, oldValue)\n{\n\n}","desc":"Fires just before the field blurs if the field value has changed.","name":"change","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field receives input focus.","name":"focus","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self, msg)\n{\n\n}","desc":"Fires after the field has been marked as invalid.","name":"invalid","type":"function"},{"sig":"function (_self, x, y)\n{\n\n}","desc":"Fires after the component is moved.","name":"move","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}","desc":"Fires after the component is resized.","name":"resize","type":"function"},{"sig":"function (combo, date)\n{\n\n}","desc":"Fires when a date is selected","name":"select","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.","name":"specialkey","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the field has been validated with no errors.","name":"valid","type":"function"}]},"Roo.form.FCKeditor":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"False to validate that the value length > 0 (defaults to true)","name":"allowBlank","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"textarea\", style: \"width:300px;height:60px;\", autocomplete: \"off\"})","name":"autoCreate","type":"String\/Object","memberOf":"Roo.form.TextArea"},{"desc":"Error text to display if the allow blank validation fails (defaults to \"This field is required\")","name":"blankText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"A CSS class to apply to the field's underlying element.","name":"cls","type":"String","memberOf":"Roo.form.Field"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"True to disable input keystroke filtering (defaults to false)","name":"disableKeyFilter","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"True to disable the field (defaults to false).","name":"disabled","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The CSS class to apply to an empty field to style the {@link #emptyText} (defaults to\n'x-form-empty-field').  This class is automatically added and removed as needed depending on the current field value.","name":"emptyClass","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The default text to display in an empty field (defaults to null).","name":"emptyText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"BasePath","name":"fck","type":"Object","memberOf":""},{"desc":"The default CSS class for the field (defaults to \"x-form-field\")","name":"fieldClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"Label to use when rendering a form.","name":"fieldLabel","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when the field receives focus (defaults to \"x-form-focus\")","name":"focusClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"True if this field should automatically grow and shrink to its content","name":"grow","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"The maximum height to allow when grow = true (defaults to 1000)","name":"growMax","type":"Number","memberOf":"Roo.form.TextArea"},{"desc":"The minimum height to allow when grow = true (defaults to 60)","name":"growMin","type":"Number","memberOf":"Roo.form.TextArea"},{"desc":"height (optional) size of component","name":"height","type":"Number","memberOf":"Roo.BoxComponent"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").","name":"inputType","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")","name":"invalidClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")","name":"invalidText","type":"String","memberOf":"Roo.form.Field"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)","name":"maskRe","type":"String","memberOf":"Roo.form.TextField"},{"desc":"Maximum input field length allowed (defaults to Number.MAX_VALUE)","name":"maxLength","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")","name":"maxLengthText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"Minimum input field length required (defaults to 0)","name":"minLength","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")","name":"minLengthText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"<b>Experimental<\/b> The effect used when displaying a validation message under the field (defaults to 'normal').","name":"msgFx","type":"String","memberOf":"Roo.form.Field"},{"desc":"The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n<\/pre>","name":"msgTarget","type":"String","memberOf":"Roo.form.Field"},{"desc":"The field's HTML name attribute.","name":"name","type":"String","memberOf":"Roo.form.Field"},{"desc":"True to prevent scrollbars from appearing regardless of how much text is\nin the field (equivalent to setting overflow: hidden, defaults to false)","name":"preventScrollbars","type":"Boolean","memberOf":"Roo.form.TextArea"},{"desc":"Mouse over tip","name":"qtip","type":"String","memberOf":"Roo.form.Field"},{"desc":"True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.","name":"readOnly","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.","name":"regex","type":"RegExp","memberOf":"Roo.form.TextField"},{"desc":"The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")","name":"regexText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"True to automatically select any existing field text when the field receives input focus (defaults to false)","name":"selectOnFocus","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).","name":"tabIndex","type":"Number","memberOf":"Roo.form.Field"},{"desc":"Whether the field should validate when it loses focus (defaults to true).","name":"validateOnBlur","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)","name":"validationDelay","type":"Number","memberOf":"Roo.form.Field"},{"desc":"The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").","name":"validationEvent","type":"String\/Boolean","memberOf":"Roo.form.Field"},{"desc":"A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.","name":"validator","type":"Function","memberOf":"Roo.form.TextField"},{"desc":"A value to initialize this field with.","name":"value","type":"Mixed","memberOf":"Roo.form.Field"},{"desc":"A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)","name":"vtype","type":"String","memberOf":"Roo.form.TextField"},{"desc":"width (optional) size of component","name":"width","type":"Number","memberOf":"Roo.BoxComponent"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, width)\n{\n\n}","desc":"Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.","name":"autosize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field loses input focus.","name":"blur","type":"function"},{"sig":"function (_self, newValue, oldValue)\n{\n\n}","desc":"Fires just before the field blurs if the field value has changed.","name":"change","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self, the)\n{\n\n}","desc":"Fired when the editor is initialized - you can add extra handlers here..","name":"editorinit","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field receives input focus.","name":"focus","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self, msg)\n{\n\n}","desc":"Fires after the field has been marked as invalid.","name":"invalid","type":"function"},{"sig":"function (_self, x, y)\n{\n\n}","desc":"Fires after the component is moved.","name":"move","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}","desc":"Fires after the component is resized.","name":"resize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.","name":"specialkey","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the field has been validated with no errors.","name":"valid","type":"function"}]},"Roo.form.Field":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"20\", autocomplete: \"off\"})","name":"autoCreate","type":"String\/Object","memberOf":""},{"desc":"A CSS class to apply to the field's underlying element.","name":"cls","type":"String","memberOf":""},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"True to disable the field (defaults to false).","name":"disabled","type":"Boolean","memberOf":""},{"desc":"The default CSS class for the field (defaults to \"x-form-field\")","name":"fieldClass","type":"String","memberOf":""},{"desc":"Label to use when rendering a form.","name":"fieldLabel","type":"String","memberOf":""},{"desc":"The CSS class to use when the field receives focus (defaults to \"x-form-focus\")","name":"focusClass","type":"String","memberOf":""},{"desc":"height (optional) size of component","name":"height","type":"Number","memberOf":"Roo.BoxComponent"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").","name":"inputType","type":"String","memberOf":""},{"desc":"The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")","name":"invalidClass","type":"String","memberOf":""},{"desc":"The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")","name":"invalidText","type":"String","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"<b>Experimental<\/b> The effect used when displaying a validation message under the field (defaults to 'normal').","name":"msgFx","type":"String","memberOf":""},{"desc":"The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n<\/pre>","name":"msgTarget","type":"String","memberOf":""},{"desc":"The field's HTML name attribute.","name":"name","type":"String","memberOf":""},{"desc":"Mouse over tip","name":"qtip","type":"String","memberOf":""},{"desc":"True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.","name":"readOnly","type":"Boolean","memberOf":""},{"desc":"The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).","name":"tabIndex","type":"Number","memberOf":""},{"desc":"Whether the field should validate when it loses focus (defaults to true).","name":"validateOnBlur","type":"Boolean","memberOf":""},{"desc":"The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)","name":"validationDelay","type":"Number","memberOf":""},{"desc":"The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").","name":"validationEvent","type":"String\/Boolean","memberOf":""},{"desc":"A value to initialize this field with.","name":"value","type":"Mixed","memberOf":""},{"desc":"width (optional) size of component","name":"width","type":"Number","memberOf":"Roo.BoxComponent"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field loses input focus.","name":"blur","type":"function"},{"sig":"function (_self, newValue, oldValue)\n{\n\n}","desc":"Fires just before the field blurs if the field value has changed.","name":"change","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field receives input focus.","name":"focus","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self, msg)\n{\n\n}","desc":"Fires after the field has been marked as invalid.","name":"invalid","type":"function"},{"sig":"function (_self, x, y)\n{\n\n}","desc":"Fires after the component is moved.","name":"move","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}","desc":"Fires after the component is resized.","name":"resize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.","name":"specialkey","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the field has been validated with no errors.","name":"valid","type":"function"}]},"Roo.form.FieldSet":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"A DomHelper element spec used to autocreate the fieldset (defaults to {tag: 'fieldset', cn: {tag:'legend'}})","name":"autoCreate","type":"String\/Object","memberOf":""},{"desc":"True to add a clearing element at the end of this layout, equivalent to CSS clear: both (defaults to true)","name":"clear","type":"Boolean","memberOf":"Roo.form.Layout"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"True to suppress the display of field labels in this layout (defaults to false)","name":"hideLabels","type":"Boolean","memberOf":"Roo.form.Layout"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"Valid values are \"left,\" \"top\" and \"right\" (defaults to \"left\")","name":"labelAlign","type":"String","memberOf":"Roo.form.Layout"},{"desc":"The separator to use after field labels (defaults to ':')","name":"labelSeparator","type":"String","memberOf":"Roo.form.Layout"},{"desc":"Fixed width in pixels of all field labels (defaults to undefined)","name":"labelWidth","type":"Number","memberOf":"Roo.form.Layout"},{"desc":"The text to display as the legend for the FieldSet (defaults to '')","name":"legend","type":"String","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"A style specification string, e.g. \"width:100px\", or object in the form {width:\"100px\"}, or\na function which returns such a specification.","name":"style","type":"String\/Object\/Function","memberOf":"Roo.form.Layout"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"}]},"Roo.form.Form":{"props":[{"desc":"Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.","name":"baseParams","type":"Object","memberOf":"Roo.form.BasicForm"},{"desc":"Valid values are \"left,\" \"center\" and \"right\" (defaults to \"center\")","name":"buttonAlign","type":"String","memberOf":""},{"desc":"An Roo.data.DataReader (e.g. {@link Roo.data.XmlReader}) to be used to read data when reading validation errors on \"submit\" actions.\nThis is completely optional as there is built-in support for processing JSON.","name":"errorReader","type":"DataReader","memberOf":"Roo.form.BasicForm"},{"desc":"Set to true if this form is a file upload.","name":"fileUpload","type":"Boolean","memberOf":"Roo.form.BasicForm"},{"desc":"A css class to apply to the x-form-item of fields. This property cascades to child containers.","name":"itemCls","type":"String","memberOf":""},{"desc":"Valid values are \"left,\" \"top\" and \"right\" (defaults to \"left\").\nThis property cascades to child containers if not set.","name":"labelAlign","type":"String","memberOf":""},{"desc":"The width of labels. This property cascades to child containers.","name":"labelWidth","type":"Number","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"The request method to use (GET or POST) for form actions if one isn't supplied in the action options.","name":"method","type":"String","memberOf":"Roo.form.BasicForm"},{"desc":"Minimum width of all buttons in pixels (defaults to 75)","name":"minButtonWidth","type":"Number","memberOf":""},{"desc":"The milliseconds to poll valid state, ignored if monitorValid is not true (defaults to 200)","name":"monitorPoll","type":"Number","memberOf":""},{"desc":"If true the form monitors its valid state <b>client-side<\/b> and\nfires a looping event with that state. This is required to bind buttons to the valid\nstate using the config value formBind:true on the button.","name":"monitorValid","type":"Boolean","memberOf":""},{"desc":"An Roo.data.DataReader (e.g. {@link Roo.data.XmlReader}) to be used to read data when executing \"load\" actions.\nThis is optional as there is built-in support for processing JSON.","name":"reader","type":"DataReader","memberOf":"Roo.form.BasicForm"},{"desc":"Timeout for form actions in seconds (default is 30 seconds).","name":"timeout","type":"Number","memberOf":"Roo.form.BasicForm"},{"desc":"If set to true, form.reset() resets to the last loaded\nor setValues() data instead of when the form was first created.","name":"trackResetOnLoad","type":"Boolean","memberOf":"Roo.form.BasicForm"},{"desc":"The URL to use for form actions if one isn't supplied in the action options.","name":"url","type":"String","memberOf":"Roo.form.BasicForm"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, action)\n{\n\n}","desc":"Fires when an action is completed.","name":"actioncomplete","type":"function"},{"sig":"function (_self, action)\n{\n\n}","desc":"Fires when an action fails.","name":"actionfailed","type":"function"},{"sig":"function (_self, action)\n{\n\n}","desc":"Fires before any action is performed. Return false to cancel the action.","name":"beforeaction","type":"function"},{"sig":"function (_self, valid)\n{\n\n}","desc":"If the monitorValid config option is true, this event fires repetitively to notify of valid state","name":"clientvalidation","type":"function"},{"sig":"function (form)\n{\n\n}","desc":"Fires when the form is rendered","name":"rendered","type":"function"}]},"Roo.form.GridField":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"Text to include for adding a title.","name":"addTitle","type":"String","memberOf":""},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"checkbox\", autocomplete: \"off\"})","name":"autoCreate","type":"String\/Object","memberOf":""},{"desc":"A CSS class to apply to the field's underlying element.","name":"cls","type":"String","memberOf":"Roo.form.Field"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"True to disable the field (defaults to false).","name":"disabled","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The default CSS class for the field (defaults to \"x-form-field\")","name":"fieldClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"Label to use when rendering a form.","name":"fieldLabel","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when the field receives focus (defaults to \"x-form-focus\")","name":"focusClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"- used to restrict height of grid..","name":"height","type":"Number","memberOf":""},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").","name":"inputType","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")","name":"invalidClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")","name":"invalidText","type":"String","memberOf":"Roo.form.Field"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"<b>Experimental<\/b> The effect used when displaying a validation message under the field (defaults to 'normal').","name":"msgFx","type":"String","memberOf":"Roo.form.Field"},{"desc":"The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n<\/pre>","name":"msgTarget","type":"String","memberOf":"Roo.form.Field"},{"desc":"The field's HTML name attribute.","name":"name","type":"String","memberOf":"Roo.form.Field"},{"desc":"Mouse over tip","name":"qtip","type":"String","memberOf":"Roo.form.Field"},{"desc":"True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.","name":"readOnly","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).","name":"tabIndex","type":"Number","memberOf":"Roo.form.Field"},{"desc":"Whether the field should validate when it loses focus (defaults to true).","name":"validateOnBlur","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)","name":"validationDelay","type":"Number","memberOf":"Roo.form.Field"},{"desc":"The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").","name":"validationEvent","type":"String\/Boolean","memberOf":"Roo.form.Field"},{"desc":"A value to initialize this field with.","name":"value","type":"Mixed","memberOf":"Roo.form.Field"},{"desc":"- used to restrict width of grid..","name":"width","type":"Number","memberOf":""},{"desc":"(xtype'd description of grid) Grid or EditorGrid","name":"xgrid","type":"Object","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field loses input focus.","name":"blur","type":"function"},{"sig":"function (_self, newValue, oldValue)\n{\n\n}","desc":"Fires just before the field blurs if the field value has changed.","name":"change","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field receives input focus.","name":"focus","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self, msg)\n{\n\n}","desc":"Fires after the field has been marked as invalid.","name":"invalid","type":"function"},{"sig":"function (_self, x, y)\n{\n\n}","desc":"Fires after the component is moved.","name":"move","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}","desc":"Fires after the component is resized.","name":"resize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.","name":"specialkey","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the field has been validated with no errors.","name":"valid","type":"function"}]},"Roo.form.Hidden":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"False to validate that the value length > 0 (defaults to true)","name":"allowBlank","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"20\", autocomplete: \"off\"})","name":"autoCreate","type":"String\/Object","memberOf":"Roo.form.Field"},{"desc":"Error text to display if the allow blank validation fails (defaults to \"This field is required\")","name":"blankText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"A CSS class to apply to the field's underlying element.","name":"cls","type":"String","memberOf":"Roo.form.Field"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"True to disable input keystroke filtering (defaults to false)","name":"disableKeyFilter","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"True to disable the field (defaults to false).","name":"disabled","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The CSS class to apply to an empty field to style the {@link #emptyText} (defaults to\n'x-form-empty-field').  This class is automatically added and removed as needed depending on the current field value.","name":"emptyClass","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The default text to display in an empty field (defaults to null).","name":"emptyText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The default CSS class for the field (defaults to \"x-form-field\")","name":"fieldClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"Label to use when rendering a form.","name":"fieldLabel","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when the field receives focus (defaults to \"x-form-focus\")","name":"focusClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"True if this field should automatically grow and shrink to its content","name":"grow","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"The maximum width to allow when grow = true (defaults to 800)","name":"growMax","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"The minimum width to allow when grow = true (defaults to 30)","name":"growMin","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"height (optional) size of component","name":"height","type":"Number","memberOf":"Roo.BoxComponent"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").","name":"inputType","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")","name":"invalidClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")","name":"invalidText","type":"String","memberOf":"Roo.form.Field"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)","name":"maskRe","type":"String","memberOf":"Roo.form.TextField"},{"desc":"Maximum input field length allowed (defaults to Number.MAX_VALUE)","name":"maxLength","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")","name":"maxLengthText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"Minimum input field length required (defaults to 0)","name":"minLength","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")","name":"minLengthText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"<b>Experimental<\/b> The effect used when displaying a validation message under the field (defaults to 'normal').","name":"msgFx","type":"String","memberOf":"Roo.form.Field"},{"desc":"The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n<\/pre>","name":"msgTarget","type":"String","memberOf":"Roo.form.Field"},{"desc":"The field's HTML name attribute.","name":"name","type":"String","memberOf":"Roo.form.Field"},{"desc":"Mouse over tip","name":"qtip","type":"String","memberOf":"Roo.form.Field"},{"desc":"True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.","name":"readOnly","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.","name":"regex","type":"RegExp","memberOf":"Roo.form.TextField"},{"desc":"The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")","name":"regexText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"True to automatically select any existing field text when the field receives input focus (defaults to false)","name":"selectOnFocus","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).","name":"tabIndex","type":"Number","memberOf":"Roo.form.Field"},{"desc":"Whether the field should validate when it loses focus (defaults to true).","name":"validateOnBlur","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)","name":"validationDelay","type":"Number","memberOf":"Roo.form.Field"},{"desc":"The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").","name":"validationEvent","type":"String\/Boolean","memberOf":"Roo.form.Field"},{"desc":"A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.","name":"validator","type":"Function","memberOf":"Roo.form.TextField"},{"desc":"A value to initialize this field with.","name":"value","type":"Mixed","memberOf":"Roo.form.Field"},{"desc":"A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)","name":"vtype","type":"String","memberOf":"Roo.form.TextField"},{"desc":"width (optional) size of component","name":"width","type":"Number","memberOf":"Roo.BoxComponent"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, width)\n{\n\n}","desc":"Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.","name":"autosize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field loses input focus.","name":"blur","type":"function"},{"sig":"function (_self, newValue, oldValue)\n{\n\n}","desc":"Fires just before the field blurs if the field value has changed.","name":"change","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field receives input focus.","name":"focus","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self, msg)\n{\n\n}","desc":"Fires after the field has been marked as invalid.","name":"invalid","type":"function"},{"sig":"function (_self, x, y)\n{\n\n}","desc":"Fires after the component is moved.","name":"move","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}","desc":"Fires after the component is resized.","name":"resize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.","name":"specialkey","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the field has been validated with no errors.","name":"valid","type":"function"}]},"Roo.form.HtmlEditor.ToolbarContext":{"props":[{"desc":"List of toolbar elements to disable","name":"disable","type":"Object","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.form.HtmlEditor.ToolbarStandard":{"props":[{"desc":"List of additional buttons.\n\n\nNEEDS Extra CSS? \n.x-html-editor-tb .x-edit-none .x-btn-text { background: none; }","name":"btns","type":"Array","memberOf":""},{"desc":"default font to use.","name":"defaultFont","type":"String","memberOf":""},{"desc":"List of elements to disable..","name":"disable","type":"Object","memberOf":""},{"desc":"An array of available font families","name":"fontFamilies","type":"Array","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.form.HtmlEditor":{"props":[{"desc":"The default text for the create link prompt","name":"createLinkText","type":"String","memberOf":""},{"desc":"The default value for the create link prompt (defaults to http:\/ \/)","name":"defaultLinkValue","type":"String","memberOf":""},{"desc":"Array of toolbars. - defaults to just the Standard one","name":"toolbars","type":"Array","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires when the editor is first receives the focus. Any insertion must wait\nuntil after this event.","name":"activate","type":"function"},{"sig":"function (_self, html)\n{\n\n}","desc":"Fires before the iframe editor is updated with content from the textarea. Return false\nto cancel the push.","name":"beforepush","type":"function"},{"sig":"function (_self, html)\n{\n\n}","desc":"Fires before the textarea is updated with content from the editor iframe. Return false\nto cancel the sync.","name":"beforesync","type":"function"},{"sig":"function (_self, sourceEdit)\n{\n\n}","desc":"Fires when the editor switches edit modes","name":"editmodechange","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when on any editor (mouse up\/down cursor movement etc.) - used for toolbar hooks.","name":"editorevent","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the editor is fully initialized (including the iframe)","name":"initialize","type":"function"},{"sig":"function (_self, html)\n{\n\n}","desc":"Fires when the iframe editor is updated with content from the textarea.","name":"push","type":"function"},{"sig":"function (_self, html)\n{\n\n}","desc":"Fires when the textarea is updated with content from the editor iframe.","name":"sync","type":"function"}]},"Roo.form.Layout":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"A DomHelper element spec used to autocreate the layout (defaults to {tag: 'div', cls: 'x-form-ct'})","name":"autoCreate","type":"String\/Object","memberOf":""},{"desc":"True to add a clearing element at the end of this layout, equivalent to CSS clear: both (defaults to true)","name":"clear","type":"Boolean","memberOf":""},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"True to suppress the display of field labels in this layout (defaults to false)","name":"hideLabels","type":"Boolean","memberOf":""},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"Valid values are \"left,\" \"top\" and \"right\" (defaults to \"left\")","name":"labelAlign","type":"String","memberOf":""},{"desc":"The separator to use after field labels (defaults to ':')","name":"labelSeparator","type":"String","memberOf":""},{"desc":"Fixed width in pixels of all field labels (defaults to undefined)","name":"labelWidth","type":"Number","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"A style specification string, e.g. \"width:100px\", or object in the form {width:\"100px\"}, or\na function which returns such a specification.","name":"style","type":"String\/Object\/Function","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"}]},"Roo.form.NumberField":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"False to validate that the value length > 0 (defaults to true)","name":"allowBlank","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"False to disallow decimal values (defaults to true)","name":"allowDecimals","type":"Boolean","memberOf":""},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"False to prevent entering a negative sign (defaults to true)","name":"allowNegative","type":"Boolean","memberOf":""},{"desc":"A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"20\", autocomplete: \"off\"})","name":"autoCreate","type":"String\/Object","memberOf":"Roo.form.Field"},{"desc":"Error text to display if the allow blank validation fails (defaults to \"This field is required\")","name":"blankText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"A CSS class to apply to the field's underlying element.","name":"cls","type":"String","memberOf":"Roo.form.Field"},{"desc":"The maximum precision to display after the decimal separator (defaults to 2)","name":"decimalPrecision","type":"Number","memberOf":""},{"desc":"Character(s) to allow as the decimal separator (defaults to '.')","name":"decimalSeparator","type":"String","memberOf":""},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"True to disable input keystroke filtering (defaults to false)","name":"disableKeyFilter","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"True to disable the field (defaults to false).","name":"disabled","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The CSS class to apply to an empty field to style the {@link #emptyText} (defaults to\n'x-form-empty-field').  This class is automatically added and removed as needed depending on the current field value.","name":"emptyClass","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The default text to display in an empty field (defaults to null).","name":"emptyText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The default CSS class for the field (defaults to \"x-form-field x-form-num-field\")","name":"fieldClass","type":"String","memberOf":""},{"desc":"Label to use when rendering a form.","name":"fieldLabel","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when the field receives focus (defaults to \"x-form-focus\")","name":"focusClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"True if this field should automatically grow and shrink to its content","name":"grow","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"The maximum width to allow when grow = true (defaults to 800)","name":"growMax","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"The minimum width to allow when grow = true (defaults to 30)","name":"growMin","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"height (optional) size of component","name":"height","type":"Number","memberOf":"Roo.BoxComponent"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").","name":"inputType","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")","name":"invalidClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")","name":"invalidText","type":"String","memberOf":"Roo.form.Field"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)","name":"maskRe","type":"String","memberOf":"Roo.form.TextField"},{"desc":"Maximum input field length allowed (defaults to Number.MAX_VALUE)","name":"maxLength","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")","name":"maxLengthText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"Error text to display if the maximum value validation fails (defaults to \"The maximum value for this field is {maxValue}\")","name":"maxText","type":"String","memberOf":""},{"desc":"The maximum allowed value (defaults to Number.MAX_VALUE)","name":"maxValue","type":"Number","memberOf":""},{"desc":"Minimum input field length required (defaults to 0)","name":"minLength","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")","name":"minLengthText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"Error text to display if the minimum value validation fails (defaults to \"The minimum value for this field is {minValue}\")","name":"minText","type":"String","memberOf":""},{"desc":"The minimum allowed value (defaults to Number.NEGATIVE_INFINITY)","name":"minValue","type":"Number","memberOf":""},{"desc":"<b>Experimental<\/b> The effect used when displaying a validation message under the field (defaults to 'normal').","name":"msgFx","type":"String","memberOf":"Roo.form.Field"},{"desc":"The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n<\/pre>","name":"msgTarget","type":"String","memberOf":"Roo.form.Field"},{"desc":"The field's HTML name attribute.","name":"name","type":"String","memberOf":"Roo.form.Field"},{"desc":"Error text to display if the value is not a valid number.  For example, this can happen\nif a valid character like '.' or '-' is left in the field with no number (defaults to \"{value} is not a valid number\")","name":"nanText","type":"String","memberOf":""},{"desc":"Mouse over tip","name":"qtip","type":"String","memberOf":"Roo.form.Field"},{"desc":"True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.","name":"readOnly","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.","name":"regex","type":"RegExp","memberOf":"Roo.form.TextField"},{"desc":"The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")","name":"regexText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"True to automatically select any existing field text when the field receives input focus (defaults to false)","name":"selectOnFocus","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).","name":"tabIndex","type":"Number","memberOf":"Roo.form.Field"},{"desc":"Whether the field should validate when it loses focus (defaults to true).","name":"validateOnBlur","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)","name":"validationDelay","type":"Number","memberOf":"Roo.form.Field"},{"desc":"The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").","name":"validationEvent","type":"String\/Boolean","memberOf":"Roo.form.Field"},{"desc":"A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.","name":"validator","type":"Function","memberOf":"Roo.form.TextField"},{"desc":"A value to initialize this field with.","name":"value","type":"Mixed","memberOf":"Roo.form.Field"},{"desc":"A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)","name":"vtype","type":"String","memberOf":"Roo.form.TextField"},{"desc":"width (optional) size of component","name":"width","type":"Number","memberOf":"Roo.BoxComponent"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, width)\n{\n\n}","desc":"Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.","name":"autosize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field loses input focus.","name":"blur","type":"function"},{"sig":"function (_self, newValue, oldValue)\n{\n\n}","desc":"Fires just before the field blurs if the field value has changed.","name":"change","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field receives input focus.","name":"focus","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self, msg)\n{\n\n}","desc":"Fires after the field has been marked as invalid.","name":"invalid","type":"function"},{"sig":"function (_self, x, y)\n{\n\n}","desc":"Fires after the component is moved.","name":"move","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}","desc":"Fires after the component is resized.","name":"resize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.","name":"specialkey","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the field has been validated with no errors.","name":"valid","type":"function"}]},"Roo.form.Radio":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"checkbox\", autocomplete: \"off\"})","name":"autoCreate","type":"String\/Object","memberOf":"Roo.form.Checkbox"},{"desc":"The text that appears beside the checkbox","name":"boxLabel","type":"String","memberOf":"Roo.form.Checkbox"},{"desc":"True if the the checkbox should render already checked (defaults to false)","name":"checked","type":"Boolean","memberOf":"Roo.form.Checkbox"},{"desc":"A CSS class to apply to the field's underlying element.","name":"cls","type":"String","memberOf":"Roo.form.Field"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"True to disable the field (defaults to false).","name":"disabled","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The default CSS class for the checkbox (defaults to \"x-form-field\")","name":"fieldClass","type":"String","memberOf":"Roo.form.Checkbox"},{"desc":"Label to use when rendering a form.","name":"fieldLabel","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when the checkbox receives focus (defaults to undefined)","name":"focusClass","type":"String","memberOf":"Roo.form.Checkbox"},{"desc":"height (optional) size of component","name":"height","type":"Number","memberOf":"Roo.BoxComponent"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").","name":"inputType","type":"String","memberOf":"Roo.form.Field"},{"desc":"The value that should go into the generated input element's value attribute","name":"inputValue","type":"String","memberOf":"Roo.form.Checkbox"},{"desc":"The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")","name":"invalidClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")","name":"invalidText","type":"String","memberOf":"Roo.form.Field"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"<b>Experimental<\/b> The effect used when displaying a validation message under the field (defaults to 'normal').","name":"msgFx","type":"String","memberOf":"Roo.form.Field"},{"desc":"The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n<\/pre>","name":"msgTarget","type":"String","memberOf":"Roo.form.Field"},{"desc":"The field's HTML name attribute.","name":"name","type":"String","memberOf":"Roo.form.Field"},{"desc":"Mouse over tip","name":"qtip","type":"String","memberOf":"Roo.form.Field"},{"desc":"True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.","name":"readOnly","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).","name":"tabIndex","type":"Number","memberOf":"Roo.form.Field"},{"desc":"Whether the field should validate when it loses focus (defaults to true).","name":"validateOnBlur","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)","name":"validationDelay","type":"Number","memberOf":"Roo.form.Field"},{"desc":"The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").","name":"validationEvent","type":"String\/Boolean","memberOf":"Roo.form.Field"},{"desc":"A value to initialize this field with.","name":"value","type":"Mixed","memberOf":"Roo.form.Field"},{"desc":"The value that should go into the generated input element's value when unchecked.","name":"valueOff","type":"String","memberOf":"Roo.form.Checkbox"},{"desc":"width (optional) size of component","name":"width","type":"Number","memberOf":"Roo.BoxComponent"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field loses input focus.","name":"blur","type":"function"},{"sig":"function (_self, newValue, oldValue)\n{\n\n}","desc":"Fires just before the field blurs if the field value has changed.","name":"change","type":"function"},{"sig":"function (_self, checked)\n{\n\n}","desc":"Fires when the checkbox is checked or unchecked.","name":"check","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field receives input focus.","name":"focus","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self, msg)\n{\n\n}","desc":"Fires after the field has been marked as invalid.","name":"invalid","type":"function"},{"sig":"function (_self, x, y)\n{\n\n}","desc":"Fires after the component is moved.","name":"move","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}","desc":"Fires after the component is resized.","name":"resize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.","name":"specialkey","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the field has been validated with no errors.","name":"valid","type":"function"}]},"Roo.form.Row":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"A DomHelper element spec used to autocreate the layout (defaults to {tag: 'div', cls: 'x-form-ct'})","name":"autoCreate","type":"String\/Object","memberOf":"Roo.form.Layout"},{"desc":"True to add a clearing element at the end of this layout, equivalent to CSS clear: both (defaults to true)","name":"clear","type":"Boolean","memberOf":"Roo.form.Layout"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"The fixed height of the column in pixels or CSS value (defaults to \"auto\")","name":"height","type":"Number\/String","memberOf":""},{"desc":"True to suppress the display of field labels in this layout (defaults to false)","name":"hideLabels","type":"Boolean","memberOf":"Roo.form.Layout"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"Valid values are \"left,\" \"top\" and \"right\" (defaults to \"left\")","name":"labelAlign","type":"String","memberOf":"Roo.form.Layout"},{"desc":"The separator to use after field labels (defaults to ':')","name":"labelSeparator","type":"String","memberOf":"Roo.form.Layout"},{"desc":"Fixed width in pixels of all field labels (defaults to undefined)","name":"labelWidth","type":"Number","memberOf":"Roo.form.Layout"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"A style specification string, e.g. \"width:100px\", or object in the form {width:\"100px\"}, or\na function which returns such a specification.","name":"style","type":"String\/Object\/Function","memberOf":"Roo.form.Layout"},{"desc":"The fixed width of the column in pixels or CSS value (defaults to \"auto\")","name":"width","type":"Number\/String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"}]},"Roo.form.TextArea":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"False to validate that the value length > 0 (defaults to true)","name":"allowBlank","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"textarea\", style: \"width:300px;height:60px;\", autocomplete: \"off\"})","name":"autoCreate","type":"String\/Object","memberOf":""},{"desc":"Error text to display if the allow blank validation fails (defaults to \"This field is required\")","name":"blankText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"A CSS class to apply to the field's underlying element.","name":"cls","type":"String","memberOf":"Roo.form.Field"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"True to disable input keystroke filtering (defaults to false)","name":"disableKeyFilter","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"True to disable the field (defaults to false).","name":"disabled","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The CSS class to apply to an empty field to style the {@link #emptyText} (defaults to\n'x-form-empty-field').  This class is automatically added and removed as needed depending on the current field value.","name":"emptyClass","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The default text to display in an empty field (defaults to null).","name":"emptyText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The default CSS class for the field (defaults to \"x-form-field\")","name":"fieldClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"Label to use when rendering a form.","name":"fieldLabel","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when the field receives focus (defaults to \"x-form-focus\")","name":"focusClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"True if this field should automatically grow and shrink to its content","name":"grow","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"The maximum height to allow when grow = true (defaults to 1000)","name":"growMax","type":"Number","memberOf":""},{"desc":"The minimum height to allow when grow = true (defaults to 60)","name":"growMin","type":"Number","memberOf":""},{"desc":"height (optional) size of component","name":"height","type":"Number","memberOf":"Roo.BoxComponent"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").","name":"inputType","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")","name":"invalidClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")","name":"invalidText","type":"String","memberOf":"Roo.form.Field"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)","name":"maskRe","type":"String","memberOf":"Roo.form.TextField"},{"desc":"Maximum input field length allowed (defaults to Number.MAX_VALUE)","name":"maxLength","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")","name":"maxLengthText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"Minimum input field length required (defaults to 0)","name":"minLength","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")","name":"minLengthText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"<b>Experimental<\/b> The effect used when displaying a validation message under the field (defaults to 'normal').","name":"msgFx","type":"String","memberOf":"Roo.form.Field"},{"desc":"The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n<\/pre>","name":"msgTarget","type":"String","memberOf":"Roo.form.Field"},{"desc":"The field's HTML name attribute.","name":"name","type":"String","memberOf":"Roo.form.Field"},{"desc":"True to prevent scrollbars from appearing regardless of how much text is\nin the field (equivalent to setting overflow: hidden, defaults to false)","name":"preventScrollbars","type":"Boolean","memberOf":""},{"desc":"Mouse over tip","name":"qtip","type":"String","memberOf":"Roo.form.Field"},{"desc":"True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.","name":"readOnly","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.","name":"regex","type":"RegExp","memberOf":"Roo.form.TextField"},{"desc":"The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")","name":"regexText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"True to automatically select any existing field text when the field receives input focus (defaults to false)","name":"selectOnFocus","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).","name":"tabIndex","type":"Number","memberOf":"Roo.form.Field"},{"desc":"Whether the field should validate when it loses focus (defaults to true).","name":"validateOnBlur","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)","name":"validationDelay","type":"Number","memberOf":"Roo.form.Field"},{"desc":"The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").","name":"validationEvent","type":"String\/Boolean","memberOf":"Roo.form.Field"},{"desc":"A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.","name":"validator","type":"Function","memberOf":"Roo.form.TextField"},{"desc":"A value to initialize this field with.","name":"value","type":"Mixed","memberOf":"Roo.form.Field"},{"desc":"A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)","name":"vtype","type":"String","memberOf":"Roo.form.TextField"},{"desc":"width (optional) size of component","name":"width","type":"Number","memberOf":"Roo.BoxComponent"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, width)\n{\n\n}","desc":"Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.","name":"autosize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field loses input focus.","name":"blur","type":"function"},{"sig":"function (_self, newValue, oldValue)\n{\n\n}","desc":"Fires just before the field blurs if the field value has changed.","name":"change","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field receives input focus.","name":"focus","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self, msg)\n{\n\n}","desc":"Fires after the field has been marked as invalid.","name":"invalid","type":"function"},{"sig":"function (_self, x, y)\n{\n\n}","desc":"Fires after the component is moved.","name":"move","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}","desc":"Fires after the component is resized.","name":"resize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.","name":"specialkey","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the field has been validated with no errors.","name":"valid","type":"function"}]},"Roo.form.TextField":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"False to validate that the value length > 0 (defaults to true)","name":"allowBlank","type":"Boolean","memberOf":""},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"20\", autocomplete: \"off\"})","name":"autoCreate","type":"String\/Object","memberOf":"Roo.form.Field"},{"desc":"Error text to display if the allow blank validation fails (defaults to \"This field is required\")","name":"blankText","type":"String","memberOf":""},{"desc":"A CSS class to apply to the field's underlying element.","name":"cls","type":"String","memberOf":"Roo.form.Field"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"True to disable input keystroke filtering (defaults to false)","name":"disableKeyFilter","type":"Boolean","memberOf":""},{"desc":"True to disable the field (defaults to false).","name":"disabled","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The CSS class to apply to an empty field to style the {@link #emptyText} (defaults to\n'x-form-empty-field').  This class is automatically added and removed as needed depending on the current field value.","name":"emptyClass","type":"String","memberOf":""},{"desc":"The default text to display in an empty field (defaults to null).","name":"emptyText","type":"String","memberOf":""},{"desc":"The default CSS class for the field (defaults to \"x-form-field\")","name":"fieldClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"Label to use when rendering a form.","name":"fieldLabel","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when the field receives focus (defaults to \"x-form-focus\")","name":"focusClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"True if this field should automatically grow and shrink to its content","name":"grow","type":"Boolean","memberOf":""},{"desc":"The maximum width to allow when grow = true (defaults to 800)","name":"growMax","type":"Number","memberOf":""},{"desc":"The minimum width to allow when grow = true (defaults to 30)","name":"growMin","type":"Number","memberOf":""},{"desc":"height (optional) size of component","name":"height","type":"Number","memberOf":"Roo.BoxComponent"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").","name":"inputType","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")","name":"invalidClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")","name":"invalidText","type":"String","memberOf":"Roo.form.Field"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)","name":"maskRe","type":"String","memberOf":""},{"desc":"Maximum input field length allowed (defaults to Number.MAX_VALUE)","name":"maxLength","type":"Number","memberOf":""},{"desc":"Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")","name":"maxLengthText","type":"String","memberOf":""},{"desc":"Minimum input field length required (defaults to 0)","name":"minLength","type":"Number","memberOf":""},{"desc":"Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")","name":"minLengthText","type":"String","memberOf":""},{"desc":"<b>Experimental<\/b> The effect used when displaying a validation message under the field (defaults to 'normal').","name":"msgFx","type":"String","memberOf":"Roo.form.Field"},{"desc":"The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n<\/pre>","name":"msgTarget","type":"String","memberOf":"Roo.form.Field"},{"desc":"The field's HTML name attribute.","name":"name","type":"String","memberOf":"Roo.form.Field"},{"desc":"Mouse over tip","name":"qtip","type":"String","memberOf":"Roo.form.Field"},{"desc":"True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.","name":"readOnly","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.","name":"regex","type":"RegExp","memberOf":""},{"desc":"The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")","name":"regexText","type":"String","memberOf":""},{"desc":"True to automatically select any existing field text when the field receives input focus (defaults to false)","name":"selectOnFocus","type":"Boolean","memberOf":""},{"desc":"The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).","name":"tabIndex","type":"Number","memberOf":"Roo.form.Field"},{"desc":"Whether the field should validate when it loses focus (defaults to true).","name":"validateOnBlur","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)","name":"validationDelay","type":"Number","memberOf":"Roo.form.Field"},{"desc":"The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").","name":"validationEvent","type":"String\/Boolean","memberOf":"Roo.form.Field"},{"desc":"A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.","name":"validator","type":"Function","memberOf":""},{"desc":"A value to initialize this field with.","name":"value","type":"Mixed","memberOf":"Roo.form.Field"},{"desc":"A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)","name":"vtype","type":"String","memberOf":""},{"desc":"width (optional) size of component","name":"width","type":"Number","memberOf":"Roo.BoxComponent"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, width)\n{\n\n}","desc":"Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.","name":"autosize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field loses input focus.","name":"blur","type":"function"},{"sig":"function (_self, newValue, oldValue)\n{\n\n}","desc":"Fires just before the field blurs if the field value has changed.","name":"change","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field receives input focus.","name":"focus","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self, msg)\n{\n\n}","desc":"Fires after the field has been marked as invalid.","name":"invalid","type":"function"},{"sig":"function (_self, x, y)\n{\n\n}","desc":"Fires after the component is moved.","name":"move","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}","desc":"Fires after the component is resized.","name":"resize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.","name":"specialkey","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the field has been validated with no errors.","name":"valid","type":"function"}]},"Roo.form.TriggerField":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"False to validate that the value length > 0 (defaults to true)","name":"allowBlank","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"A DomHelper element spec, or true for a default element spec (defaults to\n{tag: \"input\", type: \"text\", size: \"16\", autocomplete: \"off\"})","name":"autoCreate","type":"String\/Object","memberOf":""},{"desc":"Error text to display if the allow blank validation fails (defaults to \"This field is required\")","name":"blankText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"A CSS class to apply to the field's underlying element.","name":"cls","type":"String","memberOf":"Roo.form.Field"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"True to disable input keystroke filtering (defaults to false)","name":"disableKeyFilter","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"True to disable the field (defaults to false).","name":"disabled","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The CSS class to apply to an empty field to style the {@link #emptyText} (defaults to\n'x-form-empty-field').  This class is automatically added and removed as needed depending on the current field value.","name":"emptyClass","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The default text to display in an empty field (defaults to null).","name":"emptyText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"The default CSS class for the field (defaults to \"x-form-field\")","name":"fieldClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"Label to use when rendering a form.","name":"fieldLabel","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when the field receives focus (defaults to \"x-form-focus\")","name":"focusClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"height (optional) size of component","name":"height","type":"Number","memberOf":"Roo.BoxComponent"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"True to hide the trigger element and display only the base text field (defaults to false)","name":"hideTrigger","type":"Boolean","memberOf":""},{"desc":"The type attribute for input fields -- e.g. radio, text, password (defaults to \"text\").","name":"inputType","type":"String","memberOf":"Roo.form.Field"},{"desc":"The CSS class to use when marking a field invalid (defaults to \"x-form-invalid\")","name":"invalidClass","type":"String","memberOf":"Roo.form.Field"},{"desc":"The error text to use when marking a field invalid and no message is provided (defaults to \"The value in this field is invalid\")","name":"invalidText","type":"String","memberOf":"Roo.form.Field"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"An input mask regular expression that will be used to filter keystrokes that don't match (defaults to null)","name":"maskRe","type":"String","memberOf":"Roo.form.TextField"},{"desc":"Maximum input field length allowed (defaults to Number.MAX_VALUE)","name":"maxLength","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"Error text to display if the maximum length validation fails (defaults to \"The maximum length for this field is {maxLength}\")","name":"maxLengthText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"Minimum input field length required (defaults to 0)","name":"minLength","type":"Number","memberOf":"Roo.form.TextField"},{"desc":"Error text to display if the minimum length validation fails (defaults to \"The minimum length for this field is {minLength}\")","name":"minLengthText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"<b>Experimental<\/b> The effect used when displaying a validation message under the field (defaults to 'normal').","name":"msgFx","type":"String","memberOf":"Roo.form.Field"},{"desc":"The location where error text should display.  Should be one of the following values (defaults to 'qtip'):\n<pre>\nValue         Description\n-----------   ----------------------------------------------------------------------\nqtip          Display a quick tip when the user hovers over the field\ntitle         Display a default browser title attribute popup\nunder         Add a block div beneath the field containing the error text\nside          Add an error icon to the right of the field with a popup on hover\n[element id]  Add the error text directly to the innerHTML of the specified element\n<\/pre>","name":"msgTarget","type":"String","memberOf":"Roo.form.Field"},{"desc":"The field's HTML name attribute.","name":"name","type":"String","memberOf":"Roo.form.Field"},{"desc":"Mouse over tip","name":"qtip","type":"String","memberOf":"Roo.form.Field"},{"desc":"True to mark the field as readOnly in HTML (defaults to false) -- Note: this only sets the element's readOnly DOM attribute.","name":"readOnly","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"A JavaScript RegExp object to be tested against the field value during validation (defaults to null).\nIf available, this regex will be evaluated only after the basic validators all return true, and will be passed the\ncurrent field value.  If the test fails, the field will be marked invalid using {@link #regexText}.","name":"regex","type":"RegExp","memberOf":"Roo.form.TextField"},{"desc":"The error text to display if {@link #regex} is used and the test fails during validation (defaults to \"\")","name":"regexText","type":"String","memberOf":"Roo.form.TextField"},{"desc":"True to automatically select any existing field text when the field receives input focus (defaults to false)","name":"selectOnFocus","type":"Boolean","memberOf":"Roo.form.TextField"},{"desc":"The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via applyTo (defaults to undefined).","name":"tabIndex","type":"Number","memberOf":"Roo.form.Field"},{"desc":"An additional CSS class used to style the trigger button.  The trigger will always get the\nclass 'x-form-trigger' by default and triggerClass will be <b>appended<\/b> if specified.","name":"triggerClass","type":"String","memberOf":""},{"desc":"Whether the field should validate when it loses focus (defaults to true).","name":"validateOnBlur","type":"Boolean","memberOf":"Roo.form.Field"},{"desc":"The length of time in milliseconds after user input begins until validation is initiated (defaults to 250)","name":"validationDelay","type":"Number","memberOf":"Roo.form.Field"},{"desc":"The event that should initiate field validation. Set to false to disable\n      automatic validation (defaults to \"keyup\").","name":"validationEvent","type":"String\/Boolean","memberOf":"Roo.form.Field"},{"desc":"A custom validation function to be called during field validation (defaults to null).\nIf available, this function will be called only after the basic validators all return true, and will be passed the\ncurrent field value and expected to return boolean true if the value is valid or a string error message if invalid.","name":"validator","type":"Function","memberOf":"Roo.form.TextField"},{"desc":"A value to initialize this field with.","name":"value","type":"Mixed","memberOf":"Roo.form.Field"},{"desc":"A validation type name as defined in {@link Roo.form.VTypes} (defaults to null)","name":"vtype","type":"String","memberOf":"Roo.form.TextField"},{"desc":"width (optional) size of component","name":"width","type":"Number","memberOf":"Roo.BoxComponent"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, width)\n{\n\n}","desc":"Fires when the autosize function is triggered.  The field may or may not have actually changed size\naccording to the default logic, but this event provides a hook for the developer to apply additional\nlogic at runtime to resize the field if needed.","name":"autosize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field loses input focus.","name":"blur","type":"function"},{"sig":"function (_self, newValue, oldValue)\n{\n\n}","desc":"Fires just before the field blurs if the field value has changed.","name":"change","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this field receives input focus.","name":"focus","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self, msg)\n{\n\n}","desc":"Fires after the field has been marked as invalid.","name":"invalid","type":"function"},{"sig":"function (_self, x, y)\n{\n\n}","desc":"Fires after the component is moved.","name":"move","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self, adjWidth, adjHeight, rawWidth, rawHeight)\n{\n\n}","desc":"Fires after the component is resized.","name":"resize","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.","name":"specialkey","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the field has been validated with no errors.","name":"valid","type":"function"}]},"Roo.grid.AbstractSelectionModel":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.grid.CellSelectionModel":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, rowIndex, colIndex)\n{\n\n}","desc":"Fires before a cell is selected.","name":"beforerowselect","type":"function"},{"sig":"function (_self, rowIndex, colIndex)\n{\n\n}","desc":"Fires when a cell is selected.","name":"cellselect","type":"function"},{"sig":"function (_self, selection)\n{\n\n}","desc":"Fires when the active selection changes.","name":"selectionchange","type":"function"}]},"Roo.grid.ColumnModel":{"props":[{"desc":"(Optional) Set the CSS text-align property of the column.  Defaults to undefined.","name":"align","type":"String","memberOf":""},{"desc":"(Optional) The name of the field in the grid's {@link Roo.data.Store}'s\n{@link Roo.data.Record} definition from which to draw the column's value. If not\nspecified, the column's index is used as an index into the Record's data Array.","name":"dataIndex","type":"String","memberOf":""},{"desc":"(Optional) For grid editors - returns the grid editor","name":"editor","type":"Roo.grid.GridEditor","memberOf":""},{"desc":"(Optional) True if the column width cannot be changed.  Defaults to false.","name":"fixed","type":"Boolean","memberOf":""},{"desc":"The header text to display in the Grid view.","name":"header","type":"String","memberOf":""},{"desc":"(Optional) True to hide the column. Defaults to false.","name":"hidden","type":"Boolean","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"(Optional) True to lock the column in place while scrolling the Grid.  Defaults to false.","name":"locked","type":"Boolean","memberOf":""},{"desc":"(Optional) A function used to generate HTML markup for a cell\ngiven the cell's data value. See {@link #setRenderer}. If not specified, the\ndefault renderer uses the raw data value.","name":"renderer","type":"Function","memberOf":""},{"desc":"(Optional) False to disable column resizing. Defaults to true.","name":"resizable","type":"Boolean","memberOf":""},{"desc":"(Optional) True if sorting is to be allowed on this column.\nDefaults to the value of the {@link #defaultSortable} property.\nWhether local\/remote sorting is used is specified in {@link Roo.data.Store#remoteSort}.","name":"sortable","type":"Boolean","memberOf":""},{"desc":"(Optional) The initial width in pixels of the column. Using this\ninstead of {@link Roo.grid.Grid#autoSizeColumns} is more efficient.","name":"width","type":"Number","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, colIndex, locked)\n{\n\n}","desc":"Fires when a column's locked state is changed","name":"columlockchange","type":"function"},{"sig":"function (_self, oldIndex, newIndex)\n{\n\n}","desc":"Fires when a column is moved.","name":"columnmoved","type":"function"},{"sig":"function (_self, columnIndex, newText)\n{\n\n}","desc":"Fires when the text of a header changes.","name":"headerchange","type":"function"},{"sig":"function (_self, columnIndex, hidden)\n{\n\n}","desc":"Fires when a column is hidden or \"unhidden\".","name":"hiddenchange","type":"function"},{"sig":"function (_self, columnIndex, newWidth)\n{\n\n}","desc":"Fires when the width of a column changes.","name":"widthchange","type":"function"}]},"Roo.grid.EditorGrid":{"props":[{"desc":"The id (or dataIndex) of a column in this grid that should expand to fill unused space. This id can not be 0. Default is false.","name":"autoExpandColumn","type":"String","memberOf":"Roo.grid.Grid"},{"desc":"The maximum width the autoExpandColumn can have (if enabled). Default is 1000.","name":"autoExpandMax","type":"Number","memberOf":"Roo.grid.Grid"},{"desc":"The minimum width the autoExpandColumn can have (if enabled).\nDefault is 50.","name":"autoExpandMin","type":"Number","memberOf":"Roo.grid.Grid"},{"desc":"True to fit the height of the grid container to the height of the data. Default is false.","name":"autoHeight","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"True to automatically resize the columns to fit their content\n<b>on initial render.<\/b> It is more efficient to explicitly size the columns\nthrough the ColumnModel's {@link Roo.grid.ColumnModel#width} config option.  Default is false.","name":"autoSizeColumns","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"True to measure headers with column data when auto sizing columns. Default is true.","name":"autoSizeHeaders","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"True to set the grid's width to the default total width of the grid's columns instead\nof a fixed width. Default is false.","name":"autoWidth","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"The number of clicks on a cell required to display the cell's editor (defaults to 2)","name":"clicksToEdit","type":"Number","memberOf":""},{"desc":"True to enable hiding of columns with the header context menu. Default is true.","name":"enableColumnHide","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"True to enable drag and drop reorder of columns. Default is true.","name":"enableColumnMove","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"True to enable drag and drop of rows. Default is false.","name":"enableDragDrop","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"True to manually sync row heights across locked and not locked rows. Default is false.","name":"enableRowHeightSync","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"An {@link Roo.LoadMask} config or true to mask the grid while loading. Default is false.","name":"loadMask","type":"Object","memberOf":"Roo.grid.Grid"},{"desc":"Sets the maximum height of the grid - ignored if autoHeight is not on.","name":"maxHeight","type":"Number","memberOf":"Roo.grid.Grid"},{"desc":"If autoSizeColumns is on, maxRowsToMeasure can be used to limit the number of\nrows measured to get a columns size. Default is 0 (all rows).","name":"maxRowsToMeasure","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"The minimum width a column can be resized to. Default is 25.","name":"minColumnWidth","type":"Number","memberOf":"Roo.grid.Grid"},{"desc":"True to autoSize the grid when the window resizes. Default is true.","name":"monitorWindowResize","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"True to stripe the rows.  Default is true.","name":"stripeRows","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"True to highlight rows when the mouse is over. Default is true.","name":"trackMouseOver","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"The {@link Roo.grid.GridView} used by the grid. This can be set before a call to render().","name":"view","type":"Object","memberOf":"Roo.grid.Grid"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (e)\n{\n\n}","desc":"Fires after a cell is edited. <br \/>\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>grid - This grid<\/li>\n<li>record - The record being edited<\/li>\n<li>field - The field name being edited<\/li>\n<li>value - The value being set<\/li>\n<li>originalValue - The original value for the field, before the edit.<\/li>\n<li>row - The grid row index<\/li>\n<li>column - The grid column index<\/li>\n<\/ul>","name":"afteredit","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"Fires before cell editing is triggered. The edit event object has the following properties <br \/>\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>grid - This grid<\/li>\n<li>record - The record being edited<\/li>\n<li>field - The field name being edited<\/li>\n<li>value - The value for the field being edited.<\/li>\n<li>row - The grid row index<\/li>\n<li>column - The grid column index<\/li>\n<li>cancel - Set this to true to cancel the edit or return false from your handler.<\/li>\n<\/ul>","name":"beforeedit","type":"function"},{"sig":"function (scrollLeft, scrollTop)\n{\n\n}","desc":"Fires when the body element is scrolled","name":"bodyscroll","type":"function"},{"sig":"function (_self, rowIndex, columnIndex, e)\n{\n\n}","desc":"Fires when a cell is clicked","name":"cellclick","type":"function"},{"sig":"function (_self, rowIndex, cellIndex, e)\n{\n\n}","desc":"Fires when a cell is right clicked","name":"cellcontextmenu","type":"function"},{"sig":"function (_self, rowIndex, columnIndex, e)\n{\n\n}","desc":"Fires when a cell is double clicked","name":"celldblclick","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw click event for the entire grid.","name":"click","type":"function"},{"sig":"function (oldIndex, newIndex)\n{\n\n}","desc":"Fires when the user moves a column","name":"columnmove","type":"function"},{"sig":"function (columnIndex, newSize)\n{\n\n}","desc":"Fires when the user resizes a column","name":"columnresize","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw contextmenu event for the entire grid.","name":"contextmenu","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw dblclick event for the entire grid.","name":"dblclick","type":"function"},{"sig":"function (_self, dd, targetId, e)\n{\n\n}","desc":"Fires when dragged row(s) are dropped on a valid DD target","name":"dragdrop","type":"function"},{"sig":"function (_self, dd, targetId, e)\n{\n\n}","desc":"","name":"dragenter\n Fires when the dragged row(s) first cross another DD target while being dragged","type":"function"},{"sig":"function (_self, dd, targetId, e)\n{\n\n}","desc":"Fires when the dragged row(s) leave another DD target while being dragged","name":"dragout","type":"function"},{"sig":"function (_self, dd, targetId, e)\n{\n\n}","desc":"Fires while row(s) are being dragged. \"targetId\" is the id of the Yahoo.util.DD object the selected rows are being dragged over.","name":"dragover","type":"function"},{"sig":"function (_self, dd, e)\n{\n\n}","desc":"Fires when a drag operation is complete","name":"enddrag","type":"function"},{"sig":"function (_self, columnIndex, e)\n{\n\n}","desc":"Fires when a header is clicked","name":"headerclick","type":"function"},{"sig":"function (_self, columnIndex, e)\n{\n\n}","desc":"Fires when a header is right clicked","name":"headercontextmenu","type":"function"},{"sig":"function (_self, columnIndex, e)\n{\n\n}","desc":"Fires when a header cell is double clicked","name":"headerdblclick","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw keydown event for the entire grid.","name":"keydown","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw keypress event for the entire grid.","name":"keypress","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw mousedown event for the entire grid.","name":"mousedown","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw mouseout event for the entire grid.","name":"mouseout","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw mouseover event for the entire grid.","name":"mouseover","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw mouseup event for the entire grid.","name":"mouseup","type":"function"},{"sig":"function (grid)\n{\n\n}","desc":"Fires when the grid is rendered","name":"render","type":"function"},{"sig":"function (_self, rowIndex, e)\n{\n\n}","desc":"Fires when a row is clicked","name":"rowclick","type":"function"},{"sig":"function (_self, rowIndex, e)\n{\n\n}","desc":"Fires when a row is right clicked","name":"rowcontextmenu","type":"function"},{"sig":"function (_self, rowIndex, e)\n{\n\n}","desc":"Fires when a row is double clicked","name":"rowdblclick","type":"function"},{"sig":"function (_self, dd, e)\n{\n\n}","desc":"Fires when row(s) start being dragged","name":"startdrag","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"Fires after a cell is edited, but before the value is set in the record. \nYou can use this to modify the value being set in the field, Return false\nto cancel the change. The edit event object has the following properties <br \/>\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>editor - This editor<\/li>\n<li>grid - This grid<\/li>\n<li>record - The record being edited<\/li>\n<li>field - The field name being edited<\/li>\n<li>value - The value being set<\/li>\n<li>originalValue - The original value for the field, before the edit.<\/li>\n<li>row - The grid row index<\/li>\n<li>column - The grid column index<\/li>\n<li>cancel - Set this to true to cancel the edit or return false from your handler.<\/li>\n<\/ul>","name":"validateedit","type":"function"}]},"Roo.grid.Grid":{"props":[{"desc":"The id (or dataIndex) of a column in this grid that should expand to fill unused space. This id can not be 0. Default is false.","name":"autoExpandColumn","type":"String","memberOf":""},{"desc":"The maximum width the autoExpandColumn can have (if enabled). Default is 1000.","name":"autoExpandMax","type":"Number","memberOf":""},{"desc":"The minimum width the autoExpandColumn can have (if enabled).\nDefault is 50.","name":"autoExpandMin","type":"Number","memberOf":""},{"desc":"True to fit the height of the grid container to the height of the data. Default is false.","name":"autoHeight","type":"Boolean","memberOf":""},{"desc":"True to automatically resize the columns to fit their content\n<b>on initial render.<\/b> It is more efficient to explicitly size the columns\nthrough the ColumnModel's {@link Roo.grid.ColumnModel#width} config option.  Default is false.","name":"autoSizeColumns","type":"Boolean","memberOf":""},{"desc":"True to measure headers with column data when auto sizing columns. Default is true.","name":"autoSizeHeaders","type":"Boolean","memberOf":""},{"desc":"True to set the grid's width to the default total width of the grid's columns instead\nof a fixed width. Default is false.","name":"autoWidth","type":"Boolean","memberOf":""},{"desc":"True to enable hiding of columns with the header context menu. Default is true.","name":"enableColumnHide","type":"Boolean","memberOf":""},{"desc":"True to enable drag and drop reorder of columns. Default is true.","name":"enableColumnMove","type":"Boolean","memberOf":""},{"desc":"True to enable drag and drop of rows. Default is false.","name":"enableDragDrop","type":"Boolean","memberOf":""},{"desc":"True to manually sync row heights across locked and not locked rows. Default is false.","name":"enableRowHeightSync","type":"Boolean","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"An {@link Roo.LoadMask} config or true to mask the grid while loading. Default is false.","name":"loadMask","type":"Object","memberOf":""},{"desc":"Sets the maximum height of the grid - ignored if autoHeight is not on.","name":"maxHeight","type":"Number","memberOf":""},{"desc":"If autoSizeColumns is on, maxRowsToMeasure can be used to limit the number of\nrows measured to get a columns size. Default is 0 (all rows).","name":"maxRowsToMeasure","type":"Boolean","memberOf":""},{"desc":"The minimum width a column can be resized to. Default is 25.","name":"minColumnWidth","type":"Number","memberOf":""},{"desc":"True to autoSize the grid when the window resizes. Default is true.","name":"monitorWindowResize","type":"Boolean","memberOf":""},{"desc":"True to stripe the rows.  Default is true.","name":"stripeRows","type":"Boolean","memberOf":""},{"desc":"True to highlight rows when the mouse is over. Default is true.","name":"trackMouseOver","type":"Boolean","memberOf":""},{"desc":"The {@link Roo.grid.GridView} used by the grid. This can be set before a call to render().","name":"view","type":"Object","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (scrollLeft, scrollTop)\n{\n\n}","desc":"Fires when the body element is scrolled","name":"bodyscroll","type":"function"},{"sig":"function (_self, rowIndex, columnIndex, e)\n{\n\n}","desc":"Fires when a cell is clicked","name":"cellclick","type":"function"},{"sig":"function (_self, rowIndex, cellIndex, e)\n{\n\n}","desc":"Fires when a cell is right clicked","name":"cellcontextmenu","type":"function"},{"sig":"function (_self, rowIndex, columnIndex, e)\n{\n\n}","desc":"Fires when a cell is double clicked","name":"celldblclick","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw click event for the entire grid.","name":"click","type":"function"},{"sig":"function (oldIndex, newIndex)\n{\n\n}","desc":"Fires when the user moves a column","name":"columnmove","type":"function"},{"sig":"function (columnIndex, newSize)\n{\n\n}","desc":"Fires when the user resizes a column","name":"columnresize","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw contextmenu event for the entire grid.","name":"contextmenu","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw dblclick event for the entire grid.","name":"dblclick","type":"function"},{"sig":"function (_self, dd, targetId, e)\n{\n\n}","desc":"Fires when dragged row(s) are dropped on a valid DD target","name":"dragdrop","type":"function"},{"sig":"function (_self, dd, targetId, e)\n{\n\n}","desc":"","name":"dragenter\n Fires when the dragged row(s) first cross another DD target while being dragged","type":"function"},{"sig":"function (_self, dd, targetId, e)\n{\n\n}","desc":"Fires when the dragged row(s) leave another DD target while being dragged","name":"dragout","type":"function"},{"sig":"function (_self, dd, targetId, e)\n{\n\n}","desc":"Fires while row(s) are being dragged. \"targetId\" is the id of the Yahoo.util.DD object the selected rows are being dragged over.","name":"dragover","type":"function"},{"sig":"function (_self, dd, e)\n{\n\n}","desc":"Fires when a drag operation is complete","name":"enddrag","type":"function"},{"sig":"function (_self, columnIndex, e)\n{\n\n}","desc":"Fires when a header is clicked","name":"headerclick","type":"function"},{"sig":"function (_self, columnIndex, e)\n{\n\n}","desc":"Fires when a header is right clicked","name":"headercontextmenu","type":"function"},{"sig":"function (_self, columnIndex, e)\n{\n\n}","desc":"Fires when a header cell is double clicked","name":"headerdblclick","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw keydown event for the entire grid.","name":"keydown","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw keypress event for the entire grid.","name":"keypress","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw mousedown event for the entire grid.","name":"mousedown","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw mouseout event for the entire grid.","name":"mouseout","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw mouseover event for the entire grid.","name":"mouseover","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw mouseup event for the entire grid.","name":"mouseup","type":"function"},{"sig":"function (grid)\n{\n\n}","desc":"Fires when the grid is rendered","name":"render","type":"function"},{"sig":"function (_self, rowIndex, e)\n{\n\n}","desc":"Fires when a row is clicked","name":"rowclick","type":"function"},{"sig":"function (_self, rowIndex, e)\n{\n\n}","desc":"Fires when a row is right clicked","name":"rowcontextmenu","type":"function"},{"sig":"function (_self, rowIndex, e)\n{\n\n}","desc":"Fires when a row is double clicked","name":"rowdblclick","type":"function"},{"sig":"function (_self, dd, e)\n{\n\n}","desc":"Fires when row(s) start being dragged","name":"startdrag","type":"function"}]},"Roo.grid.GridEditor":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"The position to align to (see {@link Roo.Element#alignTo} for more details, defaults to \"c-c?\").","name":"alignment","type":"String","memberOf":"Roo.Editor"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"True for the editor to automatically adopt the size of the underlying field, \"width\" to adopt the width only,\nor \"height\" to adopt the height only (defaults to false)","name":"autosize","type":"Boolean\/String","memberOf":"Roo.Editor"},{"desc":"True to cancel the edit when the escape key is pressed (defaults to false)","name":"cancelOnEsc","type":"Boolean","memberOf":"Roo.Editor"},{"desc":"True to complete the edit when the enter key is pressed (defaults to false)","name":"completeOnEnter","type":"Boolean","memberOf":"Roo.Editor"},{"desc":"True to constrain the editor to the viewport","name":"constrain","type":"Boolean","memberOf":"Roo.Editor"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"Field to wrap (or xtyped)","name":"field","type":"Roo.form.Field","memberOf":""},{"desc":"False to keep the bound element visible while the editor is displayed (defaults to true)","name":"hideEl","type":"Boolean","memberOf":"Roo.Editor"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"True to skip the the edit completion process (no save, no events fired) if the user completes an edit and\nthe value has not changed (defaults to false).  Applies only to string values - edits for other data types\nwill never be ignored.","name":"ignoreNoChange","type":"Boolean","memberOf":"Roo.Editor"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"True to automatically revert the field value and cancel the edit when the user completes an edit and the field\nvalidation fails (defaults to true)","name":"revertInvalid","type":"Boolean","memberOf":"Roo.Editor"},{"desc":"\"sides\" for sides\/bottom only, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"frame\")","name":"shadow","type":"Boolean\/String","memberOf":"Roo.Editor"},{"desc":"True to update the innerHTML of the bound element when the update completes (defaults to false)","name":"updateEl","type":"Boolean","memberOf":"Roo.Editor"},{"desc":"The data value of the underlying field (defaults to \"\")","name":"value","type":"Mixed","memberOf":"Roo.Editor"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, value, startValue)\n{\n\n}","desc":"Fires after a change has been made to the field, but before the change is reflected in the underlying\nfield.  Saving the change to the field can be canceled by returning false from the handler of this event.\nNote that if the value has not changed and ignoreNoChange = true, the editing will still end but this\nevent will not fire since no edit actually occurred.","name":"beforecomplete","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self, boundEl, value)\n{\n\n}","desc":"Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning\nfalse from the handler of this event.","name":"beforestartedit","type":"function"},{"sig":"function (_self, value, startValue)\n{\n\n}","desc":"Fires after editing is complete and any changed value has been written to the underlying field.","name":"complete","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.","name":"specialkey","type":"function"},{"sig":"function (boundEl, value)\n{\n\n}","desc":"Fires when this editor is displayed","name":"startedit","type":"function"}]},"Roo.grid.GridView":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.grid.PropertyGrid":{"props":[{"desc":"The id (or dataIndex) of a column in this grid that should expand to fill unused space. This id can not be 0. Default is false.","name":"autoExpandColumn","type":"String","memberOf":"Roo.grid.Grid"},{"desc":"The maximum width the autoExpandColumn can have (if enabled). Default is 1000.","name":"autoExpandMax","type":"Number","memberOf":"Roo.grid.Grid"},{"desc":"The minimum width the autoExpandColumn can have (if enabled).\nDefault is 50.","name":"autoExpandMin","type":"Number","memberOf":"Roo.grid.Grid"},{"desc":"True to fit the height of the grid container to the height of the data. Default is false.","name":"autoHeight","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"True to automatically resize the columns to fit their content\n<b>on initial render.<\/b> It is more efficient to explicitly size the columns\nthrough the ColumnModel's {@link Roo.grid.ColumnModel#width} config option.  Default is false.","name":"autoSizeColumns","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"True to measure headers with column data when auto sizing columns. Default is true.","name":"autoSizeHeaders","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"True to set the grid's width to the default total width of the grid's columns instead\nof a fixed width. Default is false.","name":"autoWidth","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"The number of clicks on a cell required to display the cell's editor (defaults to 2)","name":"clicksToEdit","type":"Number","memberOf":"Roo.grid.EditorGrid"},{"desc":"map of colnames=> custom editors.\nthe custom editor can be one of the standard ones (date|string|number|int|boolean), or a\ngrid editor eg. Roo.grid.GridEditor(new Roo.form.TextArea({selectOnFocus:true})),\nfalse disables editing of the field.","name":"customEditors","type":"Object","memberOf":""},{"desc":"True to enable hiding of columns with the header context menu. Default is true.","name":"enableColumnHide","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"True to enable drag and drop reorder of columns. Default is true.","name":"enableColumnMove","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"True to enable drag and drop of rows. Default is false.","name":"enableDragDrop","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"True to manually sync row heights across locked and not locked rows. Default is false.","name":"enableRowHeightSync","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"An {@link Roo.LoadMask} config or true to mask the grid while loading. Default is false.","name":"loadMask","type":"Object","memberOf":"Roo.grid.Grid"},{"desc":"Sets the maximum height of the grid - ignored if autoHeight is not on.","name":"maxHeight","type":"Number","memberOf":"Roo.grid.Grid"},{"desc":"If autoSizeColumns is on, maxRowsToMeasure can be used to limit the number of\nrows measured to get a columns size. Default is 0 (all rows).","name":"maxRowsToMeasure","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"The minimum width a column can be resized to. Default is 25.","name":"minColumnWidth","type":"Number","memberOf":"Roo.grid.Grid"},{"desc":"True to autoSize the grid when the window resizes. Default is true.","name":"monitorWindowResize","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"map of property Names to their displayed value","name":"propertyNames","type":"Object","memberOf":""},{"desc":"True to stripe the rows.  Default is true.","name":"stripeRows","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"True to highlight rows when the mouse is over. Default is true.","name":"trackMouseOver","type":"Boolean","memberOf":"Roo.grid.Grid"},{"desc":"The {@link Roo.grid.GridView} used by the grid. This can be set before a call to render().","name":"view","type":"Object","memberOf":"Roo.grid.Grid"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (e)\n{\n\n}","desc":"Fires after a cell is edited. <br \/>\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>grid - This grid<\/li>\n<li>record - The record being edited<\/li>\n<li>field - The field name being edited<\/li>\n<li>value - The value being set<\/li>\n<li>originalValue - The original value for the field, before the edit.<\/li>\n<li>row - The grid row index<\/li>\n<li>column - The grid column index<\/li>\n<\/ul>","name":"afteredit","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"Fires before cell editing is triggered. The edit event object has the following properties <br \/>\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>grid - This grid<\/li>\n<li>record - The record being edited<\/li>\n<li>field - The field name being edited<\/li>\n<li>value - The value for the field being edited.<\/li>\n<li>row - The grid row index<\/li>\n<li>column - The grid column index<\/li>\n<li>cancel - Set this to true to cancel the edit or return false from your handler.<\/li>\n<\/ul>","name":"beforeedit","type":"function"},{"sig":"function (grid, id, newval, oldval)\n{\n\n}","desc":"Fires before a property changes (return false to stop?)","name":"beforepropertychange","type":"function"},{"sig":"function (scrollLeft, scrollTop)\n{\n\n}","desc":"Fires when the body element is scrolled","name":"bodyscroll","type":"function"},{"sig":"function (_self, rowIndex, columnIndex, e)\n{\n\n}","desc":"Fires when a cell is clicked","name":"cellclick","type":"function"},{"sig":"function (_self, rowIndex, cellIndex, e)\n{\n\n}","desc":"Fires when a cell is right clicked","name":"cellcontextmenu","type":"function"},{"sig":"function (_self, rowIndex, columnIndex, e)\n{\n\n}","desc":"Fires when a cell is double clicked","name":"celldblclick","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw click event for the entire grid.","name":"click","type":"function"},{"sig":"function (oldIndex, newIndex)\n{\n\n}","desc":"Fires when the user moves a column","name":"columnmove","type":"function"},{"sig":"function (columnIndex, newSize)\n{\n\n}","desc":"Fires when the user resizes a column","name":"columnresize","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw contextmenu event for the entire grid.","name":"contextmenu","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw dblclick event for the entire grid.","name":"dblclick","type":"function"},{"sig":"function (_self, dd, targetId, e)\n{\n\n}","desc":"Fires when dragged row(s) are dropped on a valid DD target","name":"dragdrop","type":"function"},{"sig":"function (_self, dd, targetId, e)\n{\n\n}","desc":"","name":"dragenter\n Fires when the dragged row(s) first cross another DD target while being dragged","type":"function"},{"sig":"function (_self, dd, targetId, e)\n{\n\n}","desc":"Fires when the dragged row(s) leave another DD target while being dragged","name":"dragout","type":"function"},{"sig":"function (_self, dd, targetId, e)\n{\n\n}","desc":"Fires while row(s) are being dragged. \"targetId\" is the id of the Yahoo.util.DD object the selected rows are being dragged over.","name":"dragover","type":"function"},{"sig":"function (_self, dd, e)\n{\n\n}","desc":"Fires when a drag operation is complete","name":"enddrag","type":"function"},{"sig":"function (_self, columnIndex, e)\n{\n\n}","desc":"Fires when a header is clicked","name":"headerclick","type":"function"},{"sig":"function (_self, columnIndex, e)\n{\n\n}","desc":"Fires when a header is right clicked","name":"headercontextmenu","type":"function"},{"sig":"function (_self, columnIndex, e)\n{\n\n}","desc":"Fires when a header cell is double clicked","name":"headerdblclick","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw keydown event for the entire grid.","name":"keydown","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw keypress event for the entire grid.","name":"keypress","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw mousedown event for the entire grid.","name":"mousedown","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw mouseout event for the entire grid.","name":"mouseout","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw mouseover event for the entire grid.","name":"mouseover","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"The raw mouseup event for the entire grid.","name":"mouseup","type":"function"},{"sig":"function (grid, id, newval, oldval)\n{\n\n}","desc":"Fires after a property changes","name":"propertychange","type":"function"},{"sig":"function (grid)\n{\n\n}","desc":"Fires when the grid is rendered","name":"render","type":"function"},{"sig":"function (_self, rowIndex, e)\n{\n\n}","desc":"Fires when a row is clicked","name":"rowclick","type":"function"},{"sig":"function (_self, rowIndex, e)\n{\n\n}","desc":"Fires when a row is right clicked","name":"rowcontextmenu","type":"function"},{"sig":"function (_self, rowIndex, e)\n{\n\n}","desc":"Fires when a row is double clicked","name":"rowdblclick","type":"function"},{"sig":"function (_self, dd, e)\n{\n\n}","desc":"Fires when row(s) start being dragged","name":"startdrag","type":"function"},{"sig":"function (e)\n{\n\n}","desc":"Fires after a cell is edited, but before the value is set in the record. \nYou can use this to modify the value being set in the field, Return false\nto cancel the change. The edit event object has the following properties <br \/>\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>editor - This editor<\/li>\n<li>grid - This grid<\/li>\n<li>record - The record being edited<\/li>\n<li>field - The field name being edited<\/li>\n<li>value - The value being set<\/li>\n<li>originalValue - The original value for the field, before the edit.<\/li>\n<li>row - The grid row index<\/li>\n<li>column - The grid column index<\/li>\n<li>cancel - Set this to true to cancel the edit or return false from your handler.<\/li>\n<\/ul>","name":"validateedit","type":"function"}]},"Roo.grid.RowSelectionModel":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"True to allow selection of only one row at a time (defaults to false)","name":"singleSelect","type":"Boolean","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires after the selection changes (eg. by key press or clicking)","name":"afterselectionchange","type":"function"},{"sig":"function (_self, rowIndex, keepExisting)\n{\n\n}","desc":"Fires when a row is selected being selected, return false to cancel.","name":"beforerowselect","type":"function"},{"sig":"function (_self, rowIndex)\n{\n\n}","desc":"Fires when a row is deselected.","name":"rowdeselect","type":"function"},{"sig":"function (_self, rowIndex, r)\n{\n\n}","desc":"Fires when a row is selected.","name":"rowselect","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the selection changes","name":"selectionchange","type":"function"}]},"Roo.menu.Adapter":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")","name":"activeClass","type":"String","memberOf":"Roo.menu.BaseItem"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"True if this item can be visually activated (defaults to false)","name":"canActivate","type":"Boolean","memberOf":"Roo.menu.BaseItem"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"A function that will handle the click event of this menu item (defaults to undefined)","name":"handler","type":"Function","memberOf":"Roo.menu.BaseItem"},{"desc":"Length of time in milliseconds to wait before hiding after a click (defaults to 100)","name":"hideDelay","type":"Number","memberOf":"Roo.menu.BaseItem"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"True to hide the containing menu after this item is clicked (defaults to true)","name":"hideOnClick","type":"Boolean","memberOf":"Roo.menu.BaseItem"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires when this item is activated","name":"activate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this item is clicked","name":"click","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this item is deactivated","name":"deactivate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"}]},"Roo.menu.BaseItem":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")","name":"activeClass","type":"String","memberOf":""},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"True if this item can be visually activated (defaults to false)","name":"canActivate","type":"Boolean","memberOf":""},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"A function that will handle the click event of this menu item (defaults to undefined)","name":"handler","type":"Function","memberOf":""},{"desc":"Length of time in milliseconds to wait before hiding after a click (defaults to 100)","name":"hideDelay","type":"Number","memberOf":""},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"True to hide the containing menu after this item is clicked (defaults to true)","name":"hideOnClick","type":"Boolean","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires when this item is activated","name":"activate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this item is clicked","name":"click","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this item is deactivated","name":"deactivate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"}]},"Roo.menu.CheckItem":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")","name":"activeClass","type":"String","memberOf":"Roo.menu.BaseItem"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"True if this item can be visually activated (defaults to true)","name":"canActivate","type":"Boolean","memberOf":"Roo.menu.Item"},{"desc":"True to initialize this checkbox as checked (defaults to false).  Note that\nif this checkbox is part of a radio group (group = true) only the last item in the group that is\ninitialized with checked = true will be rendered as checked.","name":"checked","type":"Boolean","memberOf":""},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"All check items with the same group name will automatically be grouped into a single-select\nradio button group (defaults to '')","name":"group","type":"String","memberOf":""},{"desc":"The default CSS class to use for radio group check items (defaults to \"x-menu-group-item\")","name":"groupClass","type":"String","memberOf":""},{"desc":"A function that will handle the click event of this menu item (defaults to undefined)","name":"handler","type":"Function","memberOf":"Roo.menu.BaseItem"},{"desc":"Length of time in milliseconds to wait before hiding after a click (defaults to 100)","name":"hideDelay","type":"Number","memberOf":"Roo.menu.BaseItem"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"True to hide the containing menu after this item is clicked (defaults to true)","name":"hideOnClick","type":"Boolean","memberOf":"Roo.menu.BaseItem"},{"desc":"The path to an icon to display in this menu item (defaults to Roo.BLANK_IMAGE_URL)","name":"icon","type":"String","memberOf":"Roo.menu.Item"},{"desc":"The default CSS class to use for check items (defaults to \"x-menu-item x-menu-check-item\")","name":"itemCls","type":"String","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"Length of time in milliseconds to wait before showing this item (defaults to 200)","name":"showDelay","type":"Number","memberOf":"Roo.menu.Item"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires when this item is activated","name":"activate","type":"function"},{"sig":"function (_self, checked)\n{\n\n}","desc":"Fires before the checked value is set, providing an opportunity to cancel if needed","name":"beforecheckchange","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self, checked)\n{\n\n}","desc":"Fires after the checked value has been set","name":"checkchange","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this item is clicked","name":"click","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this item is deactivated","name":"deactivate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"}]},"Roo.menu.ColorItem":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")","name":"activeClass","type":"String","memberOf":"Roo.menu.BaseItem"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"True if this item can be visually activated (defaults to false)","name":"canActivate","type":"Boolean","memberOf":"Roo.menu.BaseItem"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"A function that will handle the click event of this menu item (defaults to undefined)","name":"handler","type":"Function","memberOf":"Roo.menu.BaseItem"},{"desc":"Length of time in milliseconds to wait before hiding after a click (defaults to 100)","name":"hideDelay","type":"Number","memberOf":"Roo.menu.BaseItem"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"True to hide the containing menu after this item is clicked (defaults to true)","name":"hideOnClick","type":"Boolean","memberOf":"Roo.menu.BaseItem"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires when this item is activated","name":"activate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this item is clicked","name":"click","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this item is deactivated","name":"deactivate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"}]},"Roo.menu.ColorMenu":{"props":[{"desc":"True to allow multiple menus to be displayed at the same time (defaults to false)","name":"allowOtherMenus","type":"Boolean","memberOf":"Roo.menu.Menu"},{"desc":"The default {@link Roo.Element#alignTo) anchor position value for this menu\nrelative to its element of origin (defaults to \"tl-bl?\")","name":"defaultAlign","type":"String","memberOf":"Roo.menu.Menu"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"The minimum width of the menu in pixels (defaults to 120)","name":"minWidth","type":"Number","memberOf":"Roo.menu.Menu"},{"desc":"True (default) - means that clicking on screen etc. hides it.","name":"registerMenu","type":"Boolean","memberOf":"Roo.menu.Menu"},{"desc":"True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"sides\")","name":"shadow","type":"Boolean\/String","memberOf":"Roo.menu.Menu"},{"desc":"The {@link Roo.Element#alignTo} anchor position value to use for submenus of\nthis menu (defaults to \"tl-tr?\")","name":"subMenuAlign","type":"String","memberOf":"Roo.menu.Menu"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before this menu is hidden","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before this menu is displayed","name":"beforeshow","type":"function"},{"sig":"function (_self, menuItem, e)\n{\n\n}","desc":"Fires when this menu is clicked (or when the enter key is pressed while it is active)","name":"click","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after this menu is hidden","name":"hide","type":"function"},{"sig":"function (baseItem, e)\n{\n\n}","desc":"Fires when a menu item contained in this menu is clicked","name":"itemclick","type":"function"},{"sig":"function (_self, e, menuItem)\n{\n\n}","desc":"Fires when the mouse exits this menu","name":"mouseout","type":"function"},{"sig":"function (_self, e, menuItem)\n{\n\n}","desc":"Fires when the mouse is hovering over this menu","name":"mouseover","type":"function"},{"sig":"function (palette, color)\n{\n\n}","desc":"","name":"select","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after this menu is displayed","name":"show","type":"function"}]},"Roo.menu.DateItem":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")","name":"activeClass","type":"String","memberOf":"Roo.menu.BaseItem"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"True if this item can be visually activated (defaults to false)","name":"canActivate","type":"Boolean","memberOf":"Roo.menu.BaseItem"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"A function that will handle the click event of this menu item (defaults to undefined)","name":"handler","type":"Function","memberOf":"Roo.menu.BaseItem"},{"desc":"Length of time in milliseconds to wait before hiding after a click (defaults to 100)","name":"hideDelay","type":"Number","memberOf":"Roo.menu.BaseItem"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"True to hide the containing menu after this item is clicked (defaults to true)","name":"hideOnClick","type":"Boolean","memberOf":"Roo.menu.BaseItem"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires when this item is activated","name":"activate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this item is clicked","name":"click","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this item is deactivated","name":"deactivate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"}]},"Roo.menu.DateMenu":{"props":[{"desc":"True to allow multiple menus to be displayed at the same time (defaults to false)","name":"allowOtherMenus","type":"Boolean","memberOf":"Roo.menu.Menu"},{"desc":"The default {@link Roo.Element#alignTo) anchor position value for this menu\nrelative to its element of origin (defaults to \"tl-bl?\")","name":"defaultAlign","type":"String","memberOf":"Roo.menu.Menu"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"The minimum width of the menu in pixels (defaults to 120)","name":"minWidth","type":"Number","memberOf":"Roo.menu.Menu"},{"desc":"True (default) - means that clicking on screen etc. hides it.","name":"registerMenu","type":"Boolean","memberOf":"Roo.menu.Menu"},{"desc":"True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"sides\")","name":"shadow","type":"Boolean\/String","memberOf":"Roo.menu.Menu"},{"desc":"The {@link Roo.Element#alignTo} anchor position value to use for submenus of\nthis menu (defaults to \"tl-tr?\")","name":"subMenuAlign","type":"String","memberOf":"Roo.menu.Menu"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before this menu is hidden","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before this menu is displayed","name":"beforeshow","type":"function"},{"sig":"function (_self, menuItem, e)\n{\n\n}","desc":"Fires when this menu is clicked (or when the enter key is pressed while it is active)","name":"click","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after this menu is hidden","name":"hide","type":"function"},{"sig":"function (baseItem, e)\n{\n\n}","desc":"Fires when a menu item contained in this menu is clicked","name":"itemclick","type":"function"},{"sig":"function (_self, e, menuItem)\n{\n\n}","desc":"Fires when the mouse exits this menu","name":"mouseout","type":"function"},{"sig":"function (_self, e, menuItem)\n{\n\n}","desc":"Fires when the mouse is hovering over this menu","name":"mouseover","type":"function"},{"sig":"function (picker, date)\n{\n\n}","desc":"","name":"select","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after this menu is displayed","name":"show","type":"function"}]},"Roo.menu.Item":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")","name":"activeClass","type":"String","memberOf":"Roo.menu.BaseItem"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"True if this item can be visually activated (defaults to true)","name":"canActivate","type":"Boolean","memberOf":""},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"A function that will handle the click event of this menu item (defaults to undefined)","name":"handler","type":"Function","memberOf":"Roo.menu.BaseItem"},{"desc":"Length of time in milliseconds to wait before hiding after a click (defaults to 100)","name":"hideDelay","type":"Number","memberOf":"Roo.menu.BaseItem"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"True to hide the containing menu after this item is clicked (defaults to true)","name":"hideOnClick","type":"Boolean","memberOf":"Roo.menu.BaseItem"},{"desc":"The path to an icon to display in this menu item (defaults to Roo.BLANK_IMAGE_URL)","name":"icon","type":"String","memberOf":""},{"desc":"The default CSS class to use for menu items (defaults to \"x-menu-item\")","name":"itemCls","type":"String","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"Length of time in milliseconds to wait before showing this item (defaults to 200)","name":"showDelay","type":"Number","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires when this item is activated","name":"activate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this item is clicked","name":"click","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this item is deactivated","name":"deactivate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"}]},"Roo.menu.Menu":{"props":[{"desc":"True to allow multiple menus to be displayed at the same time (defaults to false)","name":"allowOtherMenus","type":"Boolean","memberOf":""},{"desc":"The default {@link Roo.Element#alignTo) anchor position value for this menu\nrelative to its element of origin (defaults to \"tl-bl?\")","name":"defaultAlign","type":"String","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"The minimum width of the menu in pixels (defaults to 120)","name":"minWidth","type":"Number","memberOf":""},{"desc":"True (default) - means that clicking on screen etc. hides it.","name":"registerMenu","type":"Boolean","memberOf":""},{"desc":"True or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"sides\")","name":"shadow","type":"Boolean\/String","memberOf":""},{"desc":"The {@link Roo.Element#alignTo} anchor position value to use for submenus of\nthis menu (defaults to \"tl-tr?\")","name":"subMenuAlign","type":"String","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires before this menu is hidden","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before this menu is displayed","name":"beforeshow","type":"function"},{"sig":"function (_self, menuItem, e)\n{\n\n}","desc":"Fires when this menu is clicked (or when the enter key is pressed while it is active)","name":"click","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after this menu is hidden","name":"hide","type":"function"},{"sig":"function (baseItem, e)\n{\n\n}","desc":"Fires when a menu item contained in this menu is clicked","name":"itemclick","type":"function"},{"sig":"function (_self, e, menuItem)\n{\n\n}","desc":"Fires when the mouse exits this menu","name":"mouseout","type":"function"},{"sig":"function (_self, e, menuItem)\n{\n\n}","desc":"Fires when the mouse is hovering over this menu","name":"mouseover","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after this menu is displayed","name":"show","type":"function"}]},"Roo.menu.Separator":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")","name":"activeClass","type":"String","memberOf":"Roo.menu.BaseItem"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"True if this item can be visually activated (defaults to false)","name":"canActivate","type":"Boolean","memberOf":"Roo.menu.BaseItem"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"A function that will handle the click event of this menu item (defaults to undefined)","name":"handler","type":"Function","memberOf":"Roo.menu.BaseItem"},{"desc":"Length of time in milliseconds to wait before hiding after a click (defaults to 100)","name":"hideDelay","type":"Number","memberOf":"Roo.menu.BaseItem"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"True to hide the containing menu after this item is clicked (defaults to false)","name":"hideOnClick","type":"Boolean","memberOf":""},{"desc":"The default CSS class to use for separators (defaults to \"x-menu-sep\")","name":"itemCls","type":"String","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires when this item is activated","name":"activate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this item is clicked","name":"click","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this item is deactivated","name":"deactivate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"}]},"Roo.menu.TextItem":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"The CSS class to use when the item becomes activated (defaults to \"x-menu-item-active\")","name":"activeClass","type":"String","memberOf":"Roo.menu.BaseItem"},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"True if this item can be visually activated (defaults to false)","name":"canActivate","type":"Boolean","memberOf":"Roo.menu.BaseItem"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"A function that will handle the click event of this menu item (defaults to undefined)","name":"handler","type":"Function","memberOf":"Roo.menu.BaseItem"},{"desc":"Length of time in milliseconds to wait before hiding after a click (defaults to 100)","name":"hideDelay","type":"Number","memberOf":"Roo.menu.BaseItem"},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"True to hide the containing menu after this item is clicked (defaults to false)","name":"hideOnClick","type":"Boolean","memberOf":""},{"desc":"The default CSS class to use for text items (defaults to \"x-menu-text\")","name":"itemCls","type":"String","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires when this item is activated","name":"activate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this item is clicked","name":"click","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this item is deactivated","name":"deactivate","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"}]},"Roo.state.CookieProvider":{"props":[{"desc":"The domain to save the cookie for.  Note that you cannot specify a different domain than\nyour page is on, but you can specify a sub-domain, or simply the domain itself like 'roojs.com' to include\nall sub-domains if you need to access cookies across different sub-domains (defaults to null which uses the same\ndomain the page is running on including the 'www' like 'www.roojs.com')","name":"domain","type":"String","memberOf":""},{"desc":"The cookie expiration date (defaults to 7 days from now)","name":"expires","type":"Date","memberOf":""},{"desc":"The path for which the cookie is active (defaults to root '\/' which makes it active for all pages in the site)","name":"path","type":"String","memberOf":""},{"desc":"True if the site is using SSL (defaults to false)","name":"secure","type":"Boolean","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, key, value)\n{\n\n}","desc":"Fires when a state change occurs.","name":"statechange","type":"function"}]},"Roo.state.Provider":{"props":[{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, key, value)\n{\n\n}","desc":"Fires when a state change occurs.","name":"statechange","type":"function"}]},"Roo.tree.AsyncTreeNode":{"props":[{"desc":"false to make this node undraggable if DD is on (defaults to true)","name":"allowDrag","type":"Boolean","memberOf":"Roo.tree.TreeNode"},{"desc":"false if this node cannot be drop on","name":"allowDrop","type":"Boolean","memberOf":"Roo.tree.TreeNode"},{"desc":"True to render a checked checkbox for this node, false to render an unchecked checkbox\n(defaults to undefined with no checkbox rendered)","name":"checked","type":"Boolean","memberOf":"Roo.tree.TreeNode"},{"desc":"A css class to be added to the node","name":"cls","type":"String","memberOf":"Roo.tree.TreeNode"},{"desc":"true to start the node disabled","name":"disabled","type":"Boolean","memberOf":"Roo.tree.TreeNode"},{"desc":"true to start the node expanded","name":"expanded","type":"Boolean","memberOf":"Roo.tree.TreeNode"},{"desc":"URL of the link used for the node (defaults to #)","name":"href","type":"String","memberOf":"Roo.tree.TreeNode"},{"desc":"target frame for the link","name":"hrefTarget","type":"String","memberOf":"Roo.tree.TreeNode"},{"desc":"The path to an icon for the node. The preferred way to do this","name":"icon","type":"String","memberOf":"Roo.tree.TreeNode"},{"desc":"A css class to be added to the nodes icon element for applying css background images","name":"iconCls","type":"String","memberOf":"Roo.tree.TreeNode"},{"desc":"The id for this node. If one is not specified, one is generated.","name":"id","type":"String","memberOf":"Roo.data.Node"},{"desc":"true if this node is a leaf and does not have children","name":"leaf","type":"Boolean","memberOf":"Roo.data.Node"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"A TreeLoader to be used by this node (defaults to the loader defined on the tree)","name":"loader","type":"TreeLoader","memberOf":""},{"desc":"An Ext QuickTip for the node","name":"qtip","type":"String","memberOf":"Roo.tree.TreeNode"},{"desc":"An Ext QuickTip config for the node (used instead of qtip)","name":"qtipCfg","type":"String","memberOf":"Roo.tree.TreeNode"},{"desc":"True for single click expand on this node","name":"singleClickExpand","type":"Boolean","memberOf":"Roo.tree.TreeNode"},{"desc":"The text for this node","name":"text","type":"String","memberOf":"Roo.tree.TreeNode"},{"desc":"A UI <b>class<\/b> to use for this node (defaults to Roo.tree.TreeNodeUI)","name":"uiProvider","type":"Function","memberOf":"Roo.tree.TreeNode"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (tree, _self, node, index)\n{\n\n}","desc":"Fires when a new child node is appended","name":"append","type":"function"},{"sig":"function (tree, _self, node)\n{\n\n}","desc":"Fires before a new child is appended, return false to cancel the append.","name":"beforeappend","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires right before the child nodes for this node are rendered","name":"beforechildrenrendered","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires before click processing. Return false to cancel the default action.","name":"beforeclick","type":"function"},{"sig":"function (_self, deep, anim)\n{\n\n}","desc":"Fires before this node is collapsed, return false to cancel.","name":"beforecollapse","type":"function"},{"sig":"function (_self, deep, anim)\n{\n\n}","desc":"Fires before this node is expanded, return false to cancel.","name":"beforeexpand","type":"function"},{"sig":"function (tree, _self, node, refNode)\n{\n\n}","desc":"Fires before a new child is inserted, return false to cancel the insert.","name":"beforeinsert","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before this node is loaded, return false to cancel","name":"beforeload","type":"function"},{"sig":"function (tree, _self, oldParent, newParent, index)\n{\n\n}","desc":"Fires before this node is moved to a new location in the tree. Return false to cancel the move.","name":"beforemove","type":"function"},{"sig":"function (tree, _self, node)\n{\n\n}","desc":"Fires before a child is removed, return false to cancel the remove.","name":"beforeremove","type":"function"},{"sig":"function (_self, checked)\n{\n\n}","desc":"Fires when a node with a checkbox's checked property changes","name":"checkchange","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this node is clicked","name":"click","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this node is collapsed","name":"collapse","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this node is right clicked","name":"contextmenu","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this node is double clicked","name":"dblclick","type":"function"},{"sig":"function (_self, disabled)\n{\n\n}","desc":"Fires when the disabled status of this node changes","name":"disabledchange","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this node is expanded","name":"expand","type":"function"},{"sig":"function (tree, _self, node, refNode)\n{\n\n}","desc":"Fires when a new child node is inserted.","name":"insert","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this node is loaded","name":"load","type":"function"},{"sig":"function (tree, _self, oldParent, newParent, index)\n{\n\n}","desc":"Fires when this node is moved to a new location in the tree","name":"move","type":"function"},{"sig":"function (tree, _self, node)\n{\n\n}","desc":"Fires when a child node is removed","name":"remove","type":"function"},{"sig":"function (_self, text, oldText)\n{\n\n}","desc":"Fires when the text for this node is changed","name":"textchange","type":"function"}]},"Roo.tree.ColumnTree":{"props":[{"desc":"compined right\/left border allowance","name":"borderWidth","type":"int","memberOf":""},{"desc":"Including width, header, renderer, cls, dataIndex","name":"columns","type":"Object","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (w, h)\n{\n\n}","desc":"Fire this event on a container when it resizes","name":"resize","type":"function"}]},"Roo.tree.DefaultSelectionModel":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, node, node)\n{\n\n}","desc":"Fires before the selected node changes, return false to cancel the change","name":"beforeselect","type":"function"},{"sig":"function (_self, node)\n{\n\n}","desc":"Fires when the selected node changes","name":"selectionchange","type":"function"}]},"Roo.tree.MultiSelectionModel":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, nodes)\n{\n\n}","desc":"Fires when the selected nodes change","name":"selectionchange","type":"function"}]},"Roo.tree.TreeEditor":{"props":[{"desc":"which property holds the element that used for  hide() \/ show() \/ disable() \/ enable()\ndefault is 'el'","name":"actionMode","type":"String","memberOf":"Roo.Component"},{"desc":"The position to align to (see {@link Roo.Element#alignTo} for more details, defaults to \"l-l\").","name":"alignment","type":"String","memberOf":""},{"desc":"Whether the component can move the Dom node when rendering (defaults to true).","name":"allowDomMove","type":"Boolean","memberOf":"Roo.Component"},{"desc":"True for the editor to automatically adopt the size of the underlying field, \"width\" to adopt the width only,\nor \"height\" to adopt the height only (defaults to false)","name":"autosize","type":"Boolean\/String","memberOf":"Roo.Editor"},{"desc":"True to cancel the edit when the escape key is pressed (defaults to false)","name":"cancelOnEsc","type":"Boolean","memberOf":"Roo.Editor"},{"desc":"CSS class to apply to the editor (defaults to \"x-small-editor x-tree-editor\")","name":"cls","type":"String","memberOf":""},{"desc":"True to complete the edit when the enter key is pressed (defaults to false)","name":"completeOnEnter","type":"Boolean","memberOf":"Roo.Editor"},{"desc":"True to constrain the editor to the viewport","name":"constrain","type":"Boolean","memberOf":"Roo.Editor"},{"desc":"CSS class added to the component when it is disabled (defaults to \"x-item-disabled\").","name":"disableClass","type":"String","memberOf":"Roo.Component"},{"desc":"True to hide the bound element while the editor is displayed (defaults to false)","name":"hideEl","type":"Boolean","memberOf":""},{"desc":"How this component should hidden. Supported values are\n\"visibility\" (css visibility), \"offsets\" (negative offset position) and\n\"display\" (css display) - defaults to \"display\".","name":"hideMode","type":"String","memberOf":"Roo.Component"},{"desc":"True to skip the the edit completion process (no save, no events fired) if the user completes an edit and\nthe value has not changed (defaults to false).  Applies only to string values - edits for other data types\nwill never be ignored.","name":"ignoreNoChange","type":"Boolean","memberOf":"Roo.Editor"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"The maximum width in pixels of the editor field (defaults to 250).  Note that if the maxWidth would exceed\nthe containing tree element's size, it will be automatically limited for you to the container width, taking\nscroll and client offsets into account prior to each edit.","name":"maxWidth","type":"Number","memberOf":""},{"desc":"True to automatically revert the field value and cancel the edit when the user completes an edit and the field\nvalidation fails (defaults to true)","name":"revertInvalid","type":"Boolean","memberOf":"Roo.Editor"},{"desc":"\"sides\" for sides\/bottom only, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow (defaults to \"frame\")","name":"shadow","type":"Boolean\/String","memberOf":"Roo.Editor"},{"desc":"True to shim the editor if selects\/iframes could be displayed beneath it (defaults to false)","name":"shim","type":"Boolean","memberOf":""},{"desc":"True to update the innerHTML of the bound element when the update completes (defaults to false)","name":"updateEl","type":"Boolean","memberOf":"Roo.Editor"},{"desc":"The data value of the underlying field (defaults to \"\")","name":"value","type":"Mixed","memberOf":"Roo.Editor"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self, value, startValue)\n{\n\n}","desc":"Fires after a change has been made to the field, but before the change is reflected in the underlying\nfield.  Saving the change to the field can be canceled by returning false from the handler of this event.\nNote that if the value has not changed and ignoreNoChange = true, the editing will still end but this\nevent will not fire since no edit actually occurred.","name":"beforecomplete","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is destroyed. Return false to stop the destroy.","name":"beforedestroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is hidden. Return false to stop the hide.","name":"beforehide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is rendered. Return false to stop the render.","name":"beforerender","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires before the component is shown.  Return false to stop the show.","name":"beforeshow","type":"function"},{"sig":"function (_self, boundEl, value)\n{\n\n}","desc":"Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning\nfalse from the handler of this event.","name":"beforestartedit","type":"function"},{"sig":"function (_self, value, startValue)\n{\n\n}","desc":"Fires after editing is complete and any changed value has been written to the underlying field.","name":"complete","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is destroyed.","name":"destroy","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is disabled.","name":"disable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is enabled.","name":"enable","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is hidden.","name":"hide","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is rendered.","name":"render","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires after the component is shown.","name":"show","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\n{@link Roo.EventObject#getKey} to determine which key was pressed.","name":"specialkey","type":"function"},{"sig":"function (boundEl, value)\n{\n\n}","desc":"Fires when this editor is displayed","name":"startedit","type":"function"}]},"Roo.tree.TreeLoader":{"props":[{"desc":"(optional) An object containing attributes to be added to all nodes\ncreated by this loader. If the attributes sent by the server have an attribute in this object,\nthey take priority.","name":"baseAttrs","type":"Object","memberOf":""},{"desc":"(optional) An object containing properties which\nspecify HTTP parameters to be passed to each request for child nodes.","name":"baseParams","type":"Object","memberOf":""},{"desc":"(optional) Default to true. Remove previously existing\nchild nodes before loading.","name":"clearOnLoad","type":"Boolean","memberOf":""},{"desc":"The URL from which to request a Json string which\nspecifies an array of node definition object representing the child nodes\nto be loaded.","name":"dataUrl","type":"String","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"(optional) \nName of the query as it will be passed on the querystring (defaults to 'node')\neg. the request will be ?node=[id]","name":"queryParam","type":"String","memberOf":""},{"desc":"(optional) Default to false. Use this to read data from an object \nproperty on loading, rather than expecting an array. (eg. more compatible to a standard\nGrid query { data : [ .....] }","name":"root","type":"String","memberOf":""},{"desc":"(optional) An object containing properties which\nspecify custom {@link Roo.tree.TreeNodeUI} implementations. If the optional\n<i>uiProvider<\/i> attribute of a returned child node is a string rather\nthan a reference to a TreeNodeUI implementation, this that string value\nis used as a property name in the uiProviders object. You can define the provider named\n'default' , and this will be used for all nodes (if no uiProvider is delivered by the node data)","name":"uiProviders","type":"Object","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (This, node, callback)\n{\n\n}","desc":"Fires before a network request is made to retrieve the Json text which specifies a node's children.","name":"beforeload","type":"function"},{"sig":"function (This, node, response)\n{\n\n}","desc":"Fires when the node has been successfuly loaded.","name":"load","type":"function"},{"sig":"function (This, node, response)\n{\n\n}","desc":"Fires if the network request failed.","name":"loadexception","type":"function"}]},"Roo.tree.TreeNode":{"props":[{"desc":"false to make this node undraggable if DD is on (defaults to true)","name":"allowDrag","type":"Boolean","memberOf":""},{"desc":"false if this node cannot be drop on","name":"allowDrop","type":"Boolean","memberOf":""},{"desc":"True to render a checked checkbox for this node, false to render an unchecked checkbox\n(defaults to undefined with no checkbox rendered)","name":"checked","type":"Boolean","memberOf":""},{"desc":"A css class to be added to the node","name":"cls","type":"String","memberOf":""},{"desc":"true to start the node disabled","name":"disabled","type":"Boolean","memberOf":""},{"desc":"true to start the node expanded","name":"expanded","type":"Boolean","memberOf":""},{"desc":"URL of the link used for the node (defaults to #)","name":"href","type":"String","memberOf":""},{"desc":"target frame for the link","name":"hrefTarget","type":"String","memberOf":""},{"desc":"The path to an icon for the node. The preferred way to do this","name":"icon","type":"String","memberOf":""},{"desc":"A css class to be added to the nodes icon element for applying css background images","name":"iconCls","type":"String","memberOf":""},{"desc":"The id for this node. If one is not specified, one is generated.","name":"id","type":"String","memberOf":"Roo.data.Node"},{"desc":"true if this node is a leaf and does not have children","name":"leaf","type":"Boolean","memberOf":"Roo.data.Node"},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"An Ext QuickTip for the node","name":"qtip","type":"String","memberOf":""},{"desc":"An Ext QuickTip config for the node (used instead of qtip)","name":"qtipCfg","type":"String","memberOf":""},{"desc":"True for single click expand on this node","name":"singleClickExpand","type":"Boolean","memberOf":""},{"desc":"The text for this node","name":"text","type":"String","memberOf":""},{"desc":"A UI <b>class<\/b> to use for this node (defaults to Roo.tree.TreeNodeUI)","name":"uiProvider","type":"Function","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (tree, _self, node, index)\n{\n\n}","desc":"Fires when a new child node is appended","name":"append","type":"function"},{"sig":"function (tree, _self, node)\n{\n\n}","desc":"Fires before a new child is appended, return false to cancel the append.","name":"beforeappend","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires right before the child nodes for this node are rendered","name":"beforechildrenrendered","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires before click processing. Return false to cancel the default action.","name":"beforeclick","type":"function"},{"sig":"function (_self, deep, anim)\n{\n\n}","desc":"Fires before this node is collapsed, return false to cancel.","name":"beforecollapse","type":"function"},{"sig":"function (_self, deep, anim)\n{\n\n}","desc":"Fires before this node is expanded, return false to cancel.","name":"beforeexpand","type":"function"},{"sig":"function (tree, _self, node, refNode)\n{\n\n}","desc":"Fires before a new child is inserted, return false to cancel the insert.","name":"beforeinsert","type":"function"},{"sig":"function (tree, _self, oldParent, newParent, index)\n{\n\n}","desc":"Fires before this node is moved to a new location in the tree. Return false to cancel the move.","name":"beforemove","type":"function"},{"sig":"function (tree, _self, node)\n{\n\n}","desc":"Fires before a child is removed, return false to cancel the remove.","name":"beforeremove","type":"function"},{"sig":"function (_self, checked)\n{\n\n}","desc":"Fires when a node with a checkbox's checked property changes","name":"checkchange","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this node is clicked","name":"click","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this node is collapsed","name":"collapse","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this node is right clicked","name":"contextmenu","type":"function"},{"sig":"function (_self, e)\n{\n\n}","desc":"Fires when this node is double clicked","name":"dblclick","type":"function"},{"sig":"function (_self, disabled)\n{\n\n}","desc":"Fires when the disabled status of this node changes","name":"disabledchange","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when this node is expanded","name":"expand","type":"function"},{"sig":"function (tree, _self, node, refNode)\n{\n\n}","desc":"Fires when a new child node is inserted.","name":"insert","type":"function"},{"sig":"function (tree, _self, oldParent, newParent, index)\n{\n\n}","desc":"Fires when this node is moved to a new location in the tree","name":"move","type":"function"},{"sig":"function (tree, _self, node)\n{\n\n}","desc":"Fires when a child node is removed","name":"remove","type":"function"},{"sig":"function (_self, text, oldText)\n{\n\n}","desc":"Fires when the text for this node is changed","name":"textchange","type":"function"}]},"Roo.tree.TreePanel":{"props":[{"desc":"true to enable animated expand\/collapse (defaults to the value of Roo.enableFx)","name":"animate","type":"Boolean","memberOf":""},{"desc":"true to register this container with ScrollManager","name":"containerScroll","type":"Boolean","memberOf":""},{"desc":"True if the tree should only allow append drops (use for trees which are sorted)","name":"ddAppendOnly","type":"String","memberOf":""},{"desc":"The DD group this TreePanel belongs to","name":"ddGroup","type":"String","memberOf":""},{"desc":"true to enable YUI body scrolling","name":"ddScroll","type":"Boolean","memberOf":""},{"desc":"Custom config to pass to the {@link Roo.tree.TreeDragZone} instance","name":"dragConfig","type":"Object","memberOf":""},{"desc":"Custom config to pass to the {@link Roo.tree.TreeDropZone} instance","name":"dropConfig","type":"Object","memberOf":""},{"desc":"true to enable drag and drop","name":"enableDD","type":"Boolean","memberOf":""},{"desc":"true to enable just drag","name":"enableDrag","type":"Boolean","memberOf":""},{"desc":"true to enable just drop","name":"enableDrop","type":"Boolean","memberOf":""},{"desc":"The color of the node highlight (defaults to C3DAF9)","name":"hlColor","type":"String","memberOf":""},{"desc":"false to disable node highlight on drop (defaults to the value of Roo.enableFx)","name":"hlDrop","type":"Boolean","memberOf":""},{"desc":"false to disable tree lines (defaults to true)","name":"lines","type":"Boolean","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"A TreeLoader for use with this TreePanel","name":"loader","type":"Boolean","memberOf":""},{"desc":"The token used to separate sub-paths in path strings (defaults to '\/')","name":"pathSeparator","type":"String","memberOf":""},{"desc":"Sets the rendering (formatting) function for the nodes. to return HTML markup for the tree view. The render function is called with  the following parameters:<ul><li>The {Object} The data for the node.<\/li><\/ul>","name":"renderer","type":"Function","memberOf":""},{"desc":"Sets the rendering (formatting) function for the nodes hovertip to return HTML markup for the tree view. The render function is called with  the following parameters:<ul><li>The {Object} The data for the node.<\/li><\/ul>","name":"rendererTip","type":"Function","memberOf":""},{"desc":"false to hide the root node (defaults to true)","name":"rootVisible","type":"Boolean","memberOf":""},{"desc":"A tree selection model to use with this TreePanel (defaults to a {@link Roo.tree.DefaultSelectionModel})","name":"selModel","type":"Boolean","memberOf":""},{"desc":"true if only 1 node per branch may be expanded","name":"singleExpand","type":"Boolean","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (tree, parent, node, index)\n{\n\n}","desc":"Fires when a new child node is appended to a node in this tree.","name":"append","type":"function"},{"sig":"function (tree, parent, node)\n{\n\n}","desc":"Fires before a new child is appended to a node in this tree, return false to cancel the append.","name":"beforeappend","type":"function"},{"sig":"function (node)\n{\n\n}","desc":"Fires right before the child nodes for a node are rendered","name":"beforechildrenrendered","type":"function"},{"sig":"function (node, e)\n{\n\n}","desc":"Fires before click processing on a node. Return false to cancel the default action.","name":"beforeclick","type":"function"},{"sig":"function (node, deep, anim)\n{\n\n}","desc":"Fires before a node is collapsed, return false to cancel.","name":"beforecollapse","type":"function"},{"sig":"function (node, deep, anim)\n{\n\n}","desc":"Fires before a node is expanded, return false to cancel.","name":"beforeexpand","type":"function"},{"sig":"function (tree, parent, node, refNode)\n{\n\n}","desc":"Fires before a new child is inserted in a node in this tree, return false to cancel the insert.","name":"beforeinsert","type":"function"},{"sig":"function (node)\n{\n\n}","desc":"Fires before a node is loaded, return false to cancel","name":"beforeload","type":"function"},{"sig":"function (tree, node, oldParent, newParent, index)\n{\n\n}","desc":"Fires before a node is moved to a new location in the tree. Return false to cancel the move.","name":"beforemove","type":"function"},{"sig":"function (dropEvent)\n{\n\n}","desc":"Fires when a DD object is dropped on a node in this tree for preprocessing. Return false to cancel the drop. The dropEvent\npassed to handlers has the following properties:<br \/>\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>tree - The TreePanel<\/li>\n<li>target - The node being targeted for the drop<\/li>\n<li>data - The drag data from the drag source<\/li>\n<li>point - The point of the drop - append, above or below<\/li>\n<li>source - The drag source<\/li>\n<li>rawEvent - Raw mouse event<\/li>\n<li>dropNode - Drop node(s) provided by the source <b>OR<\/b> you can supply node(s)\nto be inserted by setting them on this object.<\/li>\n<li>cancel - Set this to true to cancel the drop.<\/li>\n<\/ul>","name":"beforenodedrop","type":"function"},{"sig":"function (tree, parent, node)\n{\n\n}","desc":"Fires before a child is removed from a node in this tree, return false to cancel the remove.","name":"beforeremove","type":"function"},{"sig":"function (_self, checked)\n{\n\n}","desc":"Fires when a node with a checkbox's checked property changes","name":"checkchange","type":"function"},{"sig":"function (node, e)\n{\n\n}","desc":"Fires when a node is clicked","name":"click","type":"function"},{"sig":"function (node)\n{\n\n}","desc":"Fires when a node is collapsed","name":"collapse","type":"function"},{"sig":"function (node, e)\n{\n\n}","desc":"Fires when a node is right clicked","name":"contextmenu","type":"function"},{"sig":"function (node, e)\n{\n\n}","desc":"Fires when a node is double clicked","name":"dblclick","type":"function"},{"sig":"function (node, disabled)\n{\n\n}","desc":"Fires when the disabled status of a node changes","name":"disabledchange","type":"function"},{"sig":"function (_self, node, dd, e)\n{\n\n}","desc":"Fires when a dragged node is dropped on a valid DD target","name":"dragdrop","type":"function"},{"sig":"function (_self, node, e)\n{\n\n}","desc":"Fires when a drag operation is complete","name":"enddrag","type":"function"},{"sig":"function (node)\n{\n\n}","desc":"Fires when a node is expanded","name":"expand","type":"function"},{"sig":"function (tree, parent, node, refNode)\n{\n\n}","desc":"Fires when a new child node is inserted in a node in this tree.","name":"insert","type":"function"},{"sig":"function (node)\n{\n\n}","desc":"Fires when a node is loaded","name":"load","type":"function"},{"sig":"function (tree, node, oldParent, newParent, index)\n{\n\n}","desc":"Fires when a node is moved to a new location in the tree","name":"move","type":"function"},{"sig":"function (dragOverEvent)\n{\n\n}","desc":"Fires when a tree node is being targeted for a drag drop, return false to signal drop not allowed. The dragOverEvent\npassed to handlers has the following properties:<br \/>\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>tree - The TreePanel<\/li>\n<li>target - The node being targeted for the drop<\/li>\n<li>data - The drag data from the drag source<\/li>\n<li>point - The point of the drop - append, above or below<\/li>\n<li>source - The drag source<\/li>\n<li>rawEvent - Raw mouse event<\/li>\n<li>dropNode - Drop node(s) provided by the source.<\/li>\n<li>cancel - Set this to true to signal drop not allowed.<\/li>\n<\/ul>","name":"nodedragover","type":"function"},{"sig":"function (dropEvent)\n{\n\n}","desc":"Fires after a DD object is dropped on a node in this tree. The dropEvent\npassed to handlers has the following properties:<br \/>\n<ul style=\"padding:5px;padding-left:16px;\">\n<li>tree - The TreePanel<\/li>\n<li>target - The node being targeted for the drop<\/li>\n<li>data - The drag data from the drag source<\/li>\n<li>point - The point of the drop - append, above or below<\/li>\n<li>source - The drag source<\/li>\n<li>rawEvent - Raw mouse event<\/li>\n<li>dropNode - Dropped node(s).<\/li>\n<\/ul>","name":"nodedrop","type":"function"},{"sig":"function (tree, parent, node)\n{\n\n}","desc":"Fires when a child node is removed from a node in this tree.","name":"remove","type":"function"},{"sig":"function (_self, node, e)\n{\n\n}","desc":"Fires when a node starts being dragged","name":"startdrag","type":"function"},{"sig":"function (node, text, oldText)\n{\n\n}","desc":"Fires when the text for a node is changed","name":"textchange","type":"function"}]},"Roo.tree.TreeSorter":{"props":[{"desc":"true for case sensitive sort (defaults to false)","name":"caseSensitive","type":"Boolean","memberOf":""},{"desc":"The direction to sort (asc or desc) (defaults to asc)","name":"dir","type":"String","memberOf":""},{"desc":"True to sort leaf nodes under non leaf nodes","name":"folderSort","type":"Boolean","memberOf":""},{"desc":"The attribute used to determine leaf nodes in folder sort (defaults to \"leaf\")","name":"leafAttr","type":"String","memberOf":""},{"desc":"The named attribute on the node to sort by (defaults to text)","name":"property","type":"String","memberOf":""},{"desc":"A custom \"casting\" function used to convert node values before sorting","name":"sortType","type":"Function","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]},"Roo.util.ClickRepeater":{"props":[{"desc":"True if autorepeating should start slowly and accelerate.\n          \"interval\" and \"delay\" are ignored. \"immediate\" is honored.","name":"accelerate","type":"Boolean","memberOf":""},{"desc":"The initial delay before the repeating event begins firing.\nSimilar to an autorepeat key delay.","name":"delay","type":"Number","memberOf":""},{"desc":"The element to act as a button.","name":"el","type":"String\/HTMLElement\/Element","memberOf":""},{"desc":"The interval between firings of the \"click\" event. Default 10 ms.","name":"interval","type":"Number","memberOf":""},{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"desc":"A CSS class name to be applied to the element while pressed.","name":"pressClass","type":"String","memberOf":""},{"desc":"True to prevent the default click event","name":"preventDefault","type":"Boolean","memberOf":""},{"desc":"True to stop the default click event","name":"stopDefault","type":"Boolean","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (_self)\n{\n\n}","desc":"Fires on a specified interval during the time the element is pressed.","name":"click","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the mouse button is depressed.","name":"mousedown","type":"function"},{"sig":"function (_self)\n{\n\n}","desc":"Fires when the mouse key is released.","name":"mouseup","type":"function"}]},"Roo.util.MixedCollection":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":"Roo.util.Observable"},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[{"sig":"function (index, o, key)\n{\n\n}","desc":"Fires when an item is added to the collection.","name":"add","type":"function"},{"sig":"function ()\n{\n\n}","desc":"Fires when the collection is cleared.","name":"clear","type":"function"},{"sig":"function (o, key)\n{\n\n}","desc":"Fires when an item is removed from the collection.","name":"remove","type":"function"},{"sig":"function (key, old, new)\n{\n\n}","desc":"Fires when an item is replaced in the collection.","name":"replace","type":"function"}]},"Roo.util.Observable":{"props":[{"desc":"list of events and functions to call for this object, \nFor example :\n<pre><code>\n    listeners :  { \n       'click' : function(e) {\n           ..... \n        } ,\n        .... \n    } \n  <\/code><\/pre>","name":"listeners","type":"Object","memberOf":""},{"name":"xtype","type":"String","desc":"Xtype name of element"},{"name":"|xns","type":"Object","desc":"Namespace for xtype"},{"name":"style","type":"String","desc":"CSS Style"},{"name":"region","type":"String","desc":"Region "},{"name":"+buildershow","type":"Boolean","desc":"Hide from builder"},{"name":"*prop","type":"String","desc":"Change to property"}],"events":[]}}}