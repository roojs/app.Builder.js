/* gladeui-2.0.vapi generated by vapigen, do not modify. */

namespace Glade {
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class App : GLib.Object {
        [CCode (has_construct_function = false)]
        public App ();
        public static void add_project (Glade.Project project);
        public static int config_save ();
        public static bool do_event (Gdk.Event event);
        public static unowned Glade.App @get ();
        public static unowned Gtk.AccelGroup get_accel_group ();
        public static unowned string get_bin_dir ();
        public static unowned Glade.Catalog get_catalog (string name);
        public static bool get_catalog_version (string name, int major, int minor);
        public static unowned GLib.List<Glade.Catalog> get_catalogs ();
        public static unowned string get_catalogs_dir ();
        public static unowned Glade.Clipboard get_clipboard ();
        public static unowned GLib.KeyFile get_config ();
        public static unowned string get_locale_dir ();
        public static unowned string get_modules_dir ();
        public static unowned string get_pixmaps_dir ();
        public static unowned string get_plugins_dir ();
        public static unowned Glade.Project get_project_by_path (string project_path);
        public static unowned GLib.List<Glade.Project> get_projects ();
        public static unowned Gtk.Widget get_window ();
        [NoWrapper]
        public virtual void glade_reserved1 ();
        [NoWrapper]
        public virtual void glade_reserved2 ();
        [NoWrapper]
        public virtual void glade_reserved3 ();
        [NoWrapper]
        public virtual void glade_reserved4 ();
        [NoWrapper]
        public virtual void glade_reserved5 ();
        [NoWrapper]
        public virtual void glade_reserved6 ();
        public static bool is_project_loaded (string project_path);
        public static void remove_project (Glade.Project project);
        public static void search_docs (string book, string page, string search);
        public static void set_accel_group (Gtk.AccelGroup accel_group);
        public static void set_window (Gtk.Widget window);
        public virtual signal void doc_search (string p0, string p1, string p2);
        public virtual signal void signal_editor_created (GLib.Object p0);
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class BaseEditor : Gtk.VBox, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false)]
        public BaseEditor (GLib.Object container, Glade.Editable main_editable);
        public void add_default_properties (Glade.Widget gchild);
        public void add_editable (Glade.Widget gchild, Glade.EditorPageType page);
        public void add_label (string str);
        public void add_properties (Glade.Widget gchild, bool packing);
        public void append_types (GLib.Type parent_type);
        [NoWrapper]
        public virtual void glade_reserved1 ();
        [NoWrapper]
        public virtual void glade_reserved2 ();
        [NoWrapper]
        public virtual void glade_reserved3 ();
        [NoWrapper]
        public virtual void glade_reserved4 ();
        [NoWrapper]
        public virtual void glade_reserved5 ();
        [NoWrapper]
        public virtual void glade_reserved6 ();
        public unowned Gtk.Widget pack_new_window (string title, string help_markup);
        public void set_show_signal_editor (bool val);
        [NoAccessorMethod]
        public GLib.Object container { owned get; set; }
        public virtual signal unowned GLib.Object build_child (GLib.Object p0, uint p1);
        public virtual signal bool change_type (GLib.Object p0, uint p1);
        public virtual signal void child_selected (GLib.Object p0);
        public virtual signal bool delete_child (GLib.Object p0, GLib.Object p1);
        public virtual signal unowned string get_display_name (GLib.Object p0);
        public virtual signal bool move_child (GLib.Object p0, GLib.Object p1);
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    [Compact]
    public class Catalog {
        public static void destroy_all ();
        public unowned GLib.List<Glade.WidgetAdaptor> get_adaptors ();
        public unowned string get_book ();
        public unowned string get_domain ();
        public unowned string get_icon_prefix ();
        public uint16 get_major_version ();
        public uint16 get_minor_version ();
        public unowned string get_name ();
        public unowned GLib.List<Glade.TargetableVersion> get_targets ();
        public unowned GLib.List<Glade.WidgetGroup> get_widget_groups ();
        public static bool is_loaded (string name);
        public static unowned GLib.List load_all ();
        public bool supports_gtkbuilder ();
        public bool supports_libglade ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class CellRendererIcon : Gtk.CellRendererPixbuf {
        [CCode (has_construct_function = false, type = "GtkCellRenderer*")]
        public CellRendererIcon ();
        public bool get_activatable ();
        public bool get_active ();
        public void set_activatable (bool setting);
        public void set_active (bool setting);
        public bool activatable { get; set; }
        public bool active { get; set; }
        public virtual signal void activate (string path);
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class Clipboard : GLib.Object {
        [CCode (has_construct_function = false)]
        public Clipboard ();
        public void add (GLib.List<Glade.Widget> widgets);
        public void clear ();
        public bool get_has_selection ();
        [NoWrapper]
        public virtual void glade_reserved1 ();
        [NoWrapper]
        public virtual void glade_reserved2 ();
        [NoWrapper]
        public virtual void glade_reserved3 ();
        [NoWrapper]
        public virtual void glade_reserved4 ();
        public unowned GLib.List<Glade.Widget> widgets ();
        public bool has_selection { get; }
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class Command : GLib.Object {
        [CCode (has_construct_function = false)]
        protected Command ();
        public static void add (GLib.List<Glade.Widget> widgets, Glade.Widget parent, Glade.Placeholder placeholder, Glade.Project project, bool pasting);
        public static void add_signal (Glade.Widget glade_widget, Glade.Signal @signal);
        public static void change_signal (Glade.Widget glade_widget, Glade.Signal old_signal, Glade.Signal new_signal);
        public virtual void collapse (Glade.Command other);
        public static unowned Glade.Widget create (Glade.WidgetAdaptor adaptor, Glade.Widget parent, Glade.Placeholder placeholder, Glade.Project project);
        public static void cut (GLib.List<Glade.Widget> widgets);
        public static void @delete (GLib.List<Glade.Widget> widgets);
        public unowned string description ();
        public static void dnd (GLib.List<Glade.Widget> widgets, Glade.Widget parent, Glade.Placeholder placeholder);
        public virtual bool execute ();
        public static int get_group_depth ();
        [NoWrapper]
        public virtual void glade_reserved1 ();
        [NoWrapper]
        public virtual void glade_reserved2 ();
        [NoWrapper]
        public virtual void glade_reserved3 ();
        [NoWrapper]
        public virtual void glade_reserved4 ();
        public int group_id ();
        public static void lock_widget (Glade.Widget widget, Glade.Widget @lock);
        public static void paste (GLib.List<Glade.Widget> widgets, Glade.Widget parent, Glade.Placeholder placeholder, Glade.Project project);
        public static void pop_group ();
        public static void push_group (string fmt);
        public static void remove_signal (Glade.Widget glade_widget, Glade.Signal @signal);
        public static void set_i18n (Glade.Property property, bool translatable, string context, string comment);
        public static void set_name (Glade.Widget glade_widget, string name);
        public static void set_properties (Glade.Property property, GLib.Value old_value, GLib.Value new_value);
        public static void set_properties_list (Glade.Project project, GLib.List<Glade.Property> props);
        public static void set_property (Glade.Property property);
        public static void set_property_value (Glade.Property property, GLib.Value value);
        public virtual bool undo ();
        public virtual bool unifies (Glade.Command other);
        public static void unlock_widget (Glade.Widget widget);
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    [Compact]
    public class Cursor {
        public weak Gdk.Cursor add_widget;
        public weak Gdk.Pixbuf add_widget_pixbuf;
        public weak Gdk.Cursor drag;
        public weak Gdk.Cursor resize_bottom;
        public weak Gdk.Cursor resize_bottom_left;
        public weak Gdk.Cursor resize_bottom_right;
        public weak Gdk.Cursor resize_left;
        public weak Gdk.Cursor resize_right;
        public weak Gdk.Cursor resize_top;
        public weak Gdk.Cursor resize_top_left;
        public weak Gdk.Cursor resize_top_right;
        public weak Gdk.Cursor selector;
        public static unowned Gdk.Pixbuf get_add_widget_pixbuf ();
        public static void init ();
        public static void @set (Glade.Project project, Gdk.Window window, Glade.CursorType type);
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class DesignView : Gtk.VBox, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false, type = "GtkWidget*")]
        public DesignView (Glade.Project project);
        public static unowned Glade.DesignView get_from_project (Glade.Project project);
        public unowned Glade.Project get_project ();
        [NoWrapper]
        public virtual void glade_reserved1 ();
        [NoWrapper]
        public virtual void glade_reserved2 ();
        [NoWrapper]
        public virtual void glade_reserved3 ();
        [NoWrapper]
        public virtual void glade_reserved4 ();
        public Glade.Project project { get; construct; }
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class EPropBool : Glade.EditorProperty, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false)]
        protected EPropBool ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class EPropColor : Glade.EditorProperty, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false)]
        protected EPropColor ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class EPropEnum : Glade.EditorProperty, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false)]
        protected EPropEnum ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class EPropFlags : Glade.EditorProperty, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false)]
        protected EPropFlags ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class EPropNamedIcon : Glade.EditorProperty, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false)]
        protected EPropNamedIcon ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class EPropNumeric : Glade.EditorProperty, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false)]
        protected EPropNumeric ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class EPropObject : Glade.EditorProperty, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false)]
        protected EPropObject ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class EPropObjects : Glade.EditorProperty, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false)]
        protected EPropObjects ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class EPropText : Glade.EditorProperty, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false)]
        protected EPropText ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class EPropUnichar : Glade.EditorProperty, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false)]
        protected EPropUnichar ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class Editor : Gtk.VBox, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false)]
        public Editor ();
        public static unowned Gtk.Widget dialog_for_widget (Glade.Widget widget);
        [NoWrapper]
        public virtual void glade_reserved1 ();
        [NoWrapper]
        public virtual void glade_reserved2 ();
        [NoWrapper]
        public virtual void glade_reserved3 ();
        [NoWrapper]
        public virtual void glade_reserved4 ();
        public void hide_info ();
        public void load_widget (Glade.Widget widget);
        public static bool query_dialog (Glade.Widget widget);
        public void show_info ();
        [NoAccessorMethod]
        public Glade.Widget widget { owned get; set; }
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class EditorProperty : Gtk.HBox, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false)]
        protected EditorProperty ();
        [NoWrapper]
        public virtual void* changed (Glade.Property p2);
        public void commit_no_callback (GLib.Value value);
        [NoWrapper]
        public virtual unowned Gtk.Widget create_input ();
        public unowned Gtk.Widget get_item_label ();
        public unowned Glade.PropertyClass get_pclass ();
        public unowned Glade.Property get_property ();
        [NoWrapper]
        public virtual void glade_reserved1 ();
        [NoWrapper]
        public virtual void glade_reserved2 ();
        [NoWrapper]
        public virtual void glade_reserved3 ();
        [NoWrapper]
        public virtual void glade_reserved4 ();
        public virtual void load (Glade.Property property);
        public void load_by_widget (Glade.Widget widget);
        public bool loading ();
        public static bool show_i18n_dialog (Gtk.Widget parent, string text, string context, string comment, bool translatable);
        public static bool show_object_dialog (Glade.Project project, string title, Gtk.Widget parent, GLib.Type object_type, Glade.Widget exception, out unowned Glade.Widget object);
        public static bool show_resource_dialog (Glade.Project project, Gtk.Widget parent, string filename);
        [NoAccessorMethod]
        public void* property_class { get; construct; }
        [NoAccessorMethod]
        public bool use_command { get; set; }
        public virtual signal void commit (void* p0);
        public virtual signal void value_changed (Glade.Property p0);
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class EditorTable : Gtk.Grid, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Glade.Editable {
        [CCode (has_construct_function = false, type = "GtkWidget*")]
        public EditorTable (Glade.WidgetAdaptor adaptor, Glade.EditorPageType type);
        [NoWrapper]
        public virtual void glade_reserved1 ();
        [NoWrapper]
        public virtual void glade_reserved2 ();
        [NoWrapper]
        public virtual void glade_reserved3 ();
        [NoWrapper]
        public virtual void glade_reserved4 ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    [Compact]
    public class GCSetPropData {
        public GLib.Value new_value;
        public GLib.Value old_value;
        public weak Glade.Property property;
    }
    [CCode (cheader_filename = "gladeui/glade.h", type_id = "glade_glist_get_type ()")]
    [Compact]
    public class GList {
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class GObjectAdaptor : GLib.Object {
        [CCode (has_construct_function = false)]
        protected GObjectAdaptor ();
        [NoAccessorMethod]
        public string book { owned get; construct; }
        [NoAccessorMethod]
        public string catalog { owned get; construct; }
        [NoAccessorMethod]
        public void* cursor { get; }
        [NoAccessorMethod]
        public string generic_name { owned get; construct; }
        [NoAccessorMethod]
        public string icon_name { owned get; construct; }
        [NoAccessorMethod]
        public string name { owned get; construct; }
        [NoAccessorMethod]
        public string special_child_type { owned get; construct; }
        [NoAccessorMethod]
        public string title { owned get; set; }
        [NoAccessorMethod]
        public GLib.Type type { get; construct; }
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class Inspector : Gtk.VBox, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false, type = "GtkWidget*")]
        public Inspector ();
        public unowned Glade.Project get_project ();
        public unowned GLib.List<Glade.Widget> get_selected_items ();
        [NoWrapper]
        public virtual void glade_reserved1 ();
        [NoWrapper]
        public virtual void glade_reserved2 ();
        [NoWrapper]
        public virtual void glade_reserved3 ();
        [NoWrapper]
        public virtual void glade_reserved4 ();
        public void set_project (Glade.Project project);
        [CCode (has_construct_function = false, type = "GtkWidget*")]
        public Inspector.with_project (Glade.Project project);
        public Glade.Project project { get; set; }
        public virtual signal void item_activated ();
        public virtual signal void selection_changed ();
    }
    [CCode (cheader_filename = "gladeui/glade.h", free_function = "glade_name_context_destroy")]
    [Compact]
    public class NameContext {
        [CCode (has_construct_function = false)]
        public NameContext ();
        public bool add_name (string name);
        public unowned string dual_new_name (Glade.NameContext another_context, string base_name);
        public bool has_name (string name);
        public uint n_names ();
        [CCode (has_construct_function = false, type = "gchar*")]
        public NameContext.name (Glade.NameContext context, string base_name);
        public void release_name (string name);
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class Palette : Gtk.VBox, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false, type = "GtkWidget*")]
        public Palette ();
        public Glade.ItemAppearance get_item_appearance ();
        public unowned Glade.Project get_project ();
        public bool get_show_selector_button ();
        public bool get_use_small_item_icons ();
        [NoWrapper]
        public virtual void glade_reserved1 ();
        [NoWrapper]
        public virtual void glade_reserved2 ();
        [NoWrapper]
        public virtual void glade_reserved3 ();
        [NoWrapper]
        public virtual void glade_reserved4 ();
        public void set_item_appearance (Glade.ItemAppearance item_appearance);
        public void set_project (Glade.Project project);
        public void set_show_selector_button (bool show_selector_button);
        public void set_use_small_item_icons (bool use_small_item_icons);
        public Glade.ItemAppearance item_appearance { get; set; }
        public Glade.Project project { get; set; }
        public bool show_selector_button { get; set; }
        public bool use_small_item_icons { get; set; }
        public virtual signal void refresh ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    [Compact]
    public class ParamSpecObjects {
        public void set_type (GLib.Type type);
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class Placeholder : Gtk.Widget, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
        [CCode (has_construct_function = false, type = "GtkWidget*")]
        public Placeholder ();
        public unowned Glade.Widget get_parent ();
        public unowned Glade.Project get_project ();
        [NoWrapper]
        public virtual void glade_reserved1 ();
        [NoWrapper]
        public virtual void glade_reserved2 ();
        [NoWrapper]
        public virtual void glade_reserved3 ();
        [NoWrapper]
        public virtual void glade_reserved4 ();
        public unowned GLib.List<Glade.WidgetAction> packing_actions ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class Project : GLib.Object, Gtk.TreeModel {
        [CCode (has_construct_function = false)]
        public Project ();
        public virtual void add_object (GLib.Object object);
        public bool available_widget_name (Glade.Widget widget, string name);
        public void cancel_load ();
        public void check_reordered (Glade.Widget parent, GLib.List<Glade.Widget> old_order);
        public void command_cut ();
        public void command_delete ();
        public void command_paste (Glade.Placeholder placeholder);
        public void copy_selection ();
        public unowned string display_dependencies ();
        public unowned Glade.WidgetAdaptor get_add_item ();
        public ulong get_file_mtime ();
        public bool get_has_selection ();
        public bool get_modified ();
        public unowned string get_name ();
        public unowned GLib.List<GLib.Object> get_objects ();
        public Glade.PointerMode get_pointer_mode ();
        public bool get_readonly ();
        public void get_target_version (string catalog, int major, int minor);
        public unowned Glade.Widget get_widget_by_name (string name);
        [NoWrapper]
        public virtual void glade_reserved1 ();
        [NoWrapper]
        public virtual void glade_reserved2 ();
        [NoWrapper]
        public virtual void glade_reserved3 ();
        [NoWrapper]
        public virtual void glade_reserved4 ();
        [NoWrapper]
        public virtual void glade_reserved5 ();
        [NoWrapper]
        public virtual void glade_reserved6 ();
        [NoWrapper]
        public virtual void glade_reserved7 ();
        [NoWrapper]
        public virtual void glade_reserved8 ();
        public bool has_object (GLib.Object object);
        public bool is_loading ();
        public bool is_selected (GLib.Object object);
        public static unowned Glade.Project load (string path);
        public bool load_cancelled ();
        public bool load_from_file (string path);
        public virtual unowned Glade.Command next_redo_item ();
        public virtual unowned Glade.Command next_undo_item ();
        public static unowned Gdk.Pixbuf pointer_mode_render_icon (Glade.PointerMode mode, Gtk.IconSize size);
        public void preview (Glade.Widget gwidget);
        public void properties ();
        public void push_progress ();
        public virtual void push_undo (Glade.Command cmd);
        public void queue_selection_changed ();
        public virtual void redo ();
        public unowned Gtk.Widget redo_items ();
        public virtual void remove_object (GLib.Object object);
        public unowned GLib.List<string> required_libs ();
        public void reset_path ();
        public unowned string resource_fullpath (string resource);
        public bool save (string path) throws GLib.Error;
        public void selection_add (GLib.Object object, bool emit_signal);
        public void selection_clear (bool emit_signal);
        public unowned GLib.List selection_get ();
        public void selection_remove (GLib.Object object, bool emit_signal);
        public void selection_set (GLib.Object object, bool emit_signal);
        public void set_add_item (Glade.WidgetAdaptor adaptor);
        public void set_pointer_mode (Glade.PointerMode mode);
        public void set_widget_name (Glade.Widget widget, string name);
        public unowned GLib.List toplevels ();
        public virtual void undo ();
        public unowned Gtk.Widget undo_items ();
        public static void verify_property (Glade.Property property);
        public static void verify_signal (Glade.Widget widget, Glade.Signal @signal);
        public unowned string verify_widget_adaptor (Glade.WidgetAdaptor adaptor, Glade.SupportMask mask);
        public void widget_changed (Glade.Widget gwidget);
        [CCode (has_construct_function = false, type = "gchar*")]
        public Project.widget_name (Glade.Project project, Glade.Widget widget, string base_name);
        public Glade.GObjectAdaptor add_item { get; }
        public bool has_selection { get; }
        public bool modified { get; }
        [NoAccessorMethod]
        public string path { owned get; }
        public Glade.PointerMode pointer_mode { get; }
        [NoAccessorMethod]
        public bool read_only { get; }
        public virtual signal void add_widget (Glade.Widget p0);
        public virtual signal void changed (Glade.Command command, bool forward);
        public virtual signal void close ();
        public virtual signal void load_progress (int p0, int p1);
        public virtual signal void parse_began ();
        public virtual signal void parse_finished ();
        public virtual signal void remove_widget (Glade.Widget p0);
        public virtual signal void selection_changed ();
        public virtual signal void targets_changed ();
        public virtual signal void widget_name_changed (Glade.Widget widget);
        public virtual signal void widget_visibility_changed (Glade.Widget p0, bool p1);
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class Property : GLib.Object {
        [CCode (has_construct_function = false)]
        public Property (Glade.PropertyClass klass, Glade.Widget widget, GLib.Value value);
        public void add_object (GLib.Object object);
        public bool @default ();
        public unowned Glade.Property dup (Glade.Widget widget);
        public bool equals ();
        public bool equals_value (GLib.Value value);
        public void @get ();
        public unowned Glade.PropertyClass get_class ();
        public void get_default (GLib.Value value);
        public bool get_enabled ();
        public bool get_save_always ();
        public bool get_sensitive ();
        public Glade.PropertyState get_state ();
        public unowned string get_support_warning ();
        public void get_va_list (void* vl);
        public void get_value (GLib.Value value);
        public unowned Glade.Widget get_widget ();
        public unowned string i18n_get_comment ();
        public unowned string i18n_get_context ();
        public bool i18n_get_translatable ();
        public void i18n_set_comment (string str);
        public void i18n_set_context (string str);
        public void i18n_set_translatable (bool translatable);
        public GLib.Value inline_value ();
        public void load ();
        public unowned string make_string ();
        public bool original_default ();
        public void original_reset ();
        public static void pop_superuser ();
        public static void push_superuser ();
        public void read (Glade.Project project, Glade.XmlNode node);
        public void remove_object (GLib.Object object);
        public void reset ();
        public bool @set ();
        public void set_enabled (bool enabled);
        public void set_save_always (bool setting);
        public void set_sensitive (bool sensitive, string reason);
        public void set_support_warning (bool disable, string reason);
        public bool set_va_list (void* vl);
        public bool set_value (GLib.Value value);
        public void set_widget (Glade.Widget widget);
        public static bool superuser ();
        public void sync ();
        public void write (Glade.XmlContext context, Glade.XmlNode node);
        public void* @class { get; construct; }
        public bool enabled { get; set; }
        [NoAccessorMethod]
        public string i18n_comment { owned get; set; }
        [NoAccessorMethod]
        public string i18n_context { owned get; set; }
        [NoAccessorMethod]
        public bool i18n_translatable { get; set; }
        public bool sensitive { get; set; }
        public int state { get; }
        public virtual signal void tooltip_changed (string p0, string p1, string p2);
        public virtual signal void value_changed (void* p0, void* p1);
    }
    [CCode (cheader_filename = "gladeui/glade.h", free_function = "glade_property_class_free")]
    [Compact]
    public class PropertyClass {
        [CCode (cname = "glade_property_class_new", has_construct_function = false)]
        public PropertyClass (Glade.WidgetAdaptor adaptor, string id);
        [CCode (cname = "glade_property_class_atk")]
        public bool atk ();
        [CCode (cname = "glade_property_class_clone")]
        public unowned Glade.PropertyClass clone (bool reset_version);
        [CCode (cname = "glade_property_class_common")]
        public bool common ();
        [CCode (cname = "glade_property_class_compare")]
        public int compare (GLib.Value value1, GLib.Value value2);
        [CCode (cname = "glade_property_class_create_type")]
        public unowned string create_type ();
        [CCode (cname = "glade_property_class_custom_layout")]
        public bool custom_layout ();
        [CCode (cname = "glade_property_class_new_from_spec", has_construct_function = false)]
        public PropertyClass.from_spec (Glade.WidgetAdaptor adaptor, GLib.ParamSpec spec);
        [CCode (cname = "glade_property_class_new_from_spec_full", has_construct_function = false)]
        public PropertyClass.from_spec_full (Glade.WidgetAdaptor adaptor, GLib.ParamSpec spec, bool need_handle);
        [CCode (cname = "glade_property_class_get_adaptor")]
        public unowned Glade.WidgetAdaptor get_adaptor ();
        [CCode (cname = "glade_property_class_get_construct_only")]
        public bool get_construct_only ();
        [CCode (cname = "glade_property_class_get_default")]
        public GLib.Value get_default ();
        [CCode (cname = "glade_property_class_get_default_from_spec")]
        public static GLib.Value get_default_from_spec (GLib.ParamSpec spec);
        [CCode (cname = "glade_property_class_get_from_gvalue")]
        public void get_from_gvalue (GLib.Value value);
        [CCode (cname = "glade_property_class_get_ignore")]
        public bool get_ignore ();
        [CCode (cname = "glade_property_class_get_is_packing")]
        public bool get_is_packing ();
        [CCode (cname = "glade_property_class_get_name")]
        public unowned string get_name ();
        [CCode (cname = "glade_property_class_get_original_default")]
        public GLib.Value get_original_default ();
        [CCode (cname = "glade_property_class_get_pspec")]
        public unowned GLib.ParamSpec get_pspec ();
        [CCode (cname = "glade_property_class_get_tooltip")]
        public unowned string get_tooltip ();
        [CCode (cname = "glade_property_class_get_virtual")]
        public bool get_virtual ();
        [CCode (cname = "glade_property_class_id")]
        public unowned string id ();
        [CCode (cname = "glade_property_class_is_object")]
        public bool is_object ();
        [CCode (cname = "glade_property_class_is_visible")]
        public bool is_visible ();
        [CCode (cname = "glade_property_class_load_defaults_from_spec")]
        public void load_defaults_from_spec ();
        [CCode (cname = "glade_property_class_make_adjustment")]
        public unowned Gtk.Adjustment make_adjustment ();
        [CCode (cname = "glade_property_class_make_gvalue")]
        public GLib.Value make_gvalue ();
        [CCode (cname = "glade_property_class_make_gvalue_from_string")]
        public GLib.Value make_gvalue_from_string (string str, Glade.Project project);
        [CCode (cname = "glade_property_class_make_gvalue_from_vl")]
        public GLib.Value make_gvalue_from_vl (void* vl);
        [CCode (cname = "glade_property_class_make_string_from_gvalue")]
        public unowned string make_string_from_gvalue (GLib.Value value);
        [CCode (cname = "glade_property_class_match")]
        public bool match (Glade.PropertyClass comp);
        [CCode (cname = "glade_property_class_multiline")]
        public bool multiline ();
        [CCode (cname = "glade_property_class_needs_sync")]
        public bool needs_sync ();
        [CCode (cname = "glade_property_class_optional")]
        public bool optional ();
        [CCode (cname = "glade_property_class_optional_default")]
        public bool optional_default ();
        [CCode (cname = "glade_property_class_parentless_widget")]
        public bool parentless_widget ();
        [CCode (cname = "glade_property_class_query")]
        public bool query ();
        [CCode (cname = "glade_property_class_save")]
        public bool save ();
        [CCode (cname = "glade_property_class_save_always")]
        public bool save_always ();
        [CCode (cname = "glade_property_class_set_adaptor")]
        public void set_adaptor (Glade.WidgetAdaptor adaptor);
        [CCode (cname = "glade_property_class_set_construct_only")]
        public void set_construct_only (bool construct_only);
        [CCode (cname = "glade_property_class_set_ignore")]
        public void set_ignore (bool ignore);
        [CCode (cname = "glade_property_class_set_is_packing")]
        public void set_is_packing (bool is_packing);
        [CCode (cname = "glade_property_class_set_name")]
        public void set_name (string name);
        [CCode (cname = "glade_property_class_set_pspec")]
        public void set_pspec (GLib.ParamSpec pspec);
        [CCode (cname = "glade_property_class_set_tooltip")]
        public void set_tooltip (string tooltip);
        [CCode (cname = "glade_property_class_set_virtual")]
        public void set_virtual (bool value);
        [CCode (cname = "glade_property_class_set_vl_from_gvalue")]
        public void set_vl_from_gvalue (GLib.Value value, void* vl);
        [CCode (cname = "glade_property_class_set_weights")]
        public static void set_weights (GLib.List<Glade.Property> properties, GLib.Type parent);
        [CCode (cname = "glade_property_class_since_major")]
        public uint16 since_major ();
        [CCode (cname = "glade_property_class_since_minor")]
        public uint16 since_minor ();
        [CCode (cname = "glade_property_class_stock")]
        public bool stock ();
        [CCode (cname = "glade_property_class_stock_icon")]
        public bool stock_icon ();
        [CCode (cname = "glade_property_class_themed_icon")]
        public bool themed_icon ();
        [CCode (cname = "glade_property_class_transfer_on_paste")]
        public bool transfer_on_paste ();
        [CCode (cname = "glade_property_class_translatable")]
        public bool translatable ();
        [CCode (cname = "glade_property_class_update_from_node")]
        public static bool update_from_node (Glade.XmlNode node, GLib.Type object_type, out unowned Glade.PropertyClass property_class, string domain);
        [CCode (cname = "glade_property_class_void_value")]
        public bool void_value (GLib.Value value);
        [CCode (cname = "glade_property_class_weight")]
        public double weight ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    [Compact]
    public class PropertyKlass {
        public weak GLib.Callback dup;
        public weak GLib.Callback equals_value;
        public weak GLib.Callback get_value;
        public weak GLib.Callback glade_reserved1;
        public weak GLib.Callback glade_reserved2;
        public weak GLib.Callback glade_reserved3;
        public weak GLib.Callback glade_reserved4;
        public weak GLib.Callback glade_reserved5;
        public weak GLib.Callback glade_reserved6;
        public weak GLib.Callback load;
        public weak GLib.ObjectClass parent_class;
        public weak GLib.Callback set_value;
        public weak GLib.Callback sync;
        public weak GLib.Callback tooltip_changed;
        public weak GLib.Callback value_changed;
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class Signal : GLib.Object {
        [CCode (has_construct_function = false)]
        public Signal (Glade.SignalClass sig_class, string handler, string userdata, bool after, bool swapped);
        public unowned Glade.Signal clone ();
        public bool equal (Glade.Signal sig2);
        public bool get_after ();
        public unowned Glade.SignalClass get_class ();
        public unowned string get_handler ();
        public unowned string get_name ();
        public unowned string get_support_warning ();
        public bool get_swapped ();
        public unowned string get_userdata ();
        public static unowned Glade.Signal read (Glade.XmlNode node, Glade.WidgetAdaptor adaptor);
        public void set_after (bool after);
        public void set_handler (string handler);
        public void set_support_warning (string support_warning);
        public void set_swapped (bool swapped);
        public void set_userdata (string userdata);
        public void write (Glade.XmlContext context, Glade.XmlNode node);
        public bool after { get; set; }
        public void* @class { get; construct; }
        public string handler { get; set; }
        public string support_warning { get; set; }
        public bool swapped { get; set; }
        public string userdata { get; set; }
    }
    [CCode (cheader_filename = "gladeui/glade.h", free_function = "glade_signal_class_free")]
    [Compact]
    public class SignalClass {
        [CCode (cname = "glade_signal_class_new", has_construct_function = false)]
        public SignalClass (Glade.WidgetAdaptor adaptor, GLib.Type for_type, uint signal_id);
        [CCode (cname = "glade_signal_class_get_adaptor")]
        public unowned Glade.WidgetAdaptor get_adaptor ();
        [CCode (cname = "glade_signal_class_get_flags")]
        public GLib.SignalFlags get_flags ();
        [CCode (cname = "glade_signal_class_get_name")]
        public unowned string get_name ();
        [CCode (cname = "glade_signal_class_set_since")]
        public void set_since (uint16 since_major, uint16 since_minor);
        [CCode (cname = "glade_signal_class_since_major")]
        public uint16 since_major ();
        [CCode (cname = "glade_signal_class_since_minor")]
        public uint16 since_minor ();
        [CCode (cname = "glade_signal_class_update_from_node")]
        public void update_from_node (Glade.XmlNode node, string domain);
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class SignalEditor : Gtk.VBox, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
        [CCode (has_construct_function = false)]
        public SignalEditor ();
        public void construct_signals_list ();
        public void enable_dnd (bool enabled);
        public unowned Glade.Widget get_widget ();
        [NoWrapper]
        public virtual void glade_reserved1 ();
        [NoWrapper]
        public virtual void glade_reserved2 ();
        [NoWrapper]
        public virtual void glade_reserved3 ();
        [NoWrapper]
        public virtual void glade_reserved4 ();
        [NoWrapper]
        public virtual void glade_reserved5 ();
        public void load_widget (Glade.Widget widget);
        [NoAccessorMethod]
        public Gtk.TreeModel glade_widget { owned get; set; }
        public virtual signal unowned string[] callback_suggestions (Glade.Signal @signal);
        public virtual signal void signal_activated (Glade.Signal p0);
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    [Compact]
    public class SignalKlass {
        public weak GLib.Callback glade_reserved1;
        public weak GLib.Callback glade_reserved2;
        public weak GLib.Callback glade_reserved3;
        public weak GLib.Callback glade_reserved4;
        public weak GLib.ObjectClass object_class;
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class SignalModel : GLib.Object, Gtk.TreeModel, Gtk.TreeDragSource {
        [CCode (has_construct_function = false, type = "GtkTreeModel*")]
        public SignalModel (Glade.Widget widget, GLib.HashTable signals);
        public void* signals { construct; }
        public Glade.Widget widget { construct; }
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    [Compact]
    public class TargetableVersion {
        public int major;
        public int minor;
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class Widget : GLib.InitiallyUnowned {
        [CCode (has_construct_function = false)]
        protected Widget ();
        public virtual void add_child (Glade.Widget child, bool at_mouse);
        public void add_prop_ref (Glade.Property property);
        public bool add_verify (Glade.Widget child, bool user_feedback);
        public void child_get_property (Glade.Widget child, string property_name, GLib.Value value);
        public void child_set_property (Glade.Widget child, string property_name, GLib.Value value);
        public void copy_properties (Glade.Widget template_widget, bool copy_parentless, bool exact);
        public void copy_signals (Glade.Widget template_widget);
        public unowned Glade.EditorProperty create_editor_property (string property, bool packing, bool use_command);
        public unowned Glade.Widget dup (bool exact);
        public unowned GLib.List<Glade.Property> dup_properties (GLib.List<Glade.Property> template_props, bool as_load, bool copy_parentless, bool exact);
        public virtual bool event (Gdk.Event event);
        public unowned Glade.Widget find_child (string name);
        public unowned string generate_path_name ();
        public unowned Glade.WidgetAction get_action (string action_path);
        public unowned GLib.List<Glade.WidgetAction> get_actions ();
        public unowned Glade.WidgetAdaptor get_adaptor ();
        public unowned GLib.List<Glade.Widget> get_children ();
        public static unowned Glade.Widget get_from_gobject (void* object);
        public unowned string get_internal ();
        public unowned Glade.Widget get_locker ();
        public unowned string get_name ();
        public unowned GLib.Object get_object ();
        public unowned Glade.WidgetAction get_pack_action (string action_path);
        public unowned GLib.List<Glade.WidgetAction> get_pack_actions ();
        public unowned Glade.Property get_pack_property (string id_property);
        public unowned GLib.List<Glade.Property> get_packing_properties ();
        public unowned Glade.Widget get_parent ();
        public unowned GLib.List<Glade.Widget> get_parentless_reffed_widgets ();
        public unowned Glade.Property get_parentless_widget_ref ();
        public unowned Glade.Project get_project ();
        public unowned GLib.List<Glade.Property> get_properties ();
        public unowned Glade.Property get_property (string id_property);
        public unowned GLib.List<Glade.Signal> get_signal_list ();
        public unowned Gtk.TreeModel get_signal_model ();
        public unowned Glade.Widget get_toplevel ();
        [NoWrapper]
        public virtual void glade_reserved1 ();
        [NoWrapper]
        public virtual void glade_reserved2 ();
        [NoWrapper]
        public virtual void glade_reserved3 ();
        [NoWrapper]
        public virtual void glade_reserved4 ();
        [NoWrapper]
        public virtual void glade_reserved5 ();
        [NoWrapper]
        public virtual void glade_reserved6 ();
        [NoWrapper]
        public virtual void glade_reserved7 ();
        [NoWrapper]
        public virtual void glade_reserved8 ();
        public bool has_decendant (GLib.Type type);
        public void hide ();
        public bool in_project ();
        public bool is_ancestor (Glade.Widget ancestor);
        public unowned GLib.List<Glade.Widget> list_locked_widgets ();
        public unowned GLib.List list_prop_refs ();
        public unowned GLib.PtrArray list_signal_handlers (string signal_name);
        public void @lock (Glade.Widget locked);
        public void object_get_property (string property_name, GLib.Value value);
        public void object_set_property (string property_name, GLib.Value value);
        public bool pack_property_default (string id_property);
        public bool pack_property_get (string id_property);
        public bool pack_property_reset (string id_property);
        public bool pack_property_set (string id_property);
        public bool pack_property_set_enabled (string id_property, bool enabled);
        public bool pack_property_set_save_always (string id_property, bool setting);
        public bool pack_property_set_sensitive (string id_property, bool sensitive, string reason);
        public unowned string pack_property_string (string id_property, GLib.Value value);
        public bool placeholder_relation (Glade.Widget widget);
        public static void pop_superuser ();
        public bool property_default (string id_property);
        public bool property_get (string id_property);
        public bool property_original_default (string id_property);
        public bool property_reset (string id_property);
        public bool property_set (string id_property);
        public bool property_set_enabled (string id_property, bool enabled);
        public bool property_set_save_always (string id_property, bool setting);
        public bool property_set_sensitive (string id_property, bool sensitive, string reason);
        public unowned string property_string (string id_property, GLib.Value value);
        public static void push_superuser ();
        public static unowned Glade.Widget read (Glade.Project project, Glade.Widget parent, Glade.XmlNode node, string @internal);
        public void read_child (Glade.XmlNode node);
        public void rebuild ();
        public virtual void remove_child (Glade.Widget child);
        public void remove_prop_ref (Glade.Property property);
        public void remove_property (string id_property);
        public void replace (GLib.Object old_object, GLib.Object new_object);
        [NoWrapper]
        public virtual void replace_child (GLib.Object p2, GLib.Object p3);
        public bool set_action_sensitive (string action_path, bool sensitive);
        public bool set_action_visible (string action_path, bool sensitive);
        public void set_child_type_from_node (GLib.Object child, Glade.XmlNode node);
        public void set_in_project (bool in_project);
        public void set_internal (string @internal);
        public void set_name (string name);
        public bool set_pack_action_sensitive (string action_path, bool sensitive);
        public bool set_pack_action_visible (string action_path, bool sensitive);
        public void set_packing_properties (Glade.Widget container);
        public void set_parent (Glade.Widget parent);
        public void set_project (Glade.Project project);
        public void set_support_warning (string warning);
        public void show ();
        public static bool superuser ();
        public void unlock ();
        public void write (Glade.XmlContext context, Glade.XmlNode node);
        public void write_child (Glade.Widget child, Glade.XmlContext context, Glade.XmlNode node);
        public void write_placeholder (GLib.Object object, Glade.XmlContext context, Glade.XmlNode node);
        public void write_signals (Glade.XmlContext context, Glade.XmlNode node);
        public void write_special_child_prop (GLib.Object object, Glade.XmlContext context, Glade.XmlNode node);
        public Glade.GObjectAdaptor adaptor { get; construct; }
        [NoAccessorMethod]
        public bool anarchist { get; construct; }
        public string @internal { get; set construct; }
        public string internal_name { construct; }
        public string name { get; set construct; }
        [NoAccessorMethod]
        public GLib.Object object { owned get; set construct; }
        public Glade.Widget parent { get; set construct; }
        public Glade.Project project { get; set construct; }
        public void* properties { get; construct; }
        [NoAccessorMethod]
        public int reason { get; construct; }
        [NoAccessorMethod]
        public string support_warning { owned get; }
        public Glade.Widget template { construct; }
        public bool template_exact { construct; }
        [NoAccessorMethod]
        public int toplevel_height { get; set; }
        [NoAccessorMethod]
        public int toplevel_width { get; set; }
        [NoAccessorMethod]
        public bool visible { get; }
        public virtual signal void add_signal_handler (Glade.Signal p0);
        public virtual signal bool button_press_event (Gdk.Event p0);
        public virtual signal bool button_release_event (Gdk.Event p0);
        public virtual signal void change_signal_handler (Glade.Signal p0);
        public virtual signal bool motion_notify_event (Gdk.Event p0);
        public virtual signal void remove_signal_handler (Glade.Signal p0);
        public virtual signal void support_changed ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public class WidgetAction : GLib.Object {
        [CCode (has_construct_function = false)]
        protected WidgetAction ();
        public static unowned Glade.WidgetActionClass class_new (string path);
        [CCode (cname = "glade_widget_action_class_clone")]
        public class unowned Glade.WidgetActionClass clone ();
        [CCode (cname = "glade_widget_action_class_free")]
        public class void free ();
        public unowned GLib.List<Glade.WidgetAction> get_children ();
        public unowned Glade.WidgetActionClass get_class ();
        public bool get_sensitive ();
        public bool get_visible ();
        [NoWrapper]
        public virtual void glade_reserved1 ();
        [NoWrapper]
        public virtual void glade_reserved2 ();
        [NoWrapper]
        public virtual void glade_reserved3 ();
        [NoWrapper]
        public virtual void glade_reserved4 ();
        [CCode (cname = "glade_widget_action_class_set_important")]
        public class void set_important (bool important);
        [CCode (cname = "glade_widget_action_class_set_label")]
        public class void set_label (string label);
        public void set_sensitive (bool sensitive);
        [CCode (cname = "glade_widget_action_class_set_stock")]
        public class void set_stock (string stock);
        public void set_visible (bool visible);
        public void* @class { construct; }
        public bool sensitive { get; set; }
        public bool visible { get; set; }
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    [Compact]
    public class WidgetActionClass {
        public weak GLib.List<Glade.WidgetAction> actions;
        public weak string id;
        public bool important;
        public weak string label;
        public weak string path;
        public weak string stock;
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    [Compact]
    public class WidgetAdaptor {
        public weak GLib.Object parent_instance;
        public weak Glade.WidgetAdaptorClass priv;
        public void action_activate (GLib.Object object, string action_path);
        public bool action_add (string action_path, string label, string stock, bool important);
        public bool action_remove (string action_path);
        public unowned Gtk.Widget action_submenu (GLib.Object object, string action_path);
        public unowned GLib.List<Glade.WidgetAction> actions_new ();
        public void add (GLib.Object container, GLib.Object child);
        public bool add_verify (GLib.Object container, GLib.Object child, bool user_feedback);
        public void child_action_activate (GLib.Object container, GLib.Object object, string action_path);
        public void child_get_property (GLib.Object container, GLib.Object child, string property_name, GLib.Value value);
        public void child_set_property (GLib.Object container, GLib.Object child, string property_name, GLib.Value value);
        public bool child_verify_property (GLib.Object container, GLib.Object child, string property_name, GLib.Value value);
        public unowned GLib.Object construct_object (uint n_parameters, GLib.Parameter parameters);
        public unowned Glade.Editable create_editable (Glade.EditorPageType type);
        public unowned Glade.EditorProperty create_eprop (Glade.PropertyClass klass, bool use_command);
        public unowned Glade.EditorProperty create_eprop_by_name (string property_id, bool packing, bool use_command);
        public static unowned Glade.Widget create_internal (Glade.Widget parent, GLib.Object internal_object, string internal_name, string parent_name, bool anarchist, Glade.CreateReason reason);
        public static unowned Glade.Widget create_widget_real (bool query, ...);
        public GLib.Parameter default_params (bool @construct, uint n_params);
        public bool depends (Glade.Widget widget, Glade.Widget another);
        public static unowned Glade.WidgetAdaptor from_catalog (Glade.Catalog catalog, Glade.XmlNode class_node, GLib.Module module);
        public unowned Glade.WidgetAdaptor from_pspec (GLib.ParamSpec spec);
        public static unowned Glade.WidgetAdaptor get_by_name (string name);
        public static unowned Glade.WidgetAdaptor get_by_type (GLib.Type type);
        public unowned GLib.List<Glade.WidgetAdaptor> get_children (GLib.Object container);
        public unowned string get_generic_name ();
        public unowned string get_icon_name ();
        public unowned GLib.Object get_internal_child (GLib.Object object, string internal_name);
        public unowned string get_missing_icon ();
        public unowned string get_name ();
        public GLib.Type get_object_type ();
        public unowned Glade.PropertyClass get_pack_property_class (string name);
        public unowned string get_packing_default (Glade.WidgetAdaptor container_adaptor, string id);
        public unowned GLib.List<Glade.Property> get_packing_props ();
        public unowned Glade.WidgetAdaptor get_parent_adaptor ();
        public unowned GLib.List<Glade.Property> get_properties ();
        public void get_property (GLib.Object object, string property_name, GLib.Value value);
        public unowned Glade.PropertyClass get_property_class (string name);
        public unowned Glade.SignalClass get_signal_class (string name);
        public unowned GLib.List<Glade.Signal> get_signals ();
        public unowned string get_title ();
        public bool has_child (GLib.Object container, GLib.Object child);
        public bool has_internal_children ();
        public bool is_container ();
        public static unowned GLib.List<Glade.WidgetAdaptor> list_adaptors ();
        public bool pack_action_add (string action_path, string label, string stock, bool important);
        public bool pack_action_remove (string action_path);
        public unowned GLib.List<Glade.WidgetAction> pack_actions_new ();
        public void post_create (GLib.Object object, Glade.CreateReason reason);
        public bool query ();
        public void read_child (Glade.Widget widget, Glade.XmlNode node);
        public void read_widget (Glade.Widget widget, Glade.XmlNode node);
        public void register ();
        public void remove (GLib.Object container, GLib.Object child);
        public void replace_child (GLib.Object container, GLib.Object old_obj, GLib.Object new_obj);
        public void set_property (GLib.Object object, string property_name, GLib.Value value);
        public unowned string string_from_value (Glade.PropertyClass klass, GLib.Value value);
        public bool verify_property (GLib.Object object, string property_name, GLib.Value value);
        public void write_child (Glade.Widget widget, Glade.XmlContext context, Glade.XmlNode node);
        public void write_widget (Glade.Widget widget, Glade.XmlContext context, Glade.XmlNode node);
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    [Compact]
    public class WidgetAdaptorClass {
        public weak Glade.ActionActivateFunc action_activate;
        public weak Glade.ActionSubmenuFunc action_submenu;
        public weak Glade.AddChildFunc add;
        public weak Glade.AddChildVerifyFunc add_verify;
        public weak Glade.ChildActionActivateFunc child_action_activate;
        public weak Glade.ChildGetPropertyFunc child_get_property;
        public weak Glade.ChildSetPropertyFunc child_set_property;
        public weak Glade.ChildVerifyPropertyFunc child_verify_property;
        public weak Glade.ConstructObjectFunc construct_object;
        public weak Glade.CreateEditableFunc create_editable;
        public weak Glade.CreateEPropFunc create_eprop;
        public weak Glade.CreateWidgetFunc create_widget;
        public weak Glade.PostCreateFunc deep_post_create;
        public int16 default_height;
        public int16 default_width;
        public weak Glade.DependsFunc depends;
        public uint deprecated;
        public weak Glade.GetChildrenFunc get_children;
        public weak Glade.GetInternalFunc get_internal_child;
        public weak Glade.GetPropertyFunc get_property;
        public weak GLib.Callback glade_reserved1;
        public weak GLib.Callback glade_reserved2;
        public weak GLib.Callback glade_reserved3;
        public weak GLib.Callback glade_reserved4;
        public weak GLib.Callback glade_reserved5;
        public weak GLib.Callback glade_reserved6;
        public weak GLib.Callback glade_reserved7;
        public weak GLib.Callback glade_reserved8;
        public weak GLib.ObjectClass parent_class;
        public weak Glade.PostCreateFunc post_create;
        public weak Glade.ReadWidgetFunc read_child;
        public weak Glade.ReadWidgetFunc read_widget;
        public weak Glade.RemoveChildFunc remove;
        public weak Glade.ReplaceChildFunc replace_child;
        public weak Glade.SetPropertyFunc set_property;
        public weak Glade.StringFromValueFunc string_from_value;
        public uint toplevel;
        public uint use_placeholders;
        public weak Glade.VerifyPropertyFunc verify_property;
        public uint16 version_since_major;
        public uint16 version_since_minor;
        public weak Glade.WriteWidgetFunc write_child;
        public weak Glade.WriteWidgetFunc write_widget;
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    [Compact]
    public class WidgetGroup {
        public unowned GLib.List<Glade.WidgetAdaptor> get_adaptors ();
        public bool get_expanded ();
        public unowned string get_name ();
        public unowned string get_title ();
    }
    [CCode (cheader_filename = "gladeui/glade.h", free_function = "glade_xml_context_destroy")]
    [Compact]
    public class XmlContext {
        [CCode (has_construct_function = false)]
        public XmlContext (Glade.XmlDoc doc, string name_space);
        public void free ();
        [CCode (has_construct_function = false)]
        public XmlContext.from_path (string full_path, string nspace, string root_name);
        public unowned Glade.XmlDoc get_doc ();
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    [Compact]
    public class XmlDoc {
        [CCode (has_construct_function = false)]
        public XmlDoc ();
        public unowned Glade.XmlNode get_root ();
        public int save (string full_path);
        public void set_root (Glade.XmlNode node);
    }
    [CCode (cheader_filename = "gladeui/glade.h", copy_function = "glade_xml_node_copy")]
    [Compact]
    public class XmlNode {
        [CCode (has_construct_function = false)]
        public XmlNode (Glade.XmlContext context, string name);
        public void append_child (Glade.XmlNode child);
        [CCode (has_construct_function = false)]
        public XmlNode.comment (Glade.XmlContext context, string comment);
        public unowned Glade.XmlNode copy ();
        public void @delete ();
        public unowned Glade.XmlNode get_children ();
        public unowned Glade.XmlNode get_children_with_comments ();
        public unowned string get_name ();
        public unowned Glade.XmlNode get_parent ();
        public bool is_comment ();
        public unowned Glade.XmlNode next ();
        public unowned Glade.XmlNode next_with_comments ();
        public void remove ();
        public void set_property_boolean (string name, bool value);
        public void set_property_string (string name, string str);
        public bool verify (string name);
        public bool verify_silent (string name);
    }
    [CCode (cheader_filename = "gladeui/glade.h")]
    public interface Editable : Gtk.Widget {
        public void block ();
        public abstract void load (Glade.Widget widget);
        public unowned Glade.Widget loaded_widget ();
        public bool loading ();
        public abstract void set_show_name (bool show_name);
        public void unblock ();
    }
    [CCode (cheader_filename = "gladeui/glade.h", cprefix = "GLADE_CREATE_")]
    public enum CreateReason {
        USER,
        COPY,
        LOAD,
        REBUILD
    }
    [CCode (cheader_filename = "gladeui/glade.h", cprefix = "GLADE_CURSOR_", has_type_id = false)]
    public enum CursorType {
        SELECTOR,
        ADD_WIDGET,
        RESIZE_TOP_LEFT,
        RESIZE_TOP_RIGHT,
        RESIZE_BOTTOM_LEFT,
        RESIZE_BOTTOM_RIGHT,
        RESIZE_LEFT,
        RESIZE_RIGHT,
        RESIZE_TOP,
        RESIZE_BOTTOM,
        DRAG
    }
    [CCode (cheader_filename = "gladeui/glade.h", cprefix = "GLADE_PAGE_", has_type_id = false)]
    public enum EditorPageType {
        GENERAL,
        COMMON,
        PACKING,
        ATK,
        QUERY
    }
    [CCode (cheader_filename = "gladeui/glade.h", cprefix = "GLADE_ITEM_")]
    public enum ItemAppearance {
        ICON_AND_LABEL,
        ICON_ONLY,
        LABEL_ONLY
    }
    [CCode (cheader_filename = "gladeui/glade.h", cprefix = "")]
    public enum PointerMode {
        select,
        add,
        drag_resize,
        margin_edit,
        align_edit
    }
    [CCode (cheader_filename = "gladeui/glade.h", cprefix = "GLADE_PROJECT_MODEL_", has_type_id = false)]
    public enum ProjectModelColumns {
        COLUMN_ICON_NAME,
        COLUMN_NAME,
        COLUMN_TYPE_NAME,
        COLUMN_OBJECT,
        COLUMN_MISC,
        N_COLUMNS
    }
    [CCode (cheader_filename = "gladeui/glade.h", cprefix = "GLADE_STATE_", has_type_id = false)]
    public enum PropertyState {
        NORMAL,
        CHANGED,
        UNSUPPORTED,
        SUPPORT_DISABLED
    }
    [CCode (cheader_filename = "gladeui/glade.h", cprefix = "GLADE_SIGNAL_", has_type_id = false)]
    public enum SignalModelColumns {
        COLUMN_NAME,
        COLUMN_SHOW_NAME,
        COLUMN_HANDLER,
        COLUMN_OBJECT,
        COLUMN_SWAP,
        COLUMN_AFTER,
        COLUMN_TOOLTIP,
        COLUMN_SIGNAL,
        N_COLUMNS
    }
    [CCode (cheader_filename = "gladeui/glade.h", cprefix = "")]
    public enum Stock {
        About,
        Add,
        Apply,
        Ascending,
        Back,
        BestFit,
        Bold,
        _Bottom,
        CDROM,
        Cancel,
        Center,
        Clear,
        Close,
        Color,
        Connect,
        Convert,
        Copy,
        Cut,
        DecreaseIndent,
        Delete,
        Descending,
        Discard,
        Disconnect,
        Down,
        Edit,
        Error,
        Execute,
        File,
        Fill,
        Find,
        FindandReplace,
        First,
        Floppy,
        Font,
        Forward,
        Fullscreen,
        HardDisk,
        Help,
        Home,
        IncreaseIndent,
        Index,
        Information,
        Italic,
        Jumpto,
        Landscape,
        Last,
        LeaveFullscreen,
        Left,
        Network,
        New,
        Next,
        No,
        NormalSize,
        OK,
        Open,
        PageSetup,
        Paste,
        Pause,
        Play,
        Portrait,
        Preferences,
        Previous,
        Print,
        PrintPreview,
        Properties,
        Question,
        Quit,
        Record,
        Redo,
        Refresh,
        Remove,
        Reverselandscape,
        Reverseportrait,
        Revert,
        Rewind,
        Right,
        Save,
        SaveAs,
        SelectAll,
        SpellCheck,
        Stop,
        Strikethrough,
        Top,
        Undelete,
        Underline,
        Undo,
        Up,
        Warning,
        Yes,
        ZoomIn,
        ZoomOut
    }
    [CCode (cheader_filename = "gladeui/glade.h", cprefix = "")]
    public enum StockImage {
        About,
        Add,
        Apply,
        Ascending,
        Back,
        BestFit,
        Bold,
        Bottom,
        CDROM,
        Cancel,
        Center,
        Clear,
        Close,
        Color,
        Connect,
        Convert,
        Copy,
        Cut,
        DecreaseIndent,
        Delete,
        Descending,
        Discard,
        Disconnect,
        Down,
        Edit,
        Error,
        Execute,
        File,
        Fill,
        Find,
        FindandReplace,
        First,
        Floppy,
        Font,
        Forward,
        Fullscreen,
        HardDisk,
        Help,
        Home,
        IncreaseIndent,
        Index,
        Information,
        Italic,
        Jumpto,
        Landscape,
        Last,
        LeaveFullscreen,
        Left,
        Network,
        New,
        Next,
        No,
        NormalSize,
        OK,
        Open,
        PageSetup,
        Paste,
        Pause,
        Play,
        Portrait,
        Preferences,
        Previous,
        Print,
        PrintPreview,
        Properties,
        Question,
        Quit,
        Record,
        Redo,
        Refresh,
        Remove,
        Reverselandscape,
        Reverseportrait,
        Revert,
        Rewind,
        Right,
        Save,
        SaveAs,
        SelectAll,
        SpellCheck,
        Stop,
        Strikethrough,
        Top,
        Undelete,
        Underline,
        Undo,
        Up,
        Warning,
        Yes,
        ZoomIn,
        ZoomOut,
        gtk_color_picker,
        gtk_dialog_authentication,
        gtk_directory,
        gtk_dnd,
        gtk_dnd_multiple,
        gtk_file,
        gtk_missing_image
    }
    [CCode (cheader_filename = "gladeui/glade.h", cprefix = "GLADE_SUPPORT_", has_type_id = false)]
    public enum SupportMask {
        OK,
        DEPRECATED,
        MISMATCH
    }
    [CCode (cheader_filename = "gladeui/glade.h", cprefix = "GLADE_UI_", has_type_id = false)]
    public enum UIMessageType {
        INFO,
        WARN,
        ERROR,
        ARE_YOU_SURE,
        YES_OR_NO
    }
    [CCode (cheader_filename = "gladeui/glade.h", cprefix = "GLADE_FILE_DIALOG_ACTION_", has_type_id = false)]
    public enum UtilFileDialogType {
        OPEN,
        SAVE
    }
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate void ActionActivateFunc (Glade.WidgetAdaptor adaptor, GLib.Object object, string action_path);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate unowned Gtk.Widget ActionSubmenuFunc (Glade.WidgetAdaptor adaptor, GLib.Object object, string action_path);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate void AddChildFunc (Glade.WidgetAdaptor adaptor, GLib.Object parent, GLib.Object child);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate bool AddChildVerifyFunc (Glade.WidgetAdaptor adaptor, GLib.Object parent, GLib.Object child, bool user_feedback);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate void CatalogInitFunc (string name);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate void ChildActionActivateFunc (Glade.WidgetAdaptor adaptor, GLib.Object container, GLib.Object object, string action_path);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate void ChildGetPropertyFunc (Glade.WidgetAdaptor adaptor, GLib.Object container, GLib.Object child, string property_name, GLib.Value value);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate void ChildSetPropertyFunc (Glade.WidgetAdaptor adaptor, GLib.Object container, GLib.Object child, string property_name, GLib.Value value);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate bool ChildVerifyPropertyFunc (Glade.WidgetAdaptor adaptor, GLib.Object container, GLib.Object child, string property_name, GLib.Value value);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate unowned GLib.Object ConstructObjectFunc (Glade.WidgetAdaptor adaptor, uint n_parameters, GLib.Parameter parameters);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate unowned Glade.EditorProperty CreateEPropFunc (Glade.WidgetAdaptor adaptor, Glade.PropertyClass klass, bool use_command);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate unowned Glade.Editable CreateEditableFunc (Glade.WidgetAdaptor adaptor, Glade.EditorPageType type);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate unowned Glade.Widget CreateWidgetFunc (Glade.WidgetAdaptor adaptor, string first_property_name, void* var_args);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate bool DependsFunc (Glade.WidgetAdaptor adaptor, Glade.Widget widget, Glade.Widget another);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate unowned GLib.List<Glade.WidgetAdaptor> GetChildrenFunc (Glade.WidgetAdaptor adaptor, GLib.Object container);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate unowned GLib.Object GetInternalFunc (Glade.WidgetAdaptor adaptor, GLib.Object parent, string name);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate void GetPropertyFunc (Glade.WidgetAdaptor adaptor, GLib.Object object, string property_name, GLib.Value value);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate void PostCreateFunc (Glade.WidgetAdaptor adaptor, GLib.Object object, Glade.CreateReason reason);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate void ReadWidgetFunc (Glade.WidgetAdaptor adaptor, Glade.Widget widget, Glade.XmlNode node);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate void RemoveChildFunc (Glade.WidgetAdaptor adaptor, GLib.Object parent, GLib.Object child);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate void ReplaceChildFunc (Glade.WidgetAdaptor adaptor, GLib.Object container, GLib.Object old_obj, GLib.Object new_obj);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate void SetPropertyFunc (Glade.WidgetAdaptor adaptor, GLib.Object object, string property_name, GLib.Value value);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate unowned string StringFromValueFunc (Glade.WidgetAdaptor adaptor, Glade.PropertyClass klass, GLib.Value value);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate bool VerifyPropertyFunc (Glade.WidgetAdaptor adaptor, GLib.Object object, string property_name, GLib.Value value);
    [CCode (cheader_filename = "gladeui/glade.h", has_target = false)]
    public delegate void WriteWidgetFunc (Glade.WidgetAdaptor adaptor, Glade.Widget widget, Glade.XmlContext context, Glade.XmlNode node);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string DEVHELP_FALLBACK_ICON_FILE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string DEVHELP_ICON_NAME;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string ENV_CATALOG_PATH;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string ENV_MODULE_PATH;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string GPC_OBJECT_DELIMITER;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const int GPC_PROPERTY_NAMELEN;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const int GTKBUILDER_VERSIONING_BASE_MAJOR;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const int GTKBUILDER_VERSIONING_BASE_MINOR;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_ACTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_ACTIONS;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_ACTION_ACTIVATE_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_ACTION_SUBMENU_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_ADAPTOR;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_ADD_CHILD_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_ADD_CHILD_VERIFY_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_ANARCHIST;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_ATK_PROPERTY;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_BOOK;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_BUILDER_SINCE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_CHILD_ACTION_ACTIVATE_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_CHILD_GET_PROP_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_CHILD_PROPERTY;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_CHILD_SET_PROP_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_CHILD_VERIFY_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_COMMENT;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_COMMON;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_CONSTRUCTOR_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_CONSTRUCT_OBJECT_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_CONSTRUCT_ONLY;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_CONTEXT;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_CREATE_EDITABLE_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_CREATE_EPROP_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_CREATE_TYPE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_CREATE_WIDGET_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_CUSTOM_LAYOUT;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_DEEP_POST_CREATE_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_DEFAULT;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_DEFAULT_HEIGHT;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_DEFAULT_PALETTE_STATE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_DEFAULT_WIDTH;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_DEPENDS;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_DEPENDS_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_DEPRECATED;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_DISABLED;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_DISPLAYABLE_VALUES;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_DOMAIN;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_EDITABLE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_EVENT_HANDLER_CONNECTED;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_EXPANDED;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_FALSE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_GENERIC_NAME;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_GET_CHILDREN_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_GET_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_GET_INTERNAL_CHILD_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_GET_TYPE_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_GLADE_CATALOG;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_GLADE_WIDGET_CLASS;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_GLADE_WIDGET_CLASSES;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_GLADE_WIDGET_CLASS_REF;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_GLADE_WIDGET_GROUP;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_HAS_CONTEXT;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_ICON_NAME;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_ICON_PREFIX;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_ID;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_IGNORE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_IMPORTANT;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_INIT_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_INTERNAL_CHILDREN;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_KEY;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_LIBRARY;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_MAX_VALUE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_MIN_VALUE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_MULTILINE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_NAME;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_NEEDS_SYNC;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_NICK;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_NO;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_OPTIONAL;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_OPTIONAL_DEFAULT;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_PACKING_ACTIONS;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_PACKING_DEFAULTS;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_PACKING_PROPERTIES;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_PARENT;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_PARENTLESS_WIDGET;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_PARENT_CLASS;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_POST_CREATE_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_PROPERTIES;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_PROPERTY;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_QUERY;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_READ_CHILD_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_READ_WIDGET_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_REMOVE_CHILD_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_REPLACE_CHILD_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_RESOURCE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_SAVE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_SAVE_ALWAYS;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_SET_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_SIGNAL;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_SIGNALS;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_SPEC;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_SPECIAL_CHILD_TYPE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_SPECIFICATIONS;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_STOCK;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_STOCK_ICON;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_STRING_FROM_VALUE_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_TARGETABLE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_THEMED_ICON;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_TITLE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_TOOLTIP;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_TOPLEVEL;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_TRANSFER_ON_PASTE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_TRANSLATABLE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_TRUE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_TYPE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_USE_PLACEHOLDERS;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_VALUE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_VALUE_TYPE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_VERIFY_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_VERSION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_VERSION_SINCE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_VISIBLE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_WEIGHT;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_WRITE_CHILD_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_WRITE_WIDGET_FUNCTION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string TAG_YES;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_AFTER;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_CHILD;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_CLASS;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_FILENAME;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_HANDLER;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_I18N_TRUE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_ID;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_INTERNAL_CHILD;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_LIB;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_NAME;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_OBJECT;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_PACKING;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_PLACEHOLDER;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_PROJECT;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_PROPERTY;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_REQUIRES;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_SIGNAL;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_SIGNAL_FALSE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_SIGNAL_TRUE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_SOURCE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_SOURCES;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_STOCK_ID;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_SWAPPED;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_TYPE;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_VERSION;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public const string XML_TAG_WIDGET;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string get_displayable_value (GLib.Type type, string value);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string get_value_from_displayable (GLib.Type type, string displayabe);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static GLib.Type param_objects_get_type ();
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.ParamSpec param_spec_objects (string name, string nick, string blurb, GLib.Type accepted_type, GLib.ParamFlags flags);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string propert_get_insensitive_tooltip (Glade.Property property);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static void register_displayable_value (GLib.Type type, string value, string domain, string str);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static void register_translated_value (GLib.Type type, string value, string str);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static void setup_log_handlers ();
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.ParamSpec standard_boolean_spec ();
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.ParamSpec standard_float_spec ();
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.ParamSpec standard_gdkcolor_spec ();
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.ParamSpec standard_int_spec ();
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.ParamSpec standard_objects_spec ();
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.ParamSpec standard_pixbuf_spec ();
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static void standard_stock_append_prefix (string prefix);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.ParamSpec standard_stock_image_spec ();
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.ParamSpec standard_stock_spec ();
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.ParamSpec standard_string_spec ();
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.ParamSpec standard_strv_spec ();
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.ParamSpec standard_uint_spec ();
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static bool type_has_displayable_values (GLib.Type type);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.List util_added_in_list (GLib.List old_list, GLib.List new_list);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string util_canonical_path (string path);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static bool util_check_and_warn_scrollable (Glade.Widget parent, Glade.WidgetAdaptor child_adaptor, Gtk.Widget parent_widget);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static int util_compare_stock_labels (void* a, void* b);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.List util_container_get_all_children (Gtk.Container container);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static int util_count_placeholders (Glade.Widget parent);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string util_duplicate_underscores (string name);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned Gtk.Widget util_file_dialog_new (string title, Glade.Project project, Gtk.Window parent, Glade.UtilFileDialogType action);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static bool util_file_is_writeable (string path);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string util_filename_to_icon_name (string value);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static Gtk.TreeIter util_find_iter_by_widget (Gtk.TreeModel model, Glade.Widget findme, int column);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static void util_flash_message (Gtk.Widget statusbar, uint context_id, string format);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned Gtk.Widget util_get_devhelp_icon (Gtk.IconSize size);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static ulong util_get_file_mtime (string filename) throws GLib.Error;
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned Gtk.Widget util_get_placeholder_from_pointer (Gtk.Container container);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static GLib.Type util_get_type_from_name (string name, bool have_func);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static bool util_have_devhelp ();
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string util_icon_name_to_filename (string value);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.Module util_load_library (string library_name);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static bool util_object_is_loading (GLib.Object object);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.List util_purify_list (GLib.List list);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string util_read_prop_name (string str);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.List util_removed_from_list (GLib.List old_list, GLib.List new_list);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static void util_replace (string str, char a, char b);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static void util_search_devhelp (string book, string page, string search);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static bool util_ui_message (Gtk.Widget parent, Glade.UIMessageType type, Gtk.Widget widget, string format);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static bool util_url_show (string url);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static void utils_cairo_draw_line (Cairo.Context cr, Gdk.Color color, int x1, int y1, int x2, int y2);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static void utils_cairo_draw_rectangle (Cairo.Context cr, Gdk.Color color, bool filled, int x, int y, int width, int height);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string utils_enum_string_from_value (GLib.Type enum_type, int value);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string utils_enum_string_from_value_displayable (GLib.Type flags_type, int value);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static int utils_enum_value_from_string (GLib.Type enum_type, string strval);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string utils_flags_string_from_value (GLib.Type enum_type, int value);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string utils_flags_string_from_value_displayable (GLib.Type flags_type, int value);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static int utils_flags_value_from_string (GLib.Type enum_type, string strval);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.ParamSpec utils_get_pspec_from_funcname (string funcname);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static int utils_hijack_key_press (Gtk.Window win, Gdk.EventKey event);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned Gtk.ListStore utils_liststore_from_enum_type (GLib.Type enum_type, bool include_empty);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string utils_replace_home_dir_with_tilde (string path);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string utils_string_from_value (GLib.Value value);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static GLib.Value utils_value_from_string (GLib.Type type, string str, Glade.Project project);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string xml_dump_from_context (Glade.XmlContext context);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static bool xml_get_boolean (Glade.XmlNode node, string name, bool _default);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string xml_get_content (Glade.XmlNode node_in);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static bool xml_get_property_boolean (Glade.XmlNode node_in, string name, bool _default);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static double xml_get_property_double (Glade.XmlNode node_in, string name, double _default);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static int xml_get_property_int (Glade.XmlNode node_in, string name, int _default);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string xml_get_property_string (Glade.XmlNode node_in, string name);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string xml_get_property_string_required (Glade.XmlNode node_in, string name, string xtra);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned GLib.List xml_get_property_targetable_versions (Glade.XmlNode node_in, string name);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static bool xml_get_property_version (Glade.XmlNode node_in, string name, uint16 major, uint16 minor);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static bool xml_get_value_int (Glade.XmlNode node_in, string name, int val);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static bool xml_get_value_int_required (Glade.XmlNode node, string name, int val);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string xml_get_value_string (Glade.XmlNode node, string name);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned string xml_get_value_string_required (Glade.XmlNode node, string name, string xtra_info);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static bool xml_load_sym_from_node (Glade.XmlNode node_in, GLib.Module module, string tagname, void* sym_location);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned Glade.XmlNode xml_search_child (Glade.XmlNode node, string name);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static unowned Glade.XmlNode xml_search_child_required (Glade.XmlNode tree, string name);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static void xml_set_content (Glade.XmlNode node_in, string content);
    [CCode (cheader_filename = "gladeui/glade.h")]
    public static void xml_set_value (Glade.XmlNode node_in, string name, string val);
}
