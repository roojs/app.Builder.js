{
    "id": "file-gtk-13",
    "name": "WindowLeftProps",
    "parent": "",
    "title": false,
    "path": "/home/alan/gitlive/app.Builder.js/Builder4/WindowLeftProps.bjs",
    "items": [
        {
            ".signal:void:showAddProps": "(string type)",
            "id": "LeftProps",
            "xtype": "VBox",
            "|xns": "Gtk",
            "items": [
                {
                    "pack": "pack_start,false,true,0",
                    "xtype": "HBox",
                    "|xns": "Gtk",
                    "items": [
                        {
                            "listeners": {
                                "button_press_event": " ( event ) => {\n    _this.showAddProps(\"prop\");\n    return false;\n}"
                            },
                            "pack": "add",
                            "xtype": "Button",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "|xns": "Gtk",
                                    "xtype": "HBox",
                                    "pack": "add",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Image",
                                            "pack": "add",
                                            "|stock": "Gtk.STOCK_ADD",
                                            "|icon_size": "Gtk.IconSize.MENU"
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Label",
                                            "pack": "add",
                                            "label": "Property"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "listeners": {
                                "button_press_event": "function ( event)  => {\n    \n// \tif (!this.get('/Editor').save()) {\n// \t    // popup!! - click handled.. \n// \t    return true;\n//        }\n    _this.addProps(\"'events\");\n    return false;\n}"
                            },
                            "pack": "add",
                            "xtype": "Button",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "|xns": "Gtk",
                                    "xtype": "HBox",
                                    "pack": "add",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Image",
                                            "pack": "add",
                                            "|stock": "Gtk.STOCK_ADD",
                                            "|icon_size": "Gtk.IconSize.MENU"
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Label",
                                            "pack": "add",
                                            "label": "Handler"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "listeners": {
                                "button_press_event": "function (self, ev) {\n\n \tif (!this.get('/Editor').save()) {\n \t    // popup!! - click handled.. \n \t    return true;\n        }\n        \n\tvar p = this.get('/AddPropertyPopup');\n\tif (!p.el) {\n\t\tp.init();\n\t}\n \tp.el.set_screen(Gdk.Screen.get_default());\n        p.el.show_all();\n         p.el.popup(null, null, null, null, 3, ev.button.time);\n    return true;\n}"
                            },
                            "pack": "add",
                            "xtype": "Button",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "|xns": "Gtk",
                                    "xtype": "HBox",
                                    "pack": "add",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Image",
                                            "pack": "add",
                                            "|stock": "Gtk.STOCK_ADD",
                                            "|icon_size": "Gtk.IconSize.MENU"
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Label",
                                            "pack": "add",
                                            "label": "Other"
                                        }
                                    ]
                                },
                                {
                                    "|xns": "Gtk",
                                    "xtype": "Menu",
                                    "pack": false,
                                    "id": "AddPropertyPopup",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "MenuItem",
                                            "pack": "append",
                                            "tooltip_markup": "Using this.get('*someid') will find any id in an application.",
                                            "label": "ID",
                                            "listeners": {
                                                "activate": "function (self) {\n\n    this.get('/LeftPanel.model').add( {\n        key : 'id', \n        type : 'string',\n        val : '',\n        //skel  : skel,\n        etype : 'props'\n    });\n}"
                                            }
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "MenuItem",
                                            "pack": "append",
                                            "tooltip_markup": "Add what type of packing is to be used",
                                            "label": "PACK",
                                            "listeners": {
                                                "activate": "function (self) {\n\n    this.get('/LeftPanel.model').add( {\n    \t key : 'pack', \n       \t type : 'string',\n       \t val : 'add',\n          etype : 'props'\n    });\n}"
                                            }
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "MenuItem",
                                            "pack": "append",
                                            "tooltip_markup": "Override the init method",
                                            "label": "INIT",
                                            "listeners": {
                                                "activate": "function (self) {\n\n    this.get('/LeftPanel.model').add( {\n       key : '|init', \n        type : 'function',\n        val  : \"function() {\\n    XObject.prototype.init.call(this);\\n}\\n\",\n        etype : 'props'\n    });\n}"
                                            }
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "SeparatorMenuItem",
                                            "pack": "add"
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "MenuItem",
                                            "pack": "append",
                                            "tooltip_markup": "Add a user defined string property",
                                            "label": "String",
                                            "listeners": {
                                                "activate": "function (self) {\n\n    this.get('/LeftPanel.model').add( {\n  \t\t  key : '', \n                type : 'string',\n                val  : \"\",\n                etype : 'props'\n    });\n}"
                                            }
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "MenuItem",
                                            "pack": "append",
                                            "tooltip_markup": "Add a user defined number property",
                                            "label": "Number",
                                            "listeners": {
                                                "activate": "function (self) {\n\n    this.get('/LeftPanel.model').add( {\n  \t\t  key : '', \n                type : 'number',\n                val  : 0,\n                etype : 'props'\n    });\n}"
                                            }
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "MenuItem",
                                            "pack": "append",
                                            "tooltip_markup": "Add a user defined boolean property",
                                            "label": "Boolean",
                                            "listeners": {
                                                "activate": "function (self) {\n\n    this.get('/LeftPanel.model').add( {\n  \t\t  key : '', \n                type : 'boolean',\n                val  : false,\n                etype : 'props'\n    });\n}"
                                            }
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "SeparatorMenuItem",
                                            "pack": "add"
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "MenuItem",
                                            "pack": "append",
                                            "tooltip_markup": "Add a user function boolean property",
                                            "label": "Function",
                                            "listeners": {
                                                "activate": "function (self) {\n\n    this.get('/LeftPanel.model').add( {\n  \t    key : '|', \n                        type : 'function',\n                        val  : \"function() {\\n    \\n}\\n\",\n                        etype : 'props'\n    });\n}"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "editing": false,
                    "id": "EditProps",
                    "pack": "add",
                    "xtype": "ScrolledWindow",
                    "|init": "function() {\n    XObject.prototype.init.call(this);\n   this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n}\n",
                    "|shadow_type": "Gtk.ShadowType.IN",
                    "|xns": "Gtk",
                    "items": [
                        {
                            "listeners": {
                                "button_press_event": "function (self, ev) {\n\n    \n    if (!this.get('/Editor').save()) {\n        // popup!! - click handled.. \n        return true;\n    }\n    var res = { }; \n    \n    if (!this.el.get_path_at_pos(ev.button.x,ev.button.y, res)) {\n        return false; //not on a element.\n    }\n    \n     // right click.\n     if (ev.type == Gdk.EventType.BUTTON_PRESS  && ev.button.button == 3) {    \n        // show popup!.   \n        if (res.column.title == 'value' && this.get('/LeftPanel').editing) {\n            return false;\n        }\n        //if (! this.get('/LeftPanelPopup')LeftPanelPopup.el) LeftPanelPopup.init();\n        var p = this.get('/LeftPanelPopup');\n        if (!p.el) {\n            p.init();\n        }\n\n        p.el.set_screen(Gdk.Screen.get_default());\n        p.el.show_all();\n        p.el.popup(null, null, null, null, 3, ev.button.time);\n        //Seed.print(\"click:\" + res.column.title);\n        \n        \n        return false;\n    }\n    \n     \n    if (res.column.title != 'value') {\n          //  XObject.error(\"column is not value?\");\n        return false; // ignore.. - key click.. ??? should we do this??\n    }\n    \n    // currently editing???\n//    if (  this.activePath) {\n        \n     //   this.activePath = false;\n       // stop editing!!!!\n        if (this.get('/Editor').dirty) {\n            //if (!this.get('/Editor.buffer').checkSyntax()) {\n            //   this.get('/StandardErrorDialog').show(\"Fix errors in code and save..\"); \n            //   return true;\n            //    // error Dialog\n            //}\n            if (!this.get('/Editor.view').save()) {\n                return true;\n            }\n        }   \n        this.get('/LeftPanel').editableColumn.items[0].el.stop_editing();\n        this.get('/LeftPanel').editing = false;\n    \n    //    XObject.error(\"Currently editing?\");\n     //   return false;\n   // }\n    \n    var renderer = this.get('/LeftPanel').editableColumn.items[0].el; // set has_entry..\n    \n    var type = this.get('/LeftPanel.model').getType(res.path.to_string());\n        \n    // get options for this type -- this is to support option lists etc..\n    var provider = this.get('/LeftTree').getPaleteProvider();\n    var opts = provider.findOptions(type);\n    \n    if (opts === false) {\n        // it's text etnry\n         this.get('/LeftPanel').editableColumn.setOptions([]);\n        renderer.has_entry = true;\n    } else {\n         this.get('/LeftPanel').editableColumn.setOptions(opts);\n        renderer.has_entry = false;\n    }\n    this.get('/LeftPanel.model').startEditing(res.path.to_string(), 1);\n        \n   //Seed.print(\"click\" + ev.type);\n    //console.dump(res);\n    return false;\n\n              \n   \n}"
                            },
                            "id": "view",
                            "tooltip_column": 5,
                            "xtype": "TreeView",
                            "|enable_tree_lines": true,
                            "|headers_visible": false,
                            "|init": "function() {\n     XObject.prototype.init.call(this); \n                       \n                    this.selection = this.el.get_selection();\n                    this.selection.set_mode( Gtk.SelectionMode.SINGLE);\n                 \n                    \n                    var description = new Pango.FontDescription.c_new();\n                    description.set_size(8000);\n                    this.el.modify_font(description);\n}\n",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "activePath": false,
                                    "id": "model",
                                    "pack": "set_model",
                                    "xtype": "TreeStore",
                                    "|add": "function(info) {\n      // info includes key, val, skel, etype..\n              console.dump(info);\n            type = info.type.toLowerCase();\n            var data = this.toJS();\n            \n            if (info.etype == 'events') {\n                data.listeners = data.listeners || { };\n                if (typeof(data.listeners[info.key]) != 'undefined') {\n                    return; //already set!\n                }\n            } else {\n                if (typeof(data[info.key]) != 'undefined') {\n                    return;\n                }\n            }\n            \n            if (typeof(info.val) == 'undefined') {\n                    \n                info.val = '';\n                if (info.type.toLowerCase() == 'boolean') {\n                    info.val = true;\n                }\n                if (type == 'number') {\n                    info.val = 0;\n                }\n                // utf8 == string..\n                \n                \n            }\n            var k = info.key;\n            if (info.etype == 'events') {\n             \n                data.listeners[info.key] = info.val;\n                k = '!' + info.key;\n            } else {\n                data[info.key] = info.val;\n            }\n            \n            \n            var map = this.load(data);\n            \n            // flag it as changed to the interface..\n\n            this.get('/LeftTree.model').changed(data, true); \n            \n            \n            this.startEditing(map[k]);\n             \n            /*\n            LeftPanel.get('view').el.row_activated(\n                new Gtk.TreePath.from_string(map[k]), \n                LeftPanel.editableColumn.el\n            );\n            */\n}\n",
                                    "|changed": "function(str, doRefresh) {\n    if (!this.activePath) {\n        return;\n    }\n    var iter = new Gtk.TreeIter();\n    this.el.get_iter(iter, new Gtk.TreePath.from_string(this.activePath));\n    \n    this.el.set_value(iter, 1, '' +str);\n    this.el.set_value(iter, 3, '' + this.toShort(str));\n    var type = this.getIterValue(iter, 4);\n\n    this.el.set_value(iter, 5, type + ' : ' + str);\n    // update the tree...  \n\n    this.get('/LeftTree.model').changed(this.toJS(), doRefresh); \n}\n",
                                    "|deleteSelected": "function() {\n     var data = this.toJS();\n    var iter = new Gtk.TreeIter();\n    var s = this.get('/LeftPanel.view').selection;\n    s.get_selected(this.el, iter);\n         \n       \n    var gval = new GObject.Value('');\n   this.get('/LeftPanel.model').el.get_value(iter, 0 ,gval);\n    \n    var val = gval.value;\n    if (val[0] == '!') {\n        // listener..\n        if (!data.listeners || typeof(data.listeners[  val.substring(1)]) == 'undefined') {\n            return;\n        }\n        delete data.listeners[  val.substring(1)];\n        if (!XObject.keys(data.listeners).length) {\n            delete data.listeners;\n        }\n        \n    } else {\n        if (typeof(data[val]) == 'undefined') {\n            return;\n        }\n        delete data[val];\n    }\n    \n    \n    this.load(data);\n    this.get('/LeftTree.model').changed(data, true);\n    \n}\n",
                                    "|getIterValue": "function(iter, col) {\n     var gval = new GObject.Value('');\n    this.get('/LeftPanel.model').el.get_value(iter, col ,gval);\n    return '' + gval.value;\n}\n",
                                    "|getType": "function(treepath) {\n     return this.getValue(treepath, 4);\n}\n",
                                    "|getValue": "function(treepath_str, col) \n{\n   // get's the  value in a row.. - keys - returns string, values - formats it..\n\n    var iter = new Gtk.TreeIter();\n    this.el.get_iter(iter, new Gtk.TreePath.from_string(treepath_str));\n    \n    var gval = new GObject.Value('');\n    this.get('/LeftPanel.model').el.get_value(iter, col ,gval);\n    var val = '' + gval.value;\n   \n    if (col != 1) {\n        return val;\n    }\n    var type = this.getType(this.el.get_path(iter).to_string());\n    //print(\"TYPE: \" +type + \" -  val:\" + val);\n    switch(type.toLowerCase()) {\n        case 'number':\n        case 'uint':\n        case 'int':\n            return parseFloat(val); // Nan ?? invalid!!?        \n        case 'float':\n        case 'gfloat':\n            return 1.0 * parseFloat(val); // Nan ?? invalid!!?\n        case 'boolean':\n            return val == 'true' ? true : false;\n        default: \n            var nv = parseFloat(val);\n            if (!isNaN(nv) && (val == ''+nv)) {\n                return nv;\n            }\n            return val;\n    }\n                            \n}\n",
                                    "|init": "function() {\n    XObject.prototype.init.call(this);\nthis.el.set_column_types ( 6, [\n                                GObject.TYPE_STRING,  // 0 real key\n                                GObject.TYPE_STRING, // 1 real value \n                                 GObject.TYPE_STRING,  // 2 visable key\n                                 GObject.TYPE_STRING, // 3 visable value\n                                 GObject.TYPE_STRING, // 4 need to store type of!!!\n                                  GObject.TYPE_STRING // 5 tooltip\n                              \n                            ]);\n}\n",
                                    "|load": "function(ar) {\n// might casue problesm..\n    // this.get('/Editor.RightEditor').save();\n\n       this.get('/Editor').el.hide();\n     this.get('/Editor').activePath = false;\n\n\n  this.el.clear();\n              \n    //this.get('/RightEditor').el.hide();\n    if (ar === false) {\n        return ;\n    }\n    var ret = {}; \n    \n\n    var provider = this.get('/LeftTree').getPaleteProvider();\n     var iter = new Gtk.TreeIter();\n     \n    // sort!!!?\n    var keys  = XObject.keys(ar);\n    keys.sort();\n    ar.listeners = ar.listeners || {};\n    \n    for (var i in ar.listeners ) {\n        this.el.append(iter);\n        var p = this.el.get_path(iter).to_string();\n        ret['!' + i] = p;\n        \n        this.el.set_value(iter, 0, '!'+  i  );\n        this.el.set_value(iter, 1, '' + ar.listeners[i]);\n        this.el.set_value(iter, 2, '<b>'+ i + '</b>');\n        \n        this.el.set_value(iter, 3, '' + this.toShort(ar.listeners[i]));\n        this.el.set_value(iter, 4, 'function');\n        this.el.set_value(iter, 5, i + ' : ' + ar.listeners[i]);\n    }\n    \n    \n   \n    var _this = this;\n    keys.forEach(function(i) {\n        if (typeof(ar[i]) == 'object') {\n            return;\n        }\n        \n        var type = provider.findType(ar, i, ar[i]);\n        \n        _this.el.append(iter);\n        var p = _this.el.get_path(iter).to_string();\n        ret[i] = p;\n        _this.el.set_value(iter, 0, ''+i);\n        _this.el.set_value(iter, 1, '' + ar[i]);  \n        _this.el.set_value(iter, 2, ''+i);\n        _this.el.set_value(iter, 3, ''+ _this.toShort(ar[i]));\n        _this.el.set_value(iter, 4, ''+type);\n        _this.el.set_value(iter, 5, type + ' : ' + ar[i]);\n    })\n    return ret;\n}\n",
                                    "|startEditing": "function(path,col) {\n    \n    // alled by menu 'edit' currently..\n    /**\n    * start editing path (or selected if not set..)\n    * @param {String|false} path  (optional) treepath to edit - selected tree gets\n    *     edited by default.\n    * @param {Number} 0 or 1 (optional)- column to edit. \n    */\n    // fix tp to be the 'treepath' string (eg. 0/1/2...)\n    var tp;\n    if (typeof(path) == 'string') {\n        tp = new Gtk.TreePath.from_string(path);\n    } else {\n        var iter = new Gtk.TreeIter();\n        var s = this.get('/LeftPanel.view').selection;\n        s.get_selected(this.el, iter);\n        tp = this.el.get_path(iter);\n        path = tp.to_string();\n    }\n    \n   \n    // which colum is to be edited..\n    var colObj = false;\n    \n    // not sure what this does..\n    \n    if (typeof(col) == 'undefined') {\n        var k = this.getValue(path, 0);\n        col = 1;\n        colObj = (!k.length || k == '|') ? \n            this.get('/LeftPanel').propertyColumn : this.get('/LeftPanel').editableColumn;\n    } else {\n        colObj = col ? this.get('/LeftPanel').editableColumn : this.get('/LeftPanel').propertyColumn;\n    }\n    \n    // make sure the pulldown is set correctly..\n    // not really needed for second col...\n    var showEditor = false;\n    this.get('/Editor').activePath = false;\n    this.get('/Editor').el.hide();\n     \n    if (col) {\n        var provider = this.get('/LeftTree').getPaleteProvider();\n        var type = this.get('/LeftPanel.model').getType(path);\n        var opts = provider.findOptions(type);\n        var renderer = this.get('/LeftPanel').editableColumn.items[0].el;\n        \n        if (opts === false) {\n            this.get('/LeftPanel').editableColumn.setOptions([]);\n            renderer.has_entry = true; \n        } else {\n            this.get('/LeftPanel').editableColumn.setOptions(opts);\n            renderer.has_entry = false;/// - pulldowns do not have entries\n        }\n        // determine if we should use the Text editor...\n        var keyname = this.getValue(path, 0);\n        var data_value = this.getValue(path, 1);\n    \n        if ((keyname[0] == '|') || \n            (   \n                (typeof(data_value) == 'string' ) && \n                ( data_value.match(/function/g) || data_value.match(/\\n/g)) // || (data_value.length > 20))\n            )) {\n            showEditor = true;\n        }\n        print(\"SHOW EDITOR\" + showEditor ? 'YES' :'no');\n        \n    }\n    var _this = this;    \n    // end editing..\n   // this.get('/BottomPane').el.hide();\n    //this.get('/RightEditor').el.hide();\n     \n    \n    if (showEditor) {\n\n        this.activePath = false;\n        \n        _this.get('/Editor').el.show_all();\n        GLib.timeout_add(0, 1, function() {\n\n            //_this.get('/BottomPane').el.show();\n             //_this.get('/RightEditor').el.show();\n            \n            _this.get('/Editor.RightEditor.view').load( _this.getValue(path, 1) );\n            \n            _this.get('/Editor').activePath = path;\n            _this.activePath = path ;\n          \n            return false;\n        });\n        return;\n    }\n      \n    \n    \n\n    // iter now has row...\n    GLib.timeout_add(0, 100, function() {\n        _this.activePath = path;\n        colObj.items[0].el.editable = true; // esp. need for col 0..\n        _this.get('/LeftPanel.view').el.set_cursor_on_cell(\n            tp,\n            colObj.el,\n            colObj.items[0].el,\n            true\n        );\n    });\n    \n}\n",
                                    "|toJS": "function() {\n     var iter = new Gtk.TreeIter();\n    this.get('/LeftPanel.model').el.get_iter_first(iter);\n    var ar = {};\n       \n    while (true) {\n        \n        var k = this.getValue(this.el.get_path(iter).to_string(), 0);\n       // Seed.print(k);\n        if (k[0] == '!') {\n            ar.listeners = ar.listeners || {};\n            ar.listeners[  k.substring(1)] = this.getValue(this.el.get_path(iter).to_string(), 1);\n            \n        } else {\n            ar[ k ] = this.getValue(this.el.get_path(iter).to_string(), 1);\n        }\n        \n        if (! this.get('/LeftPanel.model').el.iter_next(iter)) {\n            break;\n        }\n    }\n    \n    \n    //print(JSON.stringify(ar));\n    return ar;\n    // convert the l\n}\n",
                                    "|toShort": "function(str) {\n    var a = typeof(str) == 'string' ? str.split(\"\\n\") : [];\n        return a.length > 1 ? a[0] + '....' : '' + str;\n}\n",
                                    "|xns": "Gtk"
                                },
                                {
                                    "|xns": "Gtk",
                                    "xtype": "TreeViewColumn",
                                    "pack": "append_column",
                                    "|init": "function() {\n    XObject.prototype.init.call(this);\n\n    this.el.add_attribute(this.items[0].el , 'markup', 2 );\n    this.get('/LeftPanel').propertyColumn = this;\n}\n",
                                    "title": "key",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "CellRendererText",
                                            "pack": "pack_start",
                                            "listeners": {
                                                "editing_started": "function (self, editable, path) {\n\n        this.get('/LeftPanel.model').activePath  = path;\n\n}",
                                                "edited": "function (self, object, p0) {\n\tvar model = this.get('/LeftPanel.model');\n        var path = model.activePath;\n        var iter = new Gtk.TreeIter();\n        model.el.get_iter(iter, new Gtk.TreePath.from_string(path));\n        model.el.set_value(iter, 0, p0);\n        model.el.set_value(iter, 2, p0);\n        \n\tmodel.activePath = false;\n\n\tthis.get('/LeftTree.model').changed(model.toJS(), true); \n        this.el.editable = false;\n}"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "pack": "append_column",
                                    "title": "value",
                                    "xtype": "TreeViewColumn",
                                    "|init": "function() {\n    XObject.prototype.init.call(this);\n\tthis.el.add_attribute(this.items[0].el , 'text', 3 );\n\tthis.el.add_attribute(this.items[0].el , 'sensitive', 3 );\n\t//this.el.add_attribute(this.items[0].el , 'editable', 3 );\n          // this.el.set_cell_data_func(cell, age_cell_data_func, NULL, NULL);\n\n \tthis.get('/LeftPanel').editableColumn= this;\n}\n",
                                    "|setOptions": "function(ar) {\n       var m = this.items[0].el.model;\n            m.clear();\n            var iter = new Gtk.TreeIter();\n            ar.forEach(function(i) {\n                   // sort!!!?\n                m.append(iter);\n                m.set_value(iter, 0, i);\n            });\n            \n}\n",
                                    "|xns": "Gtk",
                                    "items": [
                                        {
                                            "listeners": {
                                                "edited": "function (self, object, p0) {\n \tthis.get('/LeftPanel').editing = false;\n \tvar ap = this.get('/LeftPanel.model').activePath\n\tprint(\"EDITED? \"  + ap + \" - p:\" + p0 + \" t:\" + p0);\n        this.get('/LeftPanel.model').changed(p0, true);\n        this.get('/LeftPanel.model').activePath = false;\n        this.el.editable = false;\n}",
                                                "editing_started": "function (self, editable, path) {\n   this.get('/LeftPanel').editing  = true;\n\t//  console.log('editing started');\n       // r.has_entry = false;\n\n    this.el.editable = false; // make sure it's not editor...\n   \n}"
                                            },
                                            "editable": false,
                                            "pack": "pack_start",
                                            "text_column": 0,
                                            "xtype": "CellRendererCombo",
                                            "|has_entry": true,
                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n   this.el.model = new Gtk.ListStore();\n    this.el.model.set_column_types ( 1, [\n        GObject.TYPE_STRING  // 0 real key\n      ]);\n}\n",
                                            "|xns": "Gtk"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "id": "ContextMenu",
                            "pack": false,
                            "xtype": "Menu",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "|xns": "Gtk",
                                    "xtype": "MenuItem",
                                    "pack": "append",
                                    "label": "Delete",
                                    "listeners": {
                                        "activate": "function (self) {\n\tthis.get('/LeftPanel.model').deleteSelected();\n}"
                                    }
                                },
                                {
                                    "|xns": "Gtk",
                                    "xtype": "MenuItem",
                                    "pack": "append",
                                    "label": "Edit",
                                    "listeners": {
                                        "activate": "function (self) {\n\tthis.get('/LeftPanel.model').startEditing(false, 0);\n}"
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],
    "permname": "",
    "modOrder": ""
}