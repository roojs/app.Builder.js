{
    "id": "file-gtk-14",
    "name": "WindowRooView",
    "parent": "",
    "title": false,
    "path": "/home/alan/gitlive/app.Builder.js/Builder4/WindowRooView.bjs",
    "items": [
        {
            ".JsRender.JsRender:file": "",
            "id": "WindowRooView",
            "pack": "add",
            "xtype": "VPaned",
            "|void:loadFile": "(JsRender.JsRender file)\n{\n    this.file = file;\n    this.view.renderJS(true);\n}",
            "|xns": "Gtk",
            "items": [
                {
                    "|homogeneous": "false",
                    "pack": "pack1,true,false",
                    "xtype": "VBox",
                    "|xns": "Gtk",
                    "items": [
                        {
                            "|height_request": 20,
                            "pack": "pack_start,true,false,0",
                            "xtype": "HBox",
                            "|homogeneous": "true",
                            "|vexpand": "false",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "listeners": {
                                        "clicked": "( ) => {\n    _this.view.renderJS(  true);\n}"
                                    },
                                    "label": "Redraw",
                                    "pack": "pack_start,false,false,0",
                                    "xtype": "Button",
                                    "|xns": "Gtk"
                                },
                                {
                                    "listeners": {
                                        "toggled": " (state) => {\n    this.el.set_label(this.el.active  ? \"Auto Redraw On\" : \"Auto Redraw Off\");\n}"
                                    },
                                    "|active": "true",
                                    "id": "AutoRedraw",
                                    "label": "Auto Redraw On",
                                    "pack": "pack_start,false,false,0",
                                    "xtype": "CheckButton",
                                    "|xns": "Gtk"
                                },
                                {
                                    "listeners": {
                                        "clicked": " () => {\n  _this.view.redraws = 99;\n  _this.view.renderJS(true);\n}"
                                    },
                                    "label": "Full Redraw",
                                    "pack": "pack_start,false,false,0",
                                    "xtype": "Button",
                                    "|xns": "Gtk"
                                }
                            ]
                        },
                        {
                            "pack": "pack_end,true,true,0",
                            "xtype": "ScrolledWindow",
                            "|init": "  this.el.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n \n",
                            "|shadow_type": "Gtk.ShadowType.IN",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "listeners": {
                                        "drag_drop": "  ( ctx, x, y,time, ud) => {\n    return false;\n    /*\n\tprint(\"TARGET: drag-drop\");\n        var is_valid_drop_site = true;\n        \n         \n        Gtk.drag_get_data\n        (\n                w,         // will receive 'drag-data-received' signal \n                ctx,        /* represents the current state of the DnD \n                this.get('/Window').atoms[\"STRING\"],    /* the target type we want \n                time            /* time stamp \n        );\n                        \n                        \n                        /* No target offered by source => error \n                       \n\n\treturn  is_valid_drop_site;\n\t*/\n}",
                                        "show": "  ( ) => {\n    this.inspector.show();\n}"
                                    },
                                    ".GLib.DateTime:lastRedraw": "null",
                                    ".WebKit.WebInspector:inspector": "",
                                    ".bool:pendingRedraw": "false",
                                    ".bool:refreshRequired": "false",
                                    ".int:redraws": 0,
                                    ".string:renderedData": "\"\"",
                                    ".string:runhtml": "\"\"",
                                    "id": "view",
                                    "pack": "add",
                                    "redraws": 0,
                                    "xtype": "WebView",
                                    "|init": " {\n    // this may not work!?\n    var settings =  this.el.get_settings();\n    settings.enable_developer_extras = true;\n    \n    // this was an attempt to change the url perms.. did not work..\n    // settings.enable_file_access_from_file_uris = true;\n    // settings.enable_offline_web_application_cache - true;\n    // settings.enable_universal_access_from_file_uris = true;\n   \n     \n    \n    this.inspector = this.el.get_inspector();\n    this.inspector.open_window.connect(() => {\n    \n        print(\"inspector attach\\n\");\n        var wv = this.inspector.get_web_view();\n        if (wv != null) {\n            print(\"got inspector web view\\n\");\n            _this.inspectorcontainer.el.add(wv);\n            wv.show();\n        } else {\n            print(\"no web view yet\\n\");\n        }\n        return true;\n       \n    });\n    \n\n     // FIXME - base url of script..\n     // we need it so some of the database features work.\n    this.el.load_html( \"Render not ready\" , \n            //fixme - should be a config option!\n            // or should we catch stuff and fix it up..\n            \"http://localhost/app.Builder/\"\n    );\n        \n        \n   //this.el.open('file:///' + __script_path__ + '/../builder.html');\n    /*\n    Gtk.drag_dest_set\n    (\n            this.el,              //\n            Gtk.DestDefaults.MOTION  | Gtk.DestDefaults.HIGHLIGHT,\n            null,            // list of targets\n            Gdk.DragAction.COPY         // what to do with data after dropped \n    );\n                            \n   // print(\"RB: TARGETS : \" + LeftTree.atoms[\"STRING\"]);\n    Gtk.drag_dest_set_target_list(this.el, this.get('/Window').targetList);\n    */\n    GLib.Timeout.add_seconds(1,  ()  =>{\n         print(\"run refresh?\");\n         this.runRefresh(); \n         return true;\n     });\n    \n    \n}\n",
                                    "|void:renderJS": "(bool force) {\n\n    // this is the public redraw call..\n    // we refresh in a loop privately..\n    var autodraw = _this.AutoRedraw.el.active;\n    if (!autodraw && !force) {\n        print(\"Skipping redraw - no force, and autodraw off\");\n        return;\n    }\n    this.refreshRequired  = true;\n}\n",
                                    "|void:runRefresh": " () \n{\n    // this is run every 2 seconds from the init..\n\n  \n    \n    if (!this.refreshRequired) {\n       // print(\"no refresh required\");\n        return;\n    }\n\n    if (this.lastRedraw != null) {\n       // do not redraw if last redraw was less that 5 seconds ago.\n       if ((int64)(new DateTime.now_local()).difference(this.lastRedraw) < 5000 ) {\n            return;\n        }\n    }\n    \n    if (_this.file == null) {\n        return;\n    }\n    \n    \n     this.refreshRequired = false;\n   //  print(\"HTML RENDERING\");\n     \n     \n     //this.get('/BottomPane').el.show();\n     //this.get('/BottomPane').el.set_current_page(2);// webkit inspector\n\n    var js = _this.file.toSourcePreview();\n\n    if (js.length < 1) {\n        print(\"no data\");\n        return;\n    }\n//    var  data = js[0];\n    this.redraws++;\n  \n    var project = _this.file.project;  \n\n     //print (project.fn);\n     // set it to non-empty.\n     \n//     runhtml = runhtml.length ?  runhtml : '<script type=\"text/javascript\"></script>'; \n    \n\n  //   this.runhtml  = this.runhtml || '';\n     \n     \n        // then we need to reload the browser using\n        // load_html_string..\n        \n        // then trigger a redraw once it's loaded..\n         this.pendingRedraw = true;\n         \n         var runhtml = \"<script type=\\\"text/javascript\\\">\\n\" ;\n         string builderhtml;\n         GLib.FileUtils.get_contents(\"/home/alan/gitlive/app.Builder.js/builder.html.js\", out builderhtml);\n         \n         runhtml += builderhtml + \"\\n\";\n         runhtml += \"</script>\\n\" ;\n        \n        // fix to make sure they are the same..\n        this.runhtml = project.runhtml;\n        // need to modify paths\n        \n        string inhtml;\n        GLib.FileUtils.get_contents(\"/home/alan/gitlive/app.Builder.js/builder.html\", out inhtml);\n        \n        \n    \n    \n    this.renderedData = js;\n\n\n    string js_src = js + \"\\n\" +\n\t\"Roo.onReady(function() {\\n\" +\n\t\"if (\" + _this.file.name +\".show) \" +  _this.file.name +\".show({});\\n\" +\n\t\"Roo.XComponent.build();\\n\" +\n\t\"});\\n\";\n\t\n    print(\"render js: \" + js);\n    //if (!this.ready) {\n  //      console.log('not loaded yet');\n    //}\n    this.lastRedraw = new DateTime.now_local();\n\n        var html = inhtml.replace(\"</head>\", runhtml + this.runhtml + \n        \n                \"<script type=\"text/javascript\">\\n\" +\n                js_src + \"\\n\" + \n                \"</script>\" + \n                        \n        \"</head>\");\n        print(\"LOAD HTML \" + html);\n        \n        this.el.load_html( html , \n            //fixme - should be a config option!\n            \"http://localhost/app.Builder/\"\n        );\n        \n//     print( \"before render\" +    this.lastRedraw);\n//    print( \"after render\" +    (new Date()));\n    \n}\n",
                                    "|xns": "WebKit"
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": "inspectorcontainer",
                    "pack": "pack2,false,false",
                    "xtype": "ScrolledWindow",
                    "|init": "  this.el.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n \n",
                    "|shadow_type": "Gtk.ShadowType.IN",
                    "|xns": "Gtk"
                }
            ]
        }
    ],
    "permname": "",
    "modOrder": ""
}