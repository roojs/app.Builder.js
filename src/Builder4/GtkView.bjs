{
 "name" : "GtkView",
 "parent" : "",
 "title" : "",
 "path" : "/home/alan/gitlive/app.Builder.js/src/Builder4/GtkView.bjs",
 "permname" : "",
 "modOrder" : "",
 "build_module" : "builder",
 "items" : [
  {
   "listeners" : {
    "size_allocate" : "(aloc) => {\n\n    this.width = aloc.width;\n    this.height =aloc.height;\n    }\n"
   },
   "id" : "GtkView",
   "| void createThumb" : "() {\n    \n    \n    if (this.file == null) {\n        return;\n    }\n    var filename = this.file.getIconFileName(false);\n    \n    var  win = this.el.get_parent_window();\n    var width = win.get_width();\n    var height = win.get_height();\n\n    Gdk.Pixbuf screenshot = Gdk.pixbuf_get_from_window(win, 0, 0, width, height); // this.el.position?\n\n    screenshot.save(filename,\"png\");\n    return;\n    \n    \n    \n    \n    \n     \n    \n    // should we hold until it's printed...\n    \n      \n\n    \n    \n\n\n    \n     \n}\n",
   "# Gtk.Widget lastObj" : "null",
   "| void loadFile" : "(JsRender.JsRender file) \n{\n        this.file = null;\n        \n        if (file.tree == null) {\n            return;\n        }\n        this.file = file;\n        if (this.lastObj != null) {\n            this.container.el.remove(this.lastObj);\n        }\n        \n        // hide the compile view at present..\n          \n        \n        var w = this.width;\n        var h = this.height;\n        \n        print(\"ALLOC SET SIZES %d, %d\\n\", w,h); \n        \n        // set the container size min to 500/500 or 20 px less than max..\n        w = int.max (w-20, 500);\n        h = int.max (h-20, 500); \n        \n        print(\"SET SIZES %d, %d\\n\", w,h);       \n        _this.container.el.set_size_request(w,h);\n        \n        _this.view_layout.el.set_size(w,h); // should be baded on calc.. -- see update_scrolled.\n        var rgba = Gdk.RGBA ();\n        rgba.parse (\"#ccc\");\n        _this.view_layout.el.override_background_color(Gtk.StateFlags.NORMAL, rgba);\n        \n        \n\tvar x = new JsRender.NodeToGtk(file.tree);\n        var obj = x.munge() as Gtk.Widget;\n        this.lastObj = null;\n\tif (obj == null) {\n        \treturn;\n\t}\n\tthis.lastObj = obj;\n        \n        this.container.el.add(obj);\n        obj.show_all();\n        \n         \n        \n}\n ",
   "int width" : 0,
   "Xcls_MainWindow main_window" : "",
   "xtype" : "VBox",
   "# JsRender.JsRender file" : "null",
   "int height" : 0,
   "$ xns" : "Gtk",
   "items" : [
    {
     "* pack" : "pack_start,true,true,0",
     "xtype" : "Notebook",
     "$ xns" : "Gtk",
     "items" : [
      {
       "id" : "label_preview",
       "* pack" : false,
       "xtype" : "Label",
       "$ xns" : "Gtk",
       "utf8 label" : "Preview"
      },
      {
       "id" : "label_code",
       "xtype" : "Label",
       "* pack" : false,
       "$ xns" : "Gtk",
       "utf8 label" : "Code"
      },
      {
       "* pack" : "append_page,_this.label_preview.el",
       "xtype" : "ScrolledWindow",
       "$ xns" : "Gtk",
       "items" : [
        {
         "id" : "view_layout",
         "xtype" : "Layout",
         "* pack" : "add",
         "$ xns" : "Gtk",
         "items" : [
          {
           "id" : "container",
           "* pack" : "put,10,10",
           "xtype" : "HBox",
           "$ xns" : "Gtk"
          }
         ]
        }
       ]
      },
      {
       "* init" : "{\n this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n \n\n}\n",
       "xtype" : "ScrolledWindow",
       "* pack" : "append_page,_this.label_code.el",
       "$ xns" : "Gtk",
       "items" : [
        {
         "listeners" : {
          "cursor_changed" : "() => {\n    var sel = this.el.get_selection();\n\n    if (sel.count_selected_rows() < 1) {\n\n        print(\"selected rows < 1\\n\");\n        //??this.mo \n        return  ;\n    }\n        \n        //console.log('changed');\n     \n     Gtk.TreeIter iter;\n     Gtk.TreeModel mod;\n    sel.get_selected(out mod, out iter);\n    /*\n     store.set(citer, \n            0, file + \":\" + line, \n            1, int.parse(line), \n            2, GLib.Markup.escape_text(line + \": \" + msg), \n            3, file,-1);\n    \n    });\n    */\n    \n    \n    \n    // var val = \"\";\n    GLib.Value value;\n    _this.compile_result_store.el.get_value(iter, 3, out value);\n    var fname = (string)value;\n    GLib.Value lvalue;\n    _this.compile_result_store.el.get_value(iter, 1, out lvalue);\n    var line = (int) lvalue;\n    \n    \n    \n \n    \n    \n    print (\"loadfile %s : %d\", fname,line);\n    \n    _this.sourceview.loadFile(fname, line);\n    \n    \n            \n            \n}\n             "
         },
         "id" : "compile_tree",
         "* init" : "{\n var description = new Pango.FontDescription();\n    description.set_size(8000);\n    this.el.modify_font(description);\n\n}\n",
         "* pack" : "add",
         "xtype" : "TreeView",
         "$ xns" : "Gtk",
         "items" : [
          {
           "gint n_columns" : 4,
           "id" : "compile_result_store",
           "columns" : "  typeof(string), typeof(int), typeof(string), typeof(string) ",
           "* pack" : "set_model",
           "xtype" : "TreeStore",
           "$ xns" : "Gtk"
          },
          {
           "utf8 title" : "Compile output",
           "* init" : "{\n  this.el.add_attribute(_this.renderer.el , \"markup\", 2 );\n \n}\n",
           "xtype" : "TreeViewColumn",
           "* pack" : "append_column",
           "string id" : "column",
           "$ xns" : "Gtk",
           "items" : [
            {
             "id" : "renderer",
             "* pack" : "pack_start,true",
             "xtype" : "CellRendererText",
             "$ xns" : "Gtk"
            }
           ]
          }
         ]
        }
       ]
      }
     ]
    }
   ]
  }
 ]
}