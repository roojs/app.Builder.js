{
 "name" : "MainWindow",
 "parent" : "",
 "title" : "",
 "path" : "/home/alan/gitlive/app.Builder.js/src/Builder4/MainWindow.bjs",
 "permname" : "",
 "modOrder" : "",
 "items" : [
  {
   "listeners" : {
    "delete_event" : "  (   event) => {\n    return false;\n}",
    "destroy" : "() =>  {\n Xcls_MainWindow.singleton().no_windows--;\n \n if (Xcls_MainWindow.singleton().no_windows < 1) {\n\n     Gtk.main_quit();\n }\n}",
    "show" : "  ( ) => {\n    // hide the file editing..\n   \n    //this.hideViewEditing();\n}"
   },
   "|             void hideAddListener" : "() {\n      _this.backbutton.el.hide();\n     _this.projectbutton.el.show(); \n          _this.projecteditbutton.el.show();\n         _this.editfilebutton.el.show();   \n     _this.addpropsview.el.save_easing_state();\n    var el = _this.rooview.el;\n    el.save_easing_state();\n\n    \n    el.set_scale(1.0f,1.0f);\n    _this.addpropsview.el.set_scale(0.0f,0.0f);\n    _this.state = \"edit\";\n\n \n    //_this.clutterfiles.loadProject(_this.project);\n\n    el.restore_easing_state();\n     _this.addpropsview.el.restore_easing_state();  \n  }",
   "|        void initChildren" : " () {\n    // this needs putting in a better place..\n    this.windowstate = new WindowState(this);\n     \n\n    //w.el.show_all();\n    var tl = new Clutter.Timeline(6000);\n    tl.set_repeat_count(-1);\n    tl.start();\n    tl.ref();\n\n    this.children_loaded = true;\n\n\n\n\n}\n",
   "# int no_windows" : 1,
   "# Project.Project project" : "null",
   "# bool children_loaded" : false,
   "|             void hideCodeEdit" : "() {\n    //this.code_editor.saveContents();\n     _this.backbutton.el.hide();\n\n      _this.projectbutton.el.show(); \n       _this.projecteditbutton.el.show();\n       _this.editfilebutton.el.show();   \n       \n       \n       \n     _this.codeeditview.el.save_easing_state();\n    var el = _this.rooview.el;\n    el.save_easing_state();\n\n    \n    el.set_scale(1.0f,1.0f);\n    _this.codeeditview.el.set_scale(0.0f,0.0f);\n    _this.state = \"edit\";\n\n \n    //_this.clutterfiles.loadProject(_this.project);\n\n    el.restore_easing_state();\n     _this.codeeditview.el.restore_easing_state();  \n }",
   "|             void showAddProp" : "() {\n\n     \n     var ae =      this.left_tree.getActiveElement();\n    if (ae == null) {\n        return;\n    }\n     _this.backbutton.el.show();\n       _this.projectbutton.el.hide();\n    _this.editfilebutton.el.hide();\n    _this.projecteditbutton.el.hide();    \n    \n     \n     \n    //this.rooview.el.hide();\n    this.add_props.el.show_all();\n    this.add_props.show(\n        Palete.factory(this.project.xtype), \n        \"props\",\n        ae.fqn()\n    );\n\n    _this.addpropsview.el.save_easing_state();\n        \n    var el = _this.rooview.el;\n    el.save_easing_state();\n    _this.clutterembed.setSizesAlloc(\"addprop\");\n     \n     \n\n    _this.addpropsview.el.set_scale(1.0f,1.0f);\n   \n   \n \n    //_this.clutterfiles.loadProject(_this.project);\n\n    el.restore_easing_state();\n    _this.addpropsview.el.restore_easing_state();\n    this.state = \"addprop\";\n}",
   "|             void showViewEditing" : "  ( )  {\n     this.editpane.el.show();\n  //   this.rooview.el.show();\n     this.left_projects.el.hide();\n    \n    _this.addprojectbutton.el.hide();   \n    _this.delprojectbutton.el.hide();\n    _this.addfilebutton.el.hide();       \n    _this.backbutton.el.hide();\n   _this.new_window.el.hide();      \n        \n        \n      _this.projectbutton.el.show();         \n    _this.editfilebutton.el.show();   \n   _this.projecteditbutton.el.show();\n  _this.objectshowbutton.el.show();\n  _this.addpropbutton.el.show();      \n  _this.addlistenerbutton.el.show();   \n\n      \n    var el = _this.rooview.el;\n        el.save_easing_state();\n  \n    \n        el.set_rotation_angle(Clutter.RotateAxis.Y_AXIS, 0.0f);\n        el.set_scale(1.0f,1.0f);\n        _this.state = \"edit\";\n       // _this.mainpane.el.set_position(_this.leftpane.lastWidth);\n        _this.clutterfiles.el.hide();\n    \n    el.restore_easing_state();\n        \n    print(\"show view editing\");\n}",
   "border_width" : 0,
   "|             void hideProjectEdit" : " () {\n    // return to editing state..\n       \n      _this.projectbutton.el.show();\n     _this.projecteditbutton.el.show();\n      _this.backbutton.el.hide();\n         _this.editfilebutton.el.show();   \n\n     \n       if (this.project.xtype == \"Roo\") {\n        \n        //this.projectsettings.show(this.project);\n    } else {\n\n        this.vala_projectsettings.project.writeConfig();\n    }\n    _this.projecteditview.el.save_easing_state();\n    var el = _this.rooview.el;\n    el.save_easing_state();\n\n    \n    el.set_scale(1.0f,1.0f);\n       _this.projecteditview.el.set_scale(1.0f,0.0f);\n    _this.state = \"edit\";\n\n \n    //_this.clutterfiles.loadProject(_this.project);\n\n    el.restore_easing_state();\n      _this.projecteditview.el.restore_easing_state();  \n  \n}\n",
   "default_height" : 500,
   "# Xcls_WindowLeftProjects left_projects" : "null",
   "id" : "MainWindow",
   "|             void showProjectEdit" : " () {\n    // make the browser smaller, and show the edit dialog\n    \n    \n     _this.projectbutton.el.hide();\n     _this.projecteditbutton.el.hide();\n     _this.editfilebutton.el.hide();\n     \n    _this.backbutton.el.show();\n     \n    //this.rooview.el.hide();\n    \n    \n    if (this.project.xtype == \"Roo\") {\n        this.projectsettings.el.show_all();\n        this.projectsettings.show(this.project);\n    } else {\n        this.vala_projectsettings.el.show_all();\n        this.vala_projectsettings.show((Project.Gtk)this.project);\n    }\n    _this.projecteditview.el.save_easing_state();\n        \n    var el = _this.rooview.el;\n    el.save_easing_state();\n   \n    \n    el.set_scale(0.5f,0.5f);\n\n    _this.projecteditview.el.set_scale(1.0f,1.0f);\n   \n    _this.state = \"projectedit\";\n     \n \n    //_this.clutterfiles.loadProject(_this.project);\n\n    el.restore_easing_state();\n    _this.projecteditview.el.restore_easing_state();\n  //  print(\"show view browsing\");\n    \n}\n",
   "# Xcls_WindowRooView window_rooview" : "null",
   "|             void showAddListener" : "() {\n\n     \n     \n    var ae =      this.left_tree.getActiveElement();\n    if (ae == null) {\n        return;\n    }\n     \n   _this.backbutton.el.show();\n    _this.projectbutton.el.hide();\n    _this.editfilebutton.el.hide();\n    _this.projecteditbutton.el.hide();    \n    \n    \n    //this.rooview.el.hide();\n    this.add_props.el.show_all();\n    this.add_props.show(\n        Palete.factory(this.project.xtype), \n        \"signals\",\n        ae.fqn()\n    );\n    //this.rightpalete.show(this.project);\n\n    _this.addpropsview.el.save_easing_state();\n        \n    var el = _this.rooview.el;\n    el.save_easing_state();\n   \n      _this.clutterembed.setSizesAlloc(\"addlistener\");\n\n    \n  \n\n    _this.addpropsview.el.set_scale(1.0f,1.0f);\n   \n   \n \n    //_this.clutterfiles.loadProject(_this.project);\n\n    el.restore_easing_state();\n    _this.addpropsview.el.restore_easing_state();\n    this.state = \"addlistener\";\n}",
   "default_width" : 800,
   "xtype" : "Window",
   "$ type" : "Gtk.WindowType.TOPLEVEL",
   "|             void hideAddProp" : "() {\n      _this.backbutton.el.hide();\n     _this.projectbutton.el.show(); \n          _this.projecteditbutton.el.show();\n         _this.editfilebutton.el.show();   \n     _this.addpropsview.el.save_easing_state();\n     \n    var el = _this.rooview.el;\n    el.save_easing_state();\n\n    \n    el.set_scale(1.0f,1.0f);\n    _this.addpropsview.el.set_scale(0.0f,0.0f);\n    _this.state = \"edit\";\n\n \n    //_this.clutterfiles.loadProject(_this.project);\n\n    el.restore_easing_state();\n     _this.addpropsview.el.restore_easing_state();  \n }",
   "# Xcls_WindowLeftTree left_tree" : "null",
   "# Editor code_editor" : "null",
   "|             void showCodeEdit" : "(JsRender.JsRender file, JsRender.Node node, string ptype, string key)\n{\n    // this is a bit different,\n    // it's not called via a button - but triggered by the prop edit class signal.\n    // so it has to hide any other state..\n    \n    switch(this.state) {\n        case \"object\":\n            this.hideObject();\n            break;\n        case \"addprop\":\n            this.hideAddProp();\n            break;\n        case \"addlistener\":\n            this.hideAddListener();\n            break;\n    }\n \n   _this.backbutton.el.show();\n   \n    _this.projectbutton.el.hide();\n    _this.editfilebutton.el.hide();\n    _this.projecteditbutton.el.hide();    \n   // more?? \n     \n    //this.rooview.el.hide();\n    this.code_editor.el.show_all();\n    this.code_editor.show(\n        file,\n        node,\n        ptype,\n        key\n    );\n\n    _this.codeeditview.el.save_easing_state();\n        \n    var el = _this.rooview.el;\n    el.save_easing_state();\n    _this.clutterembed.setSizesAlloc(\"codedit\");\n   \n    _this.codeeditview.el.set_scale(1.0f,1.0f);\n   \n   \n \n    //_this.clutterfiles.loadProject(_this.project);\n\n    el.restore_easing_state();\n    _this.codeeditview.el.restore_easing_state();\n    this.state = \"codeedit\";\n}\n",
   "# Xcls_DialogNewComponent new_file_dialog" : "null",
   "WindowState windowstate" : "null",
   "# Xcls_ProjectSettings projectsettings" : "null",
   "|             void setTitle" : " (string str) {\n    this.el.set_title(this.title + \" - \" + str);\n}\n",
   "|             void show" : "() {\n    this.left_tree =new Xcls_WindowLeftTree();\n    _this.vbox.el.pack_start(this.left_tree.el,true, true,0);\n    this.el.show_all();\n\n}",
   "$ xns" : "Gtk",
   "# Xcls_ClutterFiles clutterfiles" : "null",
   "# Xcls_LeftProps left_props" : "null",
   "|             void hideViewEditing" : "  ( )   {\n\n// show the file navigation...\n    this.windowstate.set(WindowState.State.FILES);\n\n}",
   "# Xcls_RightPalete rightpalete" : "null",
   "# string title" : "\"Application Builder\"",
   "# ValaProjectSettings vala_projectsettings" : "null",
   "# Xcls_WindowAddProp add_props" : "null",
   "|             void showObject" : "() {\n\n     \n    // what's the active node on the left hand side..\n    \n    var n = _this.left_tree.getActiveElement();\n\n    if (_this.left_tree.model.file == null) {\n        return;\n    }\n    \n    if (n == null && _this.left_tree.model.file.tree != null) {\n        return;\n    }\n    \n     _this.backbutton.el.show();\n       _this.projectbutton.el.hide();\n    _this.editfilebutton.el.hide();\n    _this.projecteditbutton.el.hide();    \n    \n     \n    //this.rooview.el.hide();\n    this.rightpalete.el.show_all();\n    this.rightpalete.load(_this.left_tree.getActiveFile().palete(), n == null ? \"*top\" : n.fqn());\n\n    \n    //this.rightpalete.show(this.project);\n\n    _this.objectview.el.save_easing_state();\n        \n    var el = _this.rooview.el;\n    el.save_easing_state();\n   \n     _this.clutterembed.setSizesAlloc(\"object\");\n    \n\n    _this.objectview.el.set_scale(1.0f,1.0f);\n   \n   \n \n    //_this.clutterfiles.loadProject(_this.project);\n\n    el.restore_easing_state();\n    _this.objectview.el.restore_easing_state();\n    this.state = \"object\";\n}",
   "* init" : " this.state = \"files\";\n\t  \n    //this.el.show_all();\n    \n    ",
   "|             void hideObject" : "() {\n      // return to editing state..\n       \n          _this.projecteditbutton.el.show();\n      _this.backbutton.el.hide();\n     _this.projectbutton.el.show(); \n         _this.editfilebutton.el.show();   \n     _this.objectview.el.save_easing_state();\n    var el = _this.rooview.el;\n    el.save_easing_state();\n\n    \n    el.set_scale(1.0f,1.0f);\n    _this.objectview.el.set_scale(0.0f,0.0f);\n    _this.state = \"edit\";\n\n \n    //_this.clutterfiles.loadProject(_this.project);\n\n    el.restore_easing_state();\n     _this.objectview.el.restore_easing_state();  \n \n\n}",
   "# Xcls_GtkView window_gladeview" : "null",
   "items" : [
    {
     "id" : "vbox",
     "* pack" : "add",
     "xtype" : "VBox",
     "$ xns" : "Gtk",
     "$ homogeneous" : false,
     "items" : [
      {
       "id" : "mainpane",
       "position" : 400,
       "* pack" : "pack_end,true,true,0",
       "# int lastWidth" : 0,
       "xtype" : "HPaned",
       "$ xns" : "Gtk",
       "items" : [
        {
         "id" : "leftpane",
         "xtype" : "VBox",
         "* pack" : "add1",
         "$ xns" : "Gtk",
         "items" : [
          {
           "id" : "editpane",
           "xtype" : "VPaned",
           "* pack" : "pack_start,false,true,0",
           "$ xns" : "Gtk",
           "items" : [
            {
             "id" : "tree",
             "xtype" : "VBox",
             "* pack" : "add1",
             "$ xns" : "Gtk"
            },
            {
             "id" : "props",
             "xtype" : "VBox",
             "* pack" : "add2",
             "$ xns" : "Gtk"
            }
           ]
          }
         ]
        },
        {
         "* pack" : "add2",
         "xtype" : "VBox",
         "$ xns" : "Gtk",
         "items" : [
          {
           "listeners" : {
            "size_allocate" : "  (  alloc) => {\n    this.windowstate.resizeCanvasElements(alloc); \n        \n}"
           },
           "id" : "clutterembed",
           "* init" : "    var stage = this.el.get_stage();\n    stage.set_background_color(  Clutter.Color.from_string(\"#000\"));\n    \n    \n",
           "xtype" : "Embed",
           "* pack" : "pack_start,true,true,0",
           "$ xns" : "GtkClutter",
           "items" : [
            {
             "id" : "rooview",
             "* init" : "{\n   \n   \n    this.el.add_constraint(\n        new Clutter.AlignConstraint(\n            _this.clutterembed.el.get_stage(), \n            Clutter.AlignAxis.X_AXIS,\n            1.0f\n        )\n    );\n        \n    //this.el.set_position(100,100);\n    this.el.set_pivot_point(1.0f,1.0f);\n    \n    this.el.set_size(_this.clutterembed.el.get_stage().width-50,\n            _this.clutterembed.el.get_stage().height);\n            \n}",
             "xtype" : "Actor",
             "* pack" : "get_stage().add_child",
             "$ xns" : "GtkClutter"
            },
            {
             "id" : "objectview",
             "* init" : "{\n   \n   /*\n    this.el.add_constraint(\n        new Clutter.AlignConstraint(\n            _this.clutterembed.el.get_stage(), \n            Clutter.AlignAxis.X_AXIS,\n            0.0f\n        )\n    );\n    */\n    this.el.fixed_x = 50.0f;\n    this.el.fixed_y = 0.0f;\n    //this.el.set_position(100,100);\n    this.el.set_pivot_point(0.0f,0.0f);\n    this.el.set_scale(0.0f,1.0f);\n    this.el.set_size((_this.clutterembed.el.get_stage().width-50)/2,\n            _this.clutterembed.el.get_stage().height);\n            \n}",
             "xtype" : "Actor",
             "* pack" : "get_stage().add_child",
             "$ xns" : "GtkClutter"
            },
            {
             "id" : "codeeditview",
             "* init" : "{\n   \n   /*\n    this.el.add_constraint(\n        new Clutter.AlignConstraint(\n            _this.clutterembed.el.get_stage(), \n            Clutter.AlignAxis.X_AXIS,\n            0.0f\n        )\n    );\n    */\n    this.el.fixed_x = 50.0f;\n    this.el.fixed_y = 0.0f;\n    //this.el.set_position(100,100);\n    this.el.set_pivot_point(0.0f,0.0f);\n    this.el.set_scale(0.0f,1.0f);\n    this.el.set_size((_this.clutterembed.el.get_stage().width-50)/2,\n            _this.clutterembed.el.get_stage().height);\n            \n}",
             "xtype" : "Actor",
             "* pack" : "get_stage().add_child",
             "$ xns" : "GtkClutter"
            },
            {
             "id" : "addpropsview",
             "* init" : "{\n   \n   /*\n    this.el.add_constraint(\n        new Clutter.AlignConstraint(\n            _this.clutterembed.el.get_stage(), \n            Clutter.AlignAxis.X_AXIS,\n            0.0f\n        )\n    );\n    */\n    this.el.fixed_x = 50.0f;\n    this.el.fixed_y = 0.0f;\n    //this.el.set_position(100,100);\n    this.el.set_pivot_point(0.0f,0.0f);\n    this.el.set_scale(0.0f,1.0f);\n    this.el.set_size((_this.clutterembed.el.get_stage().width-50)/2,\n            _this.clutterembed.el.get_stage().height);\n            \n}",
             "xtype" : "Actor",
             "* pack" : "get_stage().add_child",
             "$ xns" : "GtkClutter"
            },
            {
             "id" : "projecteditview",
             "* init" : "{\n   \n   \n    this.el.add_constraint(\n        new Clutter.AlignConstraint(\n            _this.clutterembed.el.get_stage(), \n            Clutter.AlignAxis.X_AXIS,\n            1.0f\n        )\n    );\n        \n    //this.el.set_position(100,100);\n    this.el.set_pivot_point(0.0f,0.0f);\n    this.el.set_scale(1.0f,0.0f);\n    this.el.set_size(_this.clutterembed.el.get_stage().width-50,\n            _this.clutterembed.el.get_stage().height /2);\n            \n}",
             "xtype" : "Actor",
             "* pack" : "get_stage().add_child",
             "$ xns" : "GtkClutter"
            },
            {
             "id" : "buttonlayout",
             "* init" : "{\n    \n    this.el.add_constraint(\n        new Clutter.AlignConstraint(\n            _this.clutterembed.el.get_stage(), \n            Clutter.AlignAxis.X_AXIS,\n            0.0f\n        )\n    );\n     \n    \n    //this.el.set_position(100,100);\n    this.el.set_pivot_point(0.5f,0.5f);\n     this.el.set_size(50,\n           _this.clutterembed.el.get_stage().height);\n     \n}",
             "xtype" : "Actor",
             "* pack" : "get_stage().add_child",
             "$ xns" : "Clutter",
             "items" : [
              {
               "$ orientation" : "Clutter.Orientation.VERTICAL",
               "xtype" : "BoxLayout",
               "$ xns" : "Clutter",
               "* prop" : "layout_manager"
              },
              {
               "id" : "backbutton",
               "* init" : "this.el.set_size(50,50);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "xtype" : "Actor",
                 "* pack" : "add_child",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n    switch (_this.state) {\n        case \"edit\":\n        \n            _this.hideViewEditing();\n            break;  \n        case \"files\":\n            // should only occur if there is an active file..\n            _this.showViewEditing();\n            break; \n            \n          case \"addprop\":\n            _this.hideAddProp();\n\n            break;\n        case \"addlistener\":\n            _this.hideAddListener();\n\n            break;\n             \n         case \"object\":\n            _this.hideObject();\n            break;    \n         \n         case \"codeedit\":\n            \n            _this.hideCodeEdit();  \n            break;\n            \n         case  \"projectedit\":\n         // save?\n            _this.hideProjectEdit();\n            break;\n            \n        default:\n            break;\n    }\n    return  ;    \n\n}"
                   },
                   "utf8 tooltip_text" : "Back",
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "height_request" : 50,
                   "items" : [
                    {
                     "* pack" : "set_image",
                     "xtype" : "Image",
                     "utf8 icon_name" : "go-previous",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "projectbutton",
               "* init" : "this.el.set_size(50,50);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n    switch (_this.state) {\n        case \"edit\":\n        \n            _this.hideViewEditing();\n            break;  \n        case \"files\":\n            _this.showViewEditing();\n            break; \n            \n          case \"addprop\":\n            _this.hideAddProp();\n            _this.hideViewEditing();\n            break;\n        case \"addlistener\":\n            _this.hideAddListener();\n            _this.hideViewEditing();\n            break;\n             \n         case \"object\":\n            _this.hideObject();\n            _this.hideViewEditing();\n            break;    \n            \n        default:\n            break;\n    }\n    return  ;    \n\n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "height_request" : 50,
                   "$ tooltop_text" : "\"Open File\"",
                   "items" : [
                    {
                     "utf8 icon_name" : "document-open",
                     "* pack" : "set_image",
                     "xtype" : "Image",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "editfilebutton",
               "* init" : "this.el.set_size(50.0f,50.0f);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n  \n    // create a new file in project..\n    if (_this.project == null || _this.left_tree.model.file == null) {\n        return  ;\n    }\n     \n    _this.new_file_dialog.show(_this.left_tree.model.file);\n    \n    return  ;    \n\n\n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "$ tooltip_text" : "\"File Details\"",
                   "height_request" : 50,
                   "items" : [
                    {
                     "xtype" : "Image",
                     "utf8 icon_name" : "document-properties",
                     "* pack" : "set_image",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "projecteditbutton",
               "* init" : "this.el.set_size(50,50);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n    switch (_this.state) {\n        case \"edit\":\n            _this.showProjectEdit();\n            break;  \n        case \"files\":\n            // _this.showViewEditing();\n            break; \n        case \"projectedit\":\n            _this.hideProjectEdit();\n            break;\n            \n            \n              \n        case \"addprop\":\n            _this.hideAddProp();\n            _this.showProjectEdit();\n            break;\n        case \"addlistener\":\n            _this.hideAddListener();\n            _this.showProjectEdit();\n            break;\n             \n         case \"object\":\n            _this.hideObject();\n            _this.showProjectEdit();    \n            break;\n        default:\n            break;\n    }\n    return  ;    \n\n\n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "$ tooltip_text" : "\"Project Details\"",
                   "height_request" : 50,
                   "items" : [
                    {
                     "* pack" : "set_image",
                     "xtype" : "Image",
                     "utf8 icon_name" : "emblem-system",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "listeners" : {
                "button_press_event" : "  ( ) => {\n    \n    \n    \n    switch (_this.state) {\n\n \n        case \"addprop\":\n            _this.hideAddProp();\n            _this.showObject();\n            break;\n    case \"addlistener\":\n            _this.hideAddListener();\n            _this.showObject();\n            break;\n\n// show            \n        case \"edit\":\n            _this.showObject();\n            break;\n            \n// hide            \n        case \"object\":\n            _this.hideObject();\n            break;\n            break;\n                        \n        default:\n            print(\"unhandled add objects from %s\\n\",_this.state);\n            break;\n    }\n    return false;    \n\n\n}",
                "enter_event" : "(  event)  => {\n    this.el.background_color = new Clutter.Color.from_string(\"#333\");\n        return false;\n}",
                "leave_event" : "(  event)  => {\n    this.el.background_color = new Clutter.Color.from_string(\"#000\");\n    return false;\n}"
               },
               "id" : "objectshowbutton",
               "* init" : "this.el.set_size(50,50);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n    \n    \n    \n    switch (_this.state) {\n\n \n        case \"addprop\":\n            _this.hideAddProp();\n            _this.showObject();\n            break;\n    case \"addlistener\":\n            _this.hideAddListener();\n            _this.showObject();\n            break;\n\n// show            \n        case \"edit\":\n            _this.showObject();\n            break;\n            \n// hide            \n        case \"object\":\n            _this.hideObject();\n            break;\n            break;\n                        \n        default:\n            print(\"unhandled add objects from %s\\n\",_this.state);\n            break;\n    }\n    return  ;    \n\n\n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "$ tooltip_text" : "\"Add Child Element\"",
                   "height_request" : 50,
                   "items" : [
                    {
                     "utf8 icon_name" : "list-add",
                     "* pack" : "set_image",
                     "xtype" : "Image",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "addpropbutton",
               "* init" : "this.el.set_size(50,50);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n    \n    \n    \n    switch (_this.state) {\n        case \"edit\":\n            _this.showAddProp();\n            break;\n            \n        case \"object\":\n            _this.hideObject();\n            _this.showAddProp();\n            break;\n       \n        case \"addlistener\":\n            _this.hideAddListener();\n            _this.showAddProp();            \n            break;\n            \n            \n        case \"addprop\":\n            _this.hideAddProp();\n            break;\n            \n        default:\n            print(\"unhandled add property from %s\\n\",_this.state);\n            break;\n            \n    }\n    return  ;    \n\n\n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "$ tooltip_text" : "\"Add Property\"",
                   "height_request" : 50,
                   "items" : [
                    {
                     "xtype" : "Image",
                     "utf8 icon_name" : "format-justify-left",
                     "* pack" : "set_image",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "addlistenerbutton",
               "* init" : "this.el.set_size(50,50);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n    \n    \n    \n    switch (_this.state) {\n        case \"edit\":\n            _this.showAddListener();\n            break;\n            \n       \n        case \"addlistener\":\n            _this.hideAddListener();\n            break;\n\n            \n        case \"addprop\":\n            _this.hideAddProp();\n            _this.showAddListener();\n            break;\n         case \"object\":\n            _this.hideObject();\n            _this.showAddListener();\n            break;\n    \n          default:\n            print(\"unhandled add listener from %s\\n\",_this.state);\n\n            break;\n            \n    }\n    return  ;    \n\n\n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "$ tooltip_text" : "\"Add Event Code\"",
                   "height_request" : 50,
                   "items" : [
                    {
                     "* pack" : "set_image",
                     "xtype" : "Image",
                     "utf8 icon_name" : "appointment-new",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "addprojectbutton",
               "* init" : "this.el.set_size(50.0f,50.0f);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n  \n    // create a new file in project..\n    //Xcls_DialogNewComponent.singleton().show(\n   var  pe =     Xcls_EditProject.singleton();\n    pe.el.set_transient_for(_this.el);\n    pe.el.set_modal(true);   \n   \n    var p  = pe.show();\n\n    if (p == null) {\n        return;\n    }\n    _this.left_projects.is_loaded = false;    \n    _this.left_projects.load();\n    _this.left_projects.selectProject(p);\n    return  ;    \n\n\n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "$ tooltip_text" : "\"New\\nProj.\"",
                   "height_request" : 50,
                   "items" : [
                    {
                     "xtype" : "Image",
                     "utf8 icon_name" : "folder-new",
                     "* pack" : "set_image",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "addfilebutton",
               "* init" : "this.el.set_size(50.0f,50.0f);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : " () => {\n    // create a new file in project..\n    \n    // what's the currently selected project...\n    var proj = _this.left_projects.getSelectedProject();\n    \n    if (proj == null) {\n        return  ;\n    }\n    \n    \n    \n    var f = JsRender.JsRender.factory(proj.xtype,  proj, \"\");\n    _this.project = proj;\n    _this.new_file_dialog.show(f);\n    \n    return  ;    \n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "$ tooltip_text" : "\"Add File\"",
                   "height_request" : 50,
                   "items" : [
                    {
                     "utf8 icon_name" : "document-new",
                     "* pack" : "set_image",
                     "xtype" : "Image",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "delprojectbutton",
               "* init" : "this.el.set_size(50,50);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n     \n     var cd = DialogConfirm.singleton();\n     cd.el.set_transient_for(_this.el);\n    cd.el.set_modal(true);\n\n     var project =   _this.left_projects.getSelectedProject();\n    if (project == null) {\n        print(\"SKIP - no project\\n\");\n        return;\n    }\n    \n        \n     if (Gtk.ResponseType.YES != cd.show(\"Confirm\", \n        \"Are you sure you want to delete project %s\".printf(project.name))) {\n        return;\n    }\n     \n\n    // confirm?\n    Project.Project.remove(project);\n    _this.project = null;\n    \n    _this.left_projects.is_loaded =  false;\n    _this.left_projects.load();\n    _this.clutterfiles.clearFiles();\n\n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "$ tooltip_text" : "\"Delelte Project\"",
                   "height_request" : 50,
                   "items" : [
                    {
                     "xtype" : "Image",
                     "utf8 icon_name" : "user-trash",
                     "* pack" : "set_image",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "new_window",
               "* init" : "this.el.set_size(50,50);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n        Xcls_MainWindow.singleton().no_windows++;\n        var w = new Xcls_MainWindow();\n        w.ref();\n\n        w.el.show_all();\n        w.initChildren();\n        w.hideViewEditing();\n}"
                   },
                   "utf8 tooltip_text" : "Open New Window",
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "height_request" : 50,
                   "items" : [
                    {
                     "xtype" : "Image",
                     "utf8 icon_name" : "window-new",
                     "* pack" : "set_image",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          }
         ]
        }
       ]
      }
     ]
    }
   ]
  }
 ]
}