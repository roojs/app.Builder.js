{
    "id": "file-gtk-2",
    "name": "ClutterFiles",
    "parent": "",
    "title": false,
    "path": "/home/alan/gitlive/app.Builder.js/Builder4/ClutterFiles.bjs",
    "items": [
        {
            "listeners": {
                "scroll_event": "( event)  => {\n\n    print(\"scroll event\");\n    var y = this.filelayout.el.y;\n    var dir = event.direction;\n    switch (dir) {\n        case Clutter.ScrollDirection.UP:\n            y += event.y;\n            break;\n        case Clutter.ScrollDirection.DOWN:\n            y -= event.y;\n            break;\n        default:\n            return false;\n    }\n    // range of scroll -- can go up -- eg.. -ve value.\n    \n    y = float.min(0, y);\n   // y = float.min(0, y);    //??\n    print(\"scroll event of %f  - new y = %f \".printf(event.y, y));\n    this.filelayout.el.y = y;\n    return true;\n        \n}"
            },
            "id": "ClutterFiles",
            "scroll_mode": "Clutter.ScrollMode.VERTICAL",
            "xtype": "ScrollActor",
            "|reactive": "true",
            "|void:set_size": "(float w, float h) {\n    _this.filelayout_manager.el.max_column_width = w - 150;\n   this.el.set_size(this.el.get_stage().width-150,\n                        this.el.get_stage().height);\n            this.el.set_position(100,50);\n}\n",
            "|void:show": "(Project.Project pr) {\n    // list all the files, and create new Xcls_fileitem for each one.\n    \n    var fiter = pr.files.map_iterator();\n    while (fiter.next()) {\n        var a = new Xcls_fileitem(this,fiter.get_value());\n        a.ref();\n        print(\"add \" + fiter.get_value().name + \"\\n\");\n        this.filelayout.el.add_child(a.el);\n    }\n    this.el.show_all();\n}\n",
            "|xns": "Clutter",
            "items": [
                {
                    "id": "filelayout",
                    "pack": "add_child",
                    "xtype": "Actor",
                    "|init": "\nthis.el.add_constraint(\n    new Clutter.BindConstraint(_this.el,Clutter.BindCoordinate.SIZE, 0.0f)\n);\n\n",
                    "|reactive": "true",
                    "|xns": "Clutter",
                    "items": [
                        {
                            "*prop": "layout_manager",
                            "column_spacing": 20,
                            "id": "filelayout_manager",
                            "row_spacing": 20,
                            "xtype": "FlowLayout",
                            "|homogeneous": "true",
                            "|orientation": "Clutter.FlowOrientation.HORIZONTAL",
                            "|xns": "Clutter"
                        },
                        {
                            "*args": "JsRender.JsRender file",
                            "id": "*fileitem",
                            "pack": false,
                            "xtype": "Actor",
                            "|init": "this.el.set_size(100,100);",
                            "|xns": "Clutter",
                            "items": [
                                {
                                    "*prop": "layout_manager",
                                    "spacing": 4,
                                    "xtype": "BoxLayout",
                                    "|orientation": "Clutter.Orientation.VERTICAL",
                                    "|xns": "Clutter"
                                },
                                {
                                    "*args": "JsRender.JsRender file",
                                    ".ctor": "new Clutter.Texture.from_file(file.getIconFile())",
                                    "id": "+image",
                                    "pack": "add_child",
                                    "xtype": "Texture",
                                    "|x_align": "Clutter.ActorAlign.START",
                                    "|x_expand": "true",
                                    "|xns": "Clutter",
                                    "|y_align": "Clutter.ActorAlign.START",
                                    "|y_expand": "false"
                                },
                                {
                                    "*args": "JsRender.JsRender file",
                                    ".ctor": "new Clutter.Text.full(\"Sans 10px\", file.nickName(),new Clutter.Color.from_string(\"#fff\"))",
                                    "id": "+title",
                                    "pack": "add_child",
                                    "xtype": "Text",
                                    "|x_align": "Clutter.ActorAlign.START",
                                    "|x_expand": "true",
                                    "|xns": "Clutter",
                                    "|y_align": "Clutter.ActorAlign.START",
                                    "|y_expand": "false"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],
    "permname": "",
    "modOrder": ""
}