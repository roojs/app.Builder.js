/* webkit2gtk-4.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "WebKit", gir_namespace = "WebKit2", gir_version = "3.0", lower_case_cprefix = "webkit_")]
namespace WebKit {
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_authentication_request_get_type ()")]
	public class AuthenticationRequest : GLib.Object {
		[CCode (has_construct_function = false)]
		protected AuthenticationRequest ();
		public void authenticate (WebKit.Credential? credential);
		public bool can_save_credentials ();
		public void cancel ();
		public unowned string get_host ();
		public uint get_port ();
		public WebKit.Credential get_proposed_credential ();
		public unowned string get_realm ();
		public WebKit.AuthenticationScheme get_scheme ();
		public bool is_for_proxy ();
		public bool is_retry ();
		public signal void cancelled ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_back_forward_list_get_type ()")]
	public class BackForwardList : GLib.Object {
		[CCode (has_construct_function = false)]
		protected BackForwardList ();
		public unowned WebKit.BackForwardListItem get_back_item ();
		public GLib.List<weak WebKit.BackForwardListItem> get_back_list ();
		public GLib.List<weak WebKit.BackForwardListItem> get_back_list_with_limit (uint limit);
		public unowned WebKit.BackForwardListItem get_current_item ();
		public unowned WebKit.BackForwardListItem get_forward_item ();
		public GLib.List<weak WebKit.BackForwardListItem> get_forward_list ();
		public GLib.List<weak WebKit.BackForwardListItem> get_forward_list_with_limit (uint limit);
		public uint get_length ();
		public unowned WebKit.BackForwardListItem get_nth_item (int index);
		public signal void changed (WebKit.BackForwardListItem? item_added, void* items_removed);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_back_forward_list_item_get_type ()")]
	public class BackForwardListItem : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		protected BackForwardListItem ();
		public unowned string get_original_uri ();
		public unowned string get_title ();
		public unowned string get_uri ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_context_menu_get_type ()")]
	public class ContextMenu : GLib.Object {
		[CCode (has_construct_function = false)]
		public ContextMenu ();
		public void append (WebKit.ContextMenuItem item);
		public unowned WebKit.ContextMenuItem first ();
		public unowned WebKit.ContextMenuItem get_item_at_position (uint position);
		public unowned GLib.List<WebKit.ContextMenuItem> get_items ();
		public uint get_n_items ();
		public void insert (WebKit.ContextMenuItem item, int position);
		public unowned WebKit.ContextMenuItem last ();
		public void move_item (WebKit.ContextMenuItem item, int position);
		public void prepend (WebKit.ContextMenuItem item);
		public void remove (WebKit.ContextMenuItem item);
		public void remove_all ();
		[CCode (has_construct_function = false)]
		public ContextMenu.with_items (GLib.List<WebKit.ContextMenuItem> items);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_context_menu_item_get_type ()")]
	public class ContextMenuItem : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		public ContextMenuItem (Gtk.Action action);
		[CCode (has_construct_function = false)]
		public ContextMenuItem.from_stock_action (WebKit.ContextMenuAction action);
		[CCode (has_construct_function = false)]
		public ContextMenuItem.from_stock_action_with_label (WebKit.ContextMenuAction action, string label);
		public unowned Gtk.Action get_action ();
		public WebKit.ContextMenuAction get_stock_action ();
		public unowned WebKit.ContextMenu get_submenu ();
		public bool is_separator ();
		[CCode (has_construct_function = false)]
		public ContextMenuItem.separator ();
		public void set_submenu (WebKit.ContextMenu? submenu);
		[CCode (has_construct_function = false)]
		public ContextMenuItem.with_submenu (string label, WebKit.ContextMenu submenu);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_cookie_manager_get_type ()")]
	public class CookieManager : GLib.Object {
		[CCode (has_construct_function = false)]
		protected CookieManager ();
		public void delete_all_cookies ();
		public void delete_cookies_for_domain (string domain);
		public async WebKit.CookieAcceptPolicy get_accept_policy (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (array_length = false, array_null_terminated = true)]
		public async string[] get_domains_with_cookies (GLib.Cancellable? cancellable) throws GLib.Error;
		public void set_accept_policy (WebKit.CookieAcceptPolicy policy);
		public void set_persistent_storage (string filename, WebKit.CookiePersistentStorage storage);
		public signal void changed ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "webkit_credential_get_type ()")]
	[Compact]
	public class Credential {
		[CCode (has_construct_function = false)]
		public Credential (string username, string password, WebKit.CredentialPersistence persistence);
		public WebKit.Credential copy ();
		public void free ();
		public unowned string get_password ();
		public WebKit.CredentialPersistence get_persistence ();
		public unowned string get_username ();
		public bool has_password ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_download_get_type ()")]
	public class Download : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Download ();
		public void cancel ();
		public unowned string get_destination ();
		public double get_elapsed_time ();
		public double get_estimated_progress ();
		public uint64 get_received_data_length ();
		public unowned WebKit.URIRequest get_request ();
		public unowned WebKit.URIResponse get_response ();
		public unowned WebKit.WebView get_web_view ();
		public void set_destination (string uri);
		public string destination { get; }
		public double estimated_progress { get; }
		public WebKit.URIResponse response { get; }
		public signal void created_destination (string destination);
		public virtual signal bool decide_destination (string suggested_filename);
		public signal void failed (void* error);
		public signal void finished ();
		public signal void received_data (uint64 data_length);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_favicon_database_get_type ()")]
	public class FaviconDatabase : GLib.Object {
		[CCode (has_construct_function = false)]
		protected FaviconDatabase ();
		public void clear ();
		public async Cairo.Surface get_favicon (string page_uri, GLib.Cancellable? cancellable) throws GLib.Error;
		public string get_favicon_uri (string page_uri);
		public signal void favicon_changed (string page_uri, string favicon_uri);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_file_chooser_request_get_type ()")]
	public class FileChooserRequest : GLib.Object {
		[CCode (has_construct_function = false)]
		protected FileChooserRequest ();
		public void cancel ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_mime_types ();
		public unowned Gtk.FileFilter get_mime_types_filter ();
		public bool get_select_multiple ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_selected_files ();
		public void select_files ([CCode (array_length = false, array_null_terminated = true)] string[] files);
		[NoAccessorMethod]
		public Gtk.FileFilter filter { owned get; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] mime_types { get; }
		public bool select_multiple { get; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] selected_files { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_find_controller_get_type ()")]
	public class FindController : GLib.Object {
		[CCode (has_construct_function = false)]
		protected FindController ();
		public void count_matches (string search_text, uint32 find_options, uint max_match_count);
		public uint get_max_match_count ();
		public uint32 get_options ();
		public unowned string get_search_text ();
		public unowned WebKit.WebView get_web_view ();
		public void search (string search_text, uint32 find_options, uint max_match_count);
		public void search_finish ();
		public void search_next ();
		public void search_previous ();
		public uint max_match_count { get; }
		public WebKit.FindOptions options { get; }
		[NoAccessorMethod]
		public string text { owned get; }
		public WebKit.WebView web_view { get; construct; }
		public signal void counted_matches (uint match_count);
		public signal void failed_to_find_text ();
		public signal void found_text (uint match_count);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_form_submission_request_get_type ()")]
	public class FormSubmissionRequest : GLib.Object {
		[CCode (has_construct_function = false)]
		protected FormSubmissionRequest ();
		public unowned GLib.HashTable<void*,void*> get_text_fields ();
		public void submit ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_geolocation_permission_request_get_type ()")]
	public class GeolocationPermissionRequest : GLib.Object, WebKit.PermissionRequest {
		[CCode (has_construct_function = false)]
		protected GeolocationPermissionRequest ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_hit_test_result_get_type ()")]
	public class HitTestResult : GLib.Object {
		[CCode (has_construct_function = false)]
		protected HitTestResult ();
		public bool context_is_editable ();
		public bool context_is_image ();
		public bool context_is_link ();
		public bool context_is_media ();
		public bool context_is_scrollbar ();
		public uint get_context ();
		public unowned string get_image_uri ();
		public unowned string get_link_label ();
		public unowned string get_link_title ();
		public unowned string get_link_uri ();
		public unowned string get_media_uri ();
		public uint context { get; construct; }
		public string image_uri { get; construct; }
		public string link_label { get; construct; }
		public string link_title { get; construct; }
		public string link_uri { get; construct; }
		public string media_uri { get; construct; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", ref_function = "webkit_javascript_result_ref", type_id = "webkit_javascript_result_get_type ()", unref_function = "webkit_javascript_result_unref")]
	[Compact]
	public class JavascriptResult {
		public WebKit.JavascriptResult @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", ref_function = "webkit_mime_info_ref", type_id = "webkit_mime_info_get_type ()", unref_function = "webkit_mime_info_unref")]
	[Compact]
	public class MimeInfo {
		public unowned string get_description ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_extensions ();
		public unowned string get_mime_type ();
		public WebKit.MimeInfo @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "webkit_navigation_action_get_type ()")]
	[Compact]
	public class NavigationAction {
		public WebKit.NavigationAction copy ();
		public void free ();
		public uint get_modifiers ();
		public uint get_mouse_button ();
		public WebKit.NavigationType get_navigation_type ();
		public unowned WebKit.URIRequest get_request ();
		public bool is_user_gesture ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_navigation_policy_decision_get_type ()")]
	public class NavigationPolicyDecision : WebKit.PolicyDecision {
		[CCode (has_construct_function = false)]
		protected NavigationPolicyDecision ();
		public unowned string get_frame_name ();
		public uint get_modifiers ();
		public uint get_mouse_button ();
		public WebKit.NavigationType get_navigation_type ();
		public unowned WebKit.URIRequest get_request ();
		public string frame_name { get; }
		public uint modifiers { get; }
		public uint mouse_button { get; }
		public WebKit.NavigationType navigation_type { get; }
		public WebKit.URIRequest request { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_plugin_get_type ()")]
	public class Plugin : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Plugin ();
		public unowned string get_description ();
		public unowned GLib.List<WebKit.MimeInfo> get_mime_info_list ();
		public unowned string get_name ();
		public unowned string get_path ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_policy_decision_get_type ()")]
	public abstract class PolicyDecision : GLib.Object {
		[CCode (has_construct_function = false)]
		protected PolicyDecision ();
		public void download ();
		public void ignore ();
		public void use ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_print_operation_get_type ()")]
	public class PrintOperation : GLib.Object {
		[CCode (has_construct_function = false)]
		public PrintOperation (WebKit.WebView web_view);
		public unowned Gtk.PageSetup get_page_setup ();
		public unowned Gtk.PrintSettings get_print_settings ();
		public void print ();
		public WebKit.PrintOperationResponse run_dialog (Gtk.Window? parent);
		public void set_page_setup (Gtk.PageSetup page_setup);
		public void set_print_settings (Gtk.PrintSettings print_settings);
		public Gtk.PageSetup page_setup { get; set; }
		public Gtk.PrintSettings print_settings { get; set; }
		[NoAccessorMethod]
		public WebKit.WebView web_view { owned get; construct; }
		public signal void failed (void* error);
		public signal void finished ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_response_policy_decision_get_type ()")]
	public class ResponsePolicyDecision : WebKit.PolicyDecision {
		[CCode (has_construct_function = false)]
		protected ResponsePolicyDecision ();
		public unowned WebKit.URIRequest get_request ();
		public unowned WebKit.URIResponse get_response ();
		public bool is_mime_type_supported ();
		public WebKit.URIRequest request { get; }
		public WebKit.URIResponse response { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "webkit_script_dialog_get_type ()")]
	[Compact]
	public class ScriptDialog {
		public void confirm_set_confirmed (bool confirmed);
		public WebKit.ScriptDialogType get_dialog_type ();
		public unowned string get_message ();
		public unowned string prompt_get_default_text ();
		public void prompt_set_text (string text);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_security_manager_get_type ()")]
	public class SecurityManager : GLib.Object {
		[CCode (has_construct_function = false)]
		protected SecurityManager ();
		public void register_uri_scheme_as_cors_enabled (string scheme);
		public void register_uri_scheme_as_display_isolated (string scheme);
		public void register_uri_scheme_as_empty_document (string scheme);
		public void register_uri_scheme_as_local (string scheme);
		public void register_uri_scheme_as_no_access (string scheme);
		public void register_uri_scheme_as_secure (string scheme);
		public bool uri_scheme_is_cors_enabled (string scheme);
		public bool uri_scheme_is_display_isolated (string scheme);
		public bool uri_scheme_is_empty_document (string scheme);
		public bool uri_scheme_is_local (string scheme);
		public bool uri_scheme_is_no_access (string scheme);
		public bool uri_scheme_is_secure (string scheme);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_settings_get_type ()")]
	public class Settings : GLib.Object {
		[CCode (has_construct_function = false)]
		public Settings ();
		public bool get_allow_modal_dialogs ();
		public bool get_auto_load_images ();
		public unowned string get_cursive_font_family ();
		public unowned string get_default_charset ();
		public unowned string get_default_font_family ();
		public uint32 get_default_font_size ();
		public uint32 get_default_monospace_font_size ();
		public bool get_draw_compositing_indicators ();
		public bool get_enable_accelerated_2d_canvas ();
		public bool get_enable_caret_browsing ();
		public bool get_enable_developer_extras ();
		public bool get_enable_dns_prefetching ();
		public bool get_enable_frame_flattening ();
		public bool get_enable_fullscreen ();
		public bool get_enable_html5_database ();
		public bool get_enable_html5_local_storage ();
		public bool get_enable_hyperlink_auditing ();
		public bool get_enable_java ();
		public bool get_enable_javascript ();
		public bool get_enable_media_stream ();
		public bool get_enable_mediasource ();
		public bool get_enable_offline_web_application_cache ();
		public bool get_enable_page_cache ();
		public bool get_enable_plugins ();
		public bool get_enable_private_browsing ();
		public bool get_enable_resizable_text_areas ();
		public bool get_enable_site_specific_quirks ();
		public bool get_enable_smooth_scrolling ();
		public bool get_enable_spatial_navigation ();
		public bool get_enable_tabs_to_links ();
		public bool get_enable_webaudio ();
		public bool get_enable_webgl ();
		public bool get_enable_write_console_messages_to_stdout ();
		public bool get_enable_xss_auditor ();
		public unowned string get_fantasy_font_family ();
		public bool get_javascript_can_access_clipboard ();
		public bool get_javascript_can_open_windows_automatically ();
		public bool get_load_icons_ignoring_image_load_setting ();
		public bool get_media_playback_allows_inline ();
		public bool get_media_playback_requires_user_gesture ();
		public uint32 get_minimum_font_size ();
		public unowned string get_monospace_font_family ();
		public unowned string get_pictograph_font_family ();
		public bool get_print_backgrounds ();
		public unowned string get_sans_serif_font_family ();
		public unowned string get_serif_font_family ();
		public unowned string get_user_agent ();
		public bool get_zoom_text_only ();
		public void set_allow_modal_dialogs (bool allowed);
		public void set_auto_load_images (bool enabled);
		public void set_cursive_font_family (string cursive_font_family);
		public void set_default_charset (string default_charset);
		public void set_default_font_family (string default_font_family);
		public void set_default_font_size (uint32 font_size);
		public void set_default_monospace_font_size (uint32 font_size);
		public void set_draw_compositing_indicators (bool enabled);
		public void set_enable_accelerated_2d_canvas (bool enabled);
		public void set_enable_caret_browsing (bool enabled);
		public void set_enable_developer_extras (bool enabled);
		public void set_enable_dns_prefetching (bool enabled);
		public void set_enable_frame_flattening (bool enabled);
		public void set_enable_fullscreen (bool enabled);
		public void set_enable_html5_database (bool enabled);
		public void set_enable_html5_local_storage (bool enabled);
		public void set_enable_hyperlink_auditing (bool enabled);
		public void set_enable_java (bool enabled);
		public void set_enable_javascript (bool enabled);
		public void set_enable_media_stream (bool enabled);
		public void set_enable_mediasource (bool enabled);
		public void set_enable_offline_web_application_cache (bool enabled);
		public void set_enable_page_cache (bool enabled);
		public void set_enable_plugins (bool enabled);
		public void set_enable_private_browsing (bool enabled);
		public void set_enable_resizable_text_areas (bool enabled);
		public void set_enable_site_specific_quirks (bool enabled);
		public void set_enable_smooth_scrolling (bool enabled);
		public void set_enable_spatial_navigation (bool enabled);
		public void set_enable_tabs_to_links (bool enabled);
		public void set_enable_webaudio (bool enabled);
		public void set_enable_webgl (bool enabled);
		public void set_enable_write_console_messages_to_stdout (bool enabled);
		public void set_enable_xss_auditor (bool enabled);
		public void set_fantasy_font_family (string fantasy_font_family);
		public void set_javascript_can_access_clipboard (bool enabled);
		public void set_javascript_can_open_windows_automatically (bool enabled);
		public void set_load_icons_ignoring_image_load_setting (bool enabled);
		public void set_media_playback_allows_inline (bool enabled);
		public void set_media_playback_requires_user_gesture (bool enabled);
		public void set_minimum_font_size (uint32 font_size);
		public void set_monospace_font_family (string monospace_font_family);
		public void set_pictograph_font_family (string pictograph_font_family);
		public void set_print_backgrounds (bool print_backgrounds);
		public void set_sans_serif_font_family (string sans_serif_font_family);
		public void set_serif_font_family (string serif_font_family);
		public void set_user_agent (string? user_agent);
		public void set_user_agent_with_application_details (string? application_name, string? application_version);
		public void set_zoom_text_only (bool zoom_text_only);
		public bool allow_modal_dialogs { get; set construct; }
		public bool auto_load_images { get; set construct; }
		public string cursive_font_family { get; set construct; }
		public string default_charset { get; set construct; }
		public string default_font_family { get; set construct; }
		public uint default_font_size { get; set construct; }
		public uint default_monospace_font_size { get; set construct; }
		public bool draw_compositing_indicators { get; set construct; }
		public bool enable_accelerated_2d_canvas { get; set construct; }
		public bool enable_caret_browsing { get; set construct; }
		public bool enable_developer_extras { get; set construct; }
		public bool enable_dns_prefetching { get; set construct; }
		public bool enable_frame_flattening { get; set construct; }
		public bool enable_fullscreen { get; set construct; }
		public bool enable_html5_database { get; set construct; }
		public bool enable_html5_local_storage { get; set construct; }
		public bool enable_hyperlink_auditing { get; set construct; }
		public bool enable_java { get; set construct; }
		public bool enable_javascript { get; set construct; }
		public bool enable_media_stream { get; set construct; }
		public bool enable_mediasource { get; set construct; }
		public bool enable_offline_web_application_cache { get; set construct; }
		public bool enable_page_cache { get; set construct; }
		public bool enable_plugins { get; set construct; }
		public bool enable_private_browsing { get; set construct; }
		public bool enable_resizable_text_areas { get; set construct; }
		public bool enable_site_specific_quirks { get; set construct; }
		public bool enable_smooth_scrolling { get; set construct; }
		public bool enable_spatial_navigation { get; set construct; }
		public bool enable_tabs_to_links { get; set construct; }
		public bool enable_webaudio { get; set construct; }
		public bool enable_webgl { get; set construct; }
		public bool enable_write_console_messages_to_stdout { get; set construct; }
		public bool enable_xss_auditor { get; set construct; }
		public string fantasy_font_family { get; set construct; }
		public bool javascript_can_access_clipboard { get; set construct; }
		public bool javascript_can_open_windows_automatically { get; set construct; }
		public bool load_icons_ignoring_image_load_setting { get; set construct; }
		public bool media_playback_allows_inline { get; set construct; }
		public bool media_playback_requires_user_gesture { get; set construct; }
		public uint minimum_font_size { get; set construct; }
		public string monospace_font_family { get; set construct; }
		public string pictograph_font_family { get; set construct; }
		public bool print_backgrounds { get; set construct; }
		public string sans_serif_font_family { get; set construct; }
		public string serif_font_family { get; set construct; }
		public string user_agent { get; set construct; }
		public bool zoom_text_only { get; set construct; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_uri_request_get_type ()")]
	public class URIRequest : GLib.Object {
		[CCode (has_construct_function = false)]
		public URIRequest (string uri);
		public unowned Soup.MessageHeaders get_http_headers ();
		public unowned string get_uri ();
		public void set_uri (string uri);
		public string uri { get; set construct; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_uri_response_get_type ()")]
	public class URIResponse : GLib.Object {
		[CCode (has_construct_function = false)]
		protected URIResponse ();
		public uint64 get_content_length ();
		public unowned string get_mime_type ();
		public uint get_status_code ();
		public unowned string get_suggested_filename ();
		public unowned string get_uri ();
		public uint64 content_length { get; }
		public string mime_type { get; }
		public uint status_code { get; }
		public string suggested_filename { get; }
		public string uri { get; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_uri_scheme_request_get_type ()")]
	public class URISchemeRequest : GLib.Object {
		[CCode (has_construct_function = false)]
		protected URISchemeRequest ();
		public void finish (GLib.InputStream stream, int64 stream_length, string? mime_type);
		public void finish_error (GLib.Error error);
		public unowned string get_path ();
		public unowned string get_scheme ();
		public unowned string get_uri ();
		public unowned WebKit.WebView get_web_view ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_user_content_manager_get_type ()")]
	public class UserContentManager : GLib.Object {
		[CCode (has_construct_function = false)]
		public UserContentManager ();
		public void add_style_sheet (WebKit.UserStyleSheet stylesheet);
		public void remove_all_style_sheets ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", ref_function = "webkit_user_style_sheet_ref", type_id = "webkit_user_style_sheet_get_type ()", unref_function = "webkit_user_style_sheet_unref")]
	[Compact]
	public class UserStyleSheet {
		[CCode (has_construct_function = false)]
		public UserStyleSheet (string source, WebKit.UserContentInjectedFrames injected_frames, WebKit.UserStyleLevel level, [CCode (array_length = false, array_null_terminated = true)] string[]? whitelist, [CCode (array_length = false, array_null_terminated = true)] string[]? blacklist);
		public WebKit.UserStyleSheet @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_web_context_get_type ()")]
	public class WebContext : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebContext ();
		public void allow_tls_certificate_for_host (GLib.TlsCertificate certificate, string host);
		public void clear_cache ();
		public WebKit.Download download_uri (string uri);
		public WebKit.CacheModel get_cache_model ();
		public unowned WebKit.CookieManager get_cookie_manager ();
		public static unowned WebKit.WebContext get_default ();
		public unowned WebKit.FaviconDatabase get_favicon_database ();
		public unowned string get_favicon_database_directory ();
		public async GLib.List<WebKit.Plugin> get_plugins (GLib.Cancellable? cancellable) throws GLib.Error;
		public WebKit.ProcessModel get_process_model ();
		public unowned WebKit.SecurityManager get_security_manager ();
		public bool get_spell_checking_enabled ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_spell_checking_languages ();
		public WebKit.TLSErrorsPolicy get_tls_errors_policy ();
		public void prefetch_dns (string hostname);
		public void register_uri_scheme (string scheme, owned WebKit.URISchemeRequestCallback callback);
		public void set_additional_plugins_directory (string directory);
		public void set_cache_model (WebKit.CacheModel cache_model);
		public void set_disk_cache_directory (string directory);
		public void set_favicon_database_directory (string? path);
		public void set_preferred_languages ([CCode (array_length = false, array_null_terminated = true)] string[]? languages);
		public void set_process_model (WebKit.ProcessModel process_model);
		public void set_spell_checking_enabled (bool enabled);
		public void set_spell_checking_languages ([CCode (array_length = false, array_null_terminated = true)] string[] languages);
		public void set_tls_errors_policy (WebKit.TLSErrorsPolicy policy);
		public void set_web_extensions_directory (string directory);
		public void set_web_extensions_initialization_user_data (GLib.Variant user_data);
		public signal void download_started (WebKit.Download download);
		public signal void initialize_web_extensions ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_web_inspector_get_type ()")]
	public class WebInspector : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebInspector ();
		public void close ();
		public uint get_attached_height ();
		public unowned string get_inspected_uri ();
		public unowned WebKit.WebViewBase get_web_view ();
		public bool is_attached ();
		public void show ();
		public uint attached_height { get; }
		public string inspected_uri { get; }
		[HasEmitter]
		public signal bool attach ();
		public signal bool bring_to_front ();
		public signal void closed ();
		[HasEmitter]
		public signal bool detach ();
		public signal bool open_window ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_web_resource_get_type ()")]
	public class WebResource : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebResource ();
		public async uint8[] get_data (GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned WebKit.URIResponse get_response ();
		public unowned string get_uri ();
		public WebKit.URIResponse response { get; }
		public string uri { get; }
		public signal void failed (void* error);
		public signal void finished ();
		public signal void received_data (uint64 data_length);
		public signal void sent_request (WebKit.URIRequest request, WebKit.URIResponse redirected_response);
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_web_view_get_type ()")]
	public class WebView : WebKit.WebViewBase, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public WebView ();
		public async bool can_execute_editing_command (string command, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool can_go_back ();
		public bool can_go_forward ();
		public bool can_show_mime_type (string mime_type);
		public WebKit.Download download_uri (string uri);
		public void execute_editing_command (string command);
		public unowned WebKit.BackForwardList get_back_forward_list ();
		public unowned WebKit.WebContext get_context ();
		public unowned string get_custom_charset ();
		public double get_estimated_load_progress ();
		public unowned Cairo.Surface get_favicon ();
		public unowned WebKit.FindController get_find_controller ();
		public unowned WebKit.WebInspector get_inspector ();
		public unowned WebKit.WebResource get_main_resource ();
		public uint64 get_page_id ();
		public unowned WebKit.Settings get_settings ();
		public async Cairo.Surface get_snapshot (WebKit.SnapshotRegion region, WebKit.SnapshotOptions options, GLib.Cancellable? cancellable) throws GLib.Error;
		public unowned string get_title ();
		public bool get_tls_info (out unowned GLib.TlsCertificate certificate, out GLib.TlsCertificateFlags errors);
		public unowned string get_uri ();
		public unowned WebKit.UserContentManager get_user_content_manager ();
		public unowned WebKit.WindowProperties get_window_properties ();
		public double get_zoom_level ();
		public void go_back ();
		public void go_forward ();
		public void go_to_back_forward_list_item (WebKit.BackForwardListItem list_item);
		public void load_alternate_html (string content, string content_uri, string? base_uri);
		public void load_bytes (GLib.Bytes bytes, string? mime_type, string? encoding, string? base_uri);
		public void load_html (string content, string? base_uri);
		public void load_plain_text (string plain_text);
		public void load_request (WebKit.URIRequest request);
		public void load_uri (string uri);
		public Gtk.Widget new_with_related_view ();
		public void reload ();
		public void reload_bypass_cache ();
		public async WebKit.JavascriptResult run_javascript (string script, GLib.Cancellable? cancellable) throws GLib.Error;
		public async WebKit.JavascriptResult run_javascript_from_gresource (string resource, GLib.Cancellable? cancellable) throws GLib.Error;
		public async GLib.InputStream save (WebKit.SaveMode save_mode, GLib.Cancellable? cancellable) throws GLib.Error;
		public async bool save_to_file (GLib.File file, WebKit.SaveMode save_mode, GLib.Cancellable? cancellable) throws GLib.Error;
		public void set_custom_charset (string? charset);
		public void set_settings (WebKit.Settings settings);
		public void set_zoom_level (double zoom_level);
		public void stop_loading ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public WebView.with_context (WebKit.WebContext context);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public WebView.with_settings (WebKit.Settings settings);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public WebView.with_user_content_manager (WebKit.UserContentManager user_content_manager);
		public double estimated_load_progress { get; }
		public void* favicon { get; }
		[NoAccessorMethod]
		public bool is_loading { get; }
		public WebKit.WebView related_view { construct; }
		public WebKit.Settings settings { set construct; }
		public string title { get; }
		public string uri { get; }
		public WebKit.UserContentManager user_content_manager { get; construct; }
		[NoAccessorMethod]
		public WebKit.WebContext web_context { owned get; construct; }
		public double zoom_level { get; set; }
		public virtual signal bool authenticate (WebKit.AuthenticationRequest request);
		public virtual signal void close ();
		public virtual signal bool context_menu (WebKit.ContextMenu context_menu, Gdk.Event event, WebKit.HitTestResult hit_test_result);
		public virtual signal void context_menu_dismissed ();
		public signal Gtk.Widget create (WebKit.NavigationAction navigation_action);
		public virtual signal bool decide_policy (WebKit.PolicyDecision decision, WebKit.PolicyDecisionType type);
		public virtual signal bool enter_fullscreen ();
		public virtual signal void insecure_content_detected (WebKit.InsecureContentEvent event);
		public virtual signal bool leave_fullscreen ();
		public virtual signal void load_changed (WebKit.LoadEvent load_event);
		public virtual signal bool load_failed (WebKit.LoadEvent load_event, string failing_uri, void* error);
		public virtual signal bool load_failed_with_tls_errors (GLib.TlsCertificate certificate, GLib.TlsCertificateFlags errors, string host);
		public virtual signal void mouse_target_changed (WebKit.HitTestResult hit_test_result, uint modifiers);
		public virtual signal bool permission_request (WebKit.PermissionRequest permission_request);
		public virtual signal bool print (WebKit.PrintOperation print_operation);
		public virtual signal void ready_to_show ();
		public virtual signal void resource_load_started (WebKit.WebResource resource, WebKit.URIRequest request);
		public virtual signal void run_as_modal ();
		public virtual signal bool run_file_chooser (WebKit.FileChooserRequest request);
		public virtual signal bool script_dialog (WebKit.ScriptDialog dialog);
		public virtual signal void submit_form (WebKit.FormSubmissionRequest request);
		public virtual signal bool web_process_crashed ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_web_view_base_get_type ()")]
	public class WebViewBase : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		protected WebViewBase ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_window_properties_get_type ()")]
	public class WindowProperties : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WindowProperties ();
		public bool get_fullscreen ();
		public Gdk.Rectangle get_geometry ();
		public bool get_locationbar_visible ();
		public bool get_menubar_visible ();
		public bool get_resizable ();
		public bool get_scrollbars_visible ();
		public bool get_statusbar_visible ();
		public bool get_toolbar_visible ();
		public bool fullscreen { get; construct; }
		public Cairo.RectangleInt geometry { get; construct; }
		public bool locationbar_visible { get; construct; }
		public bool menubar_visible { get; construct; }
		public bool resizable { get; construct; }
		public bool scrollbars_visible { get; construct; }
		public bool statusbar_visible { get; construct; }
		public bool toolbar_visible { get; construct; }
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", type_id = "webkit_permission_request_get_type ()")]
	public interface PermissionRequest : GLib.Object {
		public abstract void allow ();
		public abstract void deny ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_AUTHENTICATION_SCHEME_", type_id = "webkit_authentication_scheme_get_type ()")]
	public enum AuthenticationScheme {
		DEFAULT,
		HTTP_BASIC,
		HTTP_DIGEST,
		HTML_FORM,
		NTLM,
		NEGOTIATE,
		CLIENT_CERTIFICATE_REQUESTED,
		SERVER_TRUST_EVALUATION_REQUESTED,
		UNKNOWN
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_CACHE_MODEL_", type_id = "webkit_cache_model_get_type ()")]
	public enum CacheModel {
		DOCUMENT_VIEWER,
		WEB_BROWSER,
		DOCUMENT_BROWSER
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_CONTEXT_MENU_ACTION_", type_id = "webkit_context_menu_action_get_type ()")]
	public enum ContextMenuAction {
		NO_ACTION,
		OPEN_LINK,
		OPEN_LINK_IN_NEW_WINDOW,
		DOWNLOAD_LINK_TO_DISK,
		COPY_LINK_TO_CLIPBOARD,
		OPEN_IMAGE_IN_NEW_WINDOW,
		DOWNLOAD_IMAGE_TO_DISK,
		COPY_IMAGE_TO_CLIPBOARD,
		COPY_IMAGE_URL_TO_CLIPBOARD,
		OPEN_FRAME_IN_NEW_WINDOW,
		GO_BACK,
		GO_FORWARD,
		STOP,
		RELOAD,
		COPY,
		CUT,
		PASTE,
		DELETE,
		SELECT_ALL,
		INPUT_METHODS,
		UNICODE,
		SPELLING_GUESS,
		NO_GUESSES_FOUND,
		IGNORE_SPELLING,
		LEARN_SPELLING,
		IGNORE_GRAMMAR,
		FONT_MENU,
		BOLD,
		ITALIC,
		UNDERLINE,
		OUTLINE,
		INSPECT_ELEMENT,
		OPEN_VIDEO_IN_NEW_WINDOW,
		OPEN_AUDIO_IN_NEW_WINDOW,
		COPY_VIDEO_LINK_TO_CLIPBOARD,
		COPY_AUDIO_LINK_TO_CLIPBOARD,
		TOGGLE_MEDIA_CONTROLS,
		TOGGLE_MEDIA_LOOP,
		ENTER_VIDEO_FULLSCREEN,
		MEDIA_PLAY,
		MEDIA_PAUSE,
		MEDIA_MUTE,
		DOWNLOAD_VIDEO_TO_DISK,
		DOWNLOAD_AUDIO_TO_DISK,
		CUSTOM
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_COOKIE_POLICY_ACCEPT_", type_id = "webkit_cookie_accept_policy_get_type ()")]
	public enum CookieAcceptPolicy {
		ALWAYS,
		NEVER,
		NO_THIRD_PARTY
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_COOKIE_PERSISTENT_STORAGE_", type_id = "webkit_cookie_persistent_storage_get_type ()")]
	public enum CookiePersistentStorage {
		TEXT,
		SQLITE
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_CREDENTIAL_PERSISTENCE_", type_id = "webkit_credential_persistence_get_type ()")]
	public enum CredentialPersistence {
		NONE,
		FOR_SESSION,
		PERMANENT
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_FIND_OPTIONS_", type_id = "webkit_find_options_get_type ()")]
	[Flags]
	public enum FindOptions {
		NONE,
		CASE_INSENSITIVE,
		AT_WORD_STARTS,
		TREAT_MEDIAL_CAPITAL_AS_WORD_START,
		BACKWARDS,
		WRAP_AROUND
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_HIT_TEST_RESULT_CONTEXT_", type_id = "webkit_hit_test_result_context_get_type ()")]
	[Flags]
	public enum HitTestResultContext {
		DOCUMENT,
		LINK,
		IMAGE,
		MEDIA,
		EDITABLE,
		SCROLLBAR
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_INSECURE_CONTENT_", type_id = "webkit_insecure_content_event_get_type ()")]
	public enum InsecureContentEvent {
		RUN,
		DISPLAYED
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_LOAD_", type_id = "webkit_load_event_get_type ()")]
	public enum LoadEvent {
		STARTED,
		REDIRECTED,
		COMMITTED,
		FINISHED
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_NAVIGATION_TYPE_", type_id = "webkit_navigation_type_get_type ()")]
	public enum NavigationType {
		LINK_CLICKED,
		FORM_SUBMITTED,
		BACK_FORWARD,
		RELOAD,
		FORM_RESUBMITTED,
		OTHER
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_POLICY_DECISION_TYPE_", type_id = "webkit_policy_decision_type_get_type ()")]
	public enum PolicyDecisionType {
		NAVIGATION_ACTION,
		NEW_WINDOW_ACTION,
		RESPONSE
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_PRINT_OPERATION_RESPONSE_", type_id = "webkit_print_operation_response_get_type ()")]
	public enum PrintOperationResponse {
		PRINT,
		CANCEL
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_PROCESS_MODEL_", type_id = "webkit_process_model_get_type ()")]
	public enum ProcessModel {
		SHARED_SECONDARY_PROCESS,
		MULTIPLE_SECONDARY_PROCESSES
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_SAVE_MODE_", type_id = "webkit_save_mode_get_type ()")]
	public enum SaveMode {
		MHTML
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_SCRIPT_DIALOG_", type_id = "webkit_script_dialog_type_get_type ()")]
	public enum ScriptDialogType {
		ALERT,
		CONFIRM,
		PROMPT
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_SNAPSHOT_OPTIONS_", type_id = "webkit_snapshot_options_get_type ()")]
	[Flags]
	public enum SnapshotOptions {
		NONE,
		INCLUDE_SELECTION_HIGHLIGHTING
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_SNAPSHOT_REGION_", type_id = "webkit_snapshot_region_get_type ()")]
	public enum SnapshotRegion {
		VISIBLE,
		FULL_DOCUMENT
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_TLS_ERRORS_POLICY_", type_id = "webkit_tls_errors_policy_get_type ()")]
	public enum TLSErrorsPolicy {
		IGNORE,
		FAIL
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_USER_CONTENT_INJECT_", type_id = "webkit_user_content_injected_frames_get_type ()")]
	public enum UserContentInjectedFrames {
		ALL_FRAMES,
		TOP_FRAME
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_USER_STYLE_LEVEL_", type_id = "webkit_user_style_level_get_type ()")]
	public enum UserStyleLevel {
		USER,
		AUTHOR
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_DOWNLOAD_ERROR_")]
	public errordomain DownloadError {
		NETWORK,
		CANCELLED_BY_USER,
		DESTINATION;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_FAVICON_DATABASE_ERROR_")]
	public errordomain FaviconDatabaseError {
		NOT_INITIALIZED,
		FAVICON_NOT_FOUND,
		FAVICON_UNKNOWN;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_JAVASCRIPT_ERROR_SCRIPT_")]
	public errordomain JavascriptError {
		FAILED;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_NETWORK_ERROR_")]
	public errordomain NetworkError {
		FAILED,
		TRANSPORT,
		UNKNOWN_PROTOCOL,
		CANCELLED,
		FILE_DOES_NOT_EXIST;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_PLUGIN_ERROR_")]
	public errordomain PluginError {
		FAILED,
		CANNOT_FIND_PLUGIN,
		CANNOT_LOAD_PLUGIN,
		JAVA_UNAVAILABLE,
		CONNECTION_CANCELLED,
		WILL_HANDLE_LOAD;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_POLICY_ERROR_")]
	public errordomain PolicyError {
		FAILED,
		CANNOT_SHOW_MIME_TYPE,
		CANNOT_SHOW_URI,
		FRAME_LOAD_INTERRUPTED_BY_POLICY_CHANGE,
		CANNOT_USE_RESTRICTED_PORT;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_PRINT_ERROR_")]
	public errordomain PrintError {
		GENERAL,
		PRINTER_NOT_FOUND,
		INVALID_PAGE_RANGE;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", cprefix = "WEBKIT_SNAPSHOT_ERROR_FAILED_TO_")]
	public errordomain SnapshotError {
		CREATE;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "webkit2/webkit2.h", instance_pos = 1.9)]
	public delegate void URISchemeRequestCallback (WebKit.URISchemeRequest request);
	[CCode (cheader_filename = "webkit2/webkit2.h", cname = "WEBKIT_EDITING_COMMAND_COPY")]
	public const string EDITING_COMMAND_COPY;
	[CCode (cheader_filename = "webkit2/webkit2.h", cname = "WEBKIT_EDITING_COMMAND_CUT")]
	public const string EDITING_COMMAND_CUT;
	[CCode (cheader_filename = "webkit2/webkit2.h", cname = "WEBKIT_EDITING_COMMAND_PASTE")]
	public const string EDITING_COMMAND_PASTE;
	[CCode (cheader_filename = "webkit2/webkit2.h", cname = "WEBKIT_EDITING_COMMAND_REDO")]
	public const string EDITING_COMMAND_REDO;
	[CCode (cheader_filename = "webkit2/webkit2.h", cname = "WEBKIT_EDITING_COMMAND_SELECT_ALL")]
	public const string EDITING_COMMAND_SELECT_ALL;
	[CCode (cheader_filename = "webkit2/webkit2.h", cname = "WEBKIT_EDITING_COMMAND_UNDO")]
	public const string EDITING_COMMAND_UNDO;
	[CCode (cheader_filename = "webkit2/webkit2.h", cname = "WEBKIT_MAJOR_VERSION")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "webkit2/webkit2.h", cname = "WEBKIT_MICRO_VERSION")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "webkit2/webkit2.h", cname = "WEBKIT_MINOR_VERSION")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "webkit2/webkit2.h")]
	public static uint get_major_version ();
	[CCode (cheader_filename = "webkit2/webkit2.h")]
	public static uint get_micro_version ();
	[CCode (cheader_filename = "webkit2/webkit2.h")]
	public static uint get_minor_version ();
	namespace DOM {
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_attr_get_type ()")]
		[GIR (name = "DOMAttr")]
		public class Attr : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Attr ();
			public string get_name ();
			public unowned WebKit.DOM.Element get_owner_element ();
			public bool get_specified ();
			public string get_value ();
			public void set_value (string value) throws GLib.Error;
			[NoAccessorMethod]
			public bool is_id { get; }
			public string name { owned get; }
			public WebKit.DOM.Element owner_element { get; }
			public bool specified { get; }
			public string value { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_blob_get_type ()")]
		[GIR (name = "DOMBlob")]
		public class Blob : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Blob ();
			public uint64 get_size ();
			public uint64 size { get; }
			[NoAccessorMethod]
			public string type { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_cdata_section_get_type ()")]
		[GIR (name = "DOMCDATASection")]
		public class CDATASection : WebKit.DOM.Text, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected CDATASection ();
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_css_rule_get_type ()")]
		[GIR (name = "DOMCSSRule")]
		public class CSSRule : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected CSSRule ();
			public string get_css_text ();
			public unowned WebKit.DOM.CSSRule get_parent_rule ();
			public unowned WebKit.DOM.CSSStyleSheet get_parent_style_sheet ();
			public ushort get_rule_type ();
			public void set_css_text (string value) throws GLib.Error;
			public string css_text { owned get; set; }
			public WebKit.DOM.CSSRule parent_rule { get; }
			public WebKit.DOM.CSSStyleSheet parent_style_sheet { get; }
			[NoAccessorMethod]
			public uint type { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_css_rule_list_get_type ()")]
		[GIR (name = "DOMCSSRuleList")]
		public class CSSRuleList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected CSSRuleList ();
			public ulong get_length ();
			public unowned WebKit.DOM.CSSRule item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_css_style_declaration_get_type ()")]
		[GIR (name = "DOMCSSStyleDeclaration")]
		public class CSSStyleDeclaration : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected CSSStyleDeclaration ();
			public string get_css_text ();
			public ulong get_length ();
			public unowned WebKit.DOM.CSSRule get_parent_rule ();
			public string get_property_priority (string propertyName);
			public string get_property_shorthand (string propertyName);
			public string get_property_value (string propertyName);
			public bool is_property_implicit (string propertyName);
			public string item (ulong index);
			public string remove_property (string propertyName) throws GLib.Error;
			public void set_css_text (string value) throws GLib.Error;
			public void set_property (string propertyName, string value, string priority) throws GLib.Error;
			public string css_text { owned get; set; }
			public ulong length { get; }
			public WebKit.DOM.CSSRule parent_rule { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_css_style_sheet_get_type ()")]
		[GIR (name = "DOMCSSStyleSheet")]
		public class CSSStyleSheet : WebKit.DOM.StyleSheet {
			[CCode (has_construct_function = false)]
			protected CSSStyleSheet ();
			public long add_rule (string selector, string style, ulong index) throws GLib.Error;
			public void delete_rule (ulong index) throws GLib.Error;
			public unowned WebKit.DOM.CSSRuleList get_css_rules ();
			public unowned WebKit.DOM.CSSRule get_owner_rule ();
			public unowned WebKit.DOM.CSSRuleList get_rules ();
			public ulong insert_rule (string rule, ulong index) throws GLib.Error;
			public void remove_rule (ulong index) throws GLib.Error;
			public WebKit.DOM.CSSRuleList css_rules { get; }
			public WebKit.DOM.CSSRule owner_rule { get; }
			public WebKit.DOM.CSSRuleList rules { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_css_value_get_type ()")]
		[GIR (name = "DOMCSSValue")]
		public class CSSValue : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected CSSValue ();
			public string get_css_text ();
			public ushort get_css_value_type ();
			public void set_css_text (string value) throws GLib.Error;
			public string css_text { owned get; set; }
			public uint css_value_type { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_character_data_get_type ()")]
		[GIR (name = "DOMCharacterData")]
		public class CharacterData : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected CharacterData ();
			public void append_data (string data) throws GLib.Error;
			public void delete_data (ulong offset, ulong length) throws GLib.Error;
			public string get_data ();
			public ulong get_length ();
			public void insert_data (ulong offset, string data) throws GLib.Error;
			public void replace_data (ulong offset, ulong length, string data) throws GLib.Error;
			public void set_data (string value) throws GLib.Error;
			public string substring_data (ulong offset, ulong length) throws GLib.Error;
			public string data { owned get; set; }
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_comment_get_type ()")]
		[GIR (name = "DOMComment")]
		public class Comment : WebKit.DOM.CharacterData, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Comment ();
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_implementation_get_type ()")]
		[GIR (name = "DOMDOMImplementation")]
		public class DOMImplementation : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected DOMImplementation ();
			public unowned WebKit.DOM.CSSStyleSheet create_css_style_sheet (string title, string media) throws GLib.Error;
			public unowned WebKit.DOM.Document create_document (string? namespaceURI, string qualifiedName, WebKit.DOM.DocumentType? doctype) throws GLib.Error;
			public unowned WebKit.DOM.DocumentType create_document_type (string qualifiedName, string publicId, string systemId) throws GLib.Error;
			public unowned WebKit.DOM.HTMLDocument create_html_document (string title);
			public bool has_feature (string feature, string version);
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_dom_window_get_type ()")]
		[GIR (name = "DOMDOMWindow")]
		public class DOMWindow : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected DOMWindow ();
			[NoAccessorMethod]
			public bool closed { get; }
			[NoAccessorMethod]
			public string default_status { owned get; set; }
			[NoAccessorMethod]
			public double device_pixel_ratio { get; }
			[NoAccessorMethod]
			public WebKit.DOM.Document document { owned get; }
			[NoAccessorMethod]
			public WebKit.DOM.Element frame_element { owned get; }
			[NoAccessorMethod]
			public WebKit.DOM.DOMWindow frames { owned get; }
			[NoAccessorMethod]
			public long inner_height { get; }
			[NoAccessorMethod]
			public long inner_width { get; }
			[NoAccessorMethod]
			public ulong length { get; }
			[NoAccessorMethod]
			public string name { owned get; set; }
			[NoAccessorMethod]
			public bool offscreen_buffering { get; }
			[NoAccessorMethod]
			public WebKit.DOM.DOMWindow opener { owned get; }
			[NoAccessorMethod]
			public long outer_height { get; }
			[NoAccessorMethod]
			public long outer_width { get; }
			[NoAccessorMethod]
			public long page_x_offset { get; }
			[NoAccessorMethod]
			public long page_y_offset { get; }
			[NoAccessorMethod]
			public WebKit.DOM.DOMWindow parent { owned get; }
			[NoAccessorMethod]
			public long screen_left { get; }
			[NoAccessorMethod]
			public long screen_top { get; }
			[NoAccessorMethod]
			public long screen_x { get; }
			[NoAccessorMethod]
			public long screen_y { get; }
			[NoAccessorMethod]
			public long scroll_x { get; }
			[NoAccessorMethod]
			public long scroll_y { get; }
			[NoAccessorMethod]
			public WebKit.DOM.DOMWindow self { owned get; }
			[NoAccessorMethod]
			public string status { owned get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.DOMWindow top { owned get; }
			[NoAccessorMethod]
			public WebKit.DOM.DOMWindow window { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_document_get_type ()")]
		[GIR (name = "DOMDocument")]
		public class Document : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Document ();
			public unowned WebKit.DOM.Node adopt_node (WebKit.DOM.Node source) throws GLib.Error;
			public unowned WebKit.DOM.Attr create_attribute (string name) throws GLib.Error;
			public unowned WebKit.DOM.Attr create_attribute_ns (string? namespaceURI, string qualifiedName) throws GLib.Error;
			public unowned WebKit.DOM.CDATASection create_cdata_section (string data) throws GLib.Error;
			public unowned WebKit.DOM.Comment create_comment (string data);
			public unowned WebKit.DOM.CSSStyleDeclaration create_css_style_declaration ();
			public unowned WebKit.DOM.DocumentFragment create_document_fragment ();
			public unowned WebKit.DOM.Element create_element (string tagName) throws GLib.Error;
			public unowned WebKit.DOM.Element create_element_ns (string? namespaceURI, string qualifiedName) throws GLib.Error;
			public unowned WebKit.DOM.EntityReference create_entity_reference (string? name) throws GLib.Error;
			public unowned WebKit.DOM.Event create_event (string eventType) throws GLib.Error;
			public unowned WebKit.DOM.XPathExpression create_expression (string expression, WebKit.DOM.XPathNSResolver resolver) throws GLib.Error;
			public unowned WebKit.DOM.NodeIterator create_node_iterator (WebKit.DOM.Node root, ulong whatToShow, WebKit.DOM.NodeFilter? filter, bool expandEntityReferences) throws GLib.Error;
			public unowned WebKit.DOM.XPathNSResolver create_ns_resolver (WebKit.DOM.Node nodeResolver);
			public unowned WebKit.DOM.ProcessingInstruction create_processing_instruction (string target, string data) throws GLib.Error;
			public unowned WebKit.DOM.Range create_range ();
			public unowned WebKit.DOM.Text create_text_node (string data);
			public unowned WebKit.DOM.TreeWalker create_tree_walker (WebKit.DOM.Node root, ulong whatToShow, WebKit.DOM.NodeFilter? filter, bool expandEntityReferences) throws GLib.Error;
			public unowned WebKit.DOM.Element element_from_point (long x, long y);
			public unowned WebKit.DOM.XPathResult evaluate (string expression, WebKit.DOM.Node contextNode, WebKit.DOM.XPathNSResolver? resolver, ushort type, WebKit.DOM.XPathResult? inResult) throws GLib.Error;
			public bool exec_command (string command, bool userInterface, string value);
			public unowned WebKit.DOM.Element get_active_element ();
			public unowned WebKit.DOM.HTMLCollection get_anchors ();
			public unowned WebKit.DOM.HTMLCollection get_applets ();
			public unowned WebKit.DOM.HTMLElement get_body ();
			public string get_character_set ();
			public string get_charset ();
			public string get_cookie () throws GLib.Error;
			public string get_default_charset ();
			public unowned WebKit.DOM.DOMWindow get_default_view ();
			public unowned WebKit.DOM.DocumentType get_doctype ();
			public unowned WebKit.DOM.Element get_document_element ();
			public string get_document_uri ();
			public string get_domain ();
			public unowned WebKit.DOM.Element get_element_by_id (string elementId);
			public unowned WebKit.DOM.NodeList get_elements_by_class_name (string tagname);
			public unowned WebKit.DOM.NodeList get_elements_by_name (string elementName);
			public unowned WebKit.DOM.NodeList get_elements_by_tag_name (string tagname);
			public unowned WebKit.DOM.NodeList get_elements_by_tag_name_ns (string namespaceURI, string localName);
			public unowned WebKit.DOM.HTMLCollection get_forms ();
			public unowned WebKit.DOM.HTMLHeadElement get_head ();
			public unowned WebKit.DOM.HTMLCollection get_images ();
			public unowned WebKit.DOM.DOMImplementation get_implementation ();
			public string get_input_encoding ();
			public string get_last_modified ();
			public unowned WebKit.DOM.HTMLCollection get_links ();
			public unowned WebKit.DOM.CSSStyleDeclaration get_override_style (WebKit.DOM.Element element, string? pseudoElement);
			public string get_preferred_stylesheet_set ();
			public string get_ready_state ();
			public string get_referrer ();
			public string get_selected_stylesheet_set ();
			public unowned WebKit.DOM.StyleSheetList get_style_sheets ();
			public string get_title ();
			public string get_url ();
			public string get_xml_encoding ();
			public bool get_xml_standalone ();
			public string get_xml_version ();
			public bool has_focus ();
			public unowned WebKit.DOM.Node import_node (WebKit.DOM.Node importedNode, bool deep) throws GLib.Error;
			public bool query_command_enabled (string command);
			public bool query_command_indeterm (string command);
			public bool query_command_state (string command);
			public bool query_command_supported (string command);
			public string query_command_value (string command);
			public unowned WebKit.DOM.Element query_selector (string selectors) throws GLib.Error;
			public unowned WebKit.DOM.NodeList query_selector_all (string selectors) throws GLib.Error;
			public void set_body (WebKit.DOM.HTMLElement value) throws GLib.Error;
			public void set_charset (string value);
			public void set_cookie (string value) throws GLib.Error;
			public void set_document_uri (string value);
			public void set_selected_stylesheet_set (string value);
			public void set_title (string value);
			public void set_xml_standalone (bool value) throws GLib.Error;
			public void set_xml_version (string value) throws GLib.Error;
			public WebKit.DOM.Element active_element { get; }
			public WebKit.DOM.HTMLCollection anchors { get; }
			public WebKit.DOM.HTMLCollection applets { get; }
			public WebKit.DOM.HTMLElement body { get; }
			public string character_set { owned get; }
			public string charset { owned get; set; }
			[NoAccessorMethod]
			public string compat_mode { owned get; }
			public string cookie { owned get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.HTMLScriptElement current_script { owned get; }
			public string default_charset { owned get; }
			public WebKit.DOM.DOMWindow default_view { get; }
			public WebKit.DOM.DocumentType doctype { get; }
			public WebKit.DOM.Element document_element { get; }
			public string document_uri { owned get; set; }
			public string domain { owned get; }
			public WebKit.DOM.HTMLCollection forms { get; }
			public WebKit.DOM.HTMLHeadElement head { get; }
			[NoAccessorMethod]
			public bool hidden { get; }
			public WebKit.DOM.HTMLCollection images { get; }
			public WebKit.DOM.DOMImplementation implementation { get; }
			public string input_encoding { owned get; }
			public string last_modified { owned get; }
			public WebKit.DOM.HTMLCollection links { get; }
			[NoAccessorMethod]
			public string origin { owned get; }
			[NoAccessorMethod]
			public WebKit.DOM.Element pointer_lock_element { owned get; }
			public string preferred_stylesheet_set { owned get; }
			public string ready_state { owned get; }
			public string referrer { owned get; }
			public string selected_stylesheet_set { owned get; set; }
			public WebKit.DOM.StyleSheetList style_sheets { get; }
			public string title { owned get; set; }
			public string url { owned get; }
			[NoAccessorMethod]
			public string visibility_state { owned get; }
			[NoAccessorMethod]
			public WebKit.DOM.Element webkit_current_full_screen_element { owned get; }
			[NoAccessorMethod]
			public bool webkit_full_screen_keyboard_input_allowed { get; }
			[NoAccessorMethod]
			public WebKit.DOM.Element webkit_fullscreen_element { owned get; }
			[NoAccessorMethod]
			public bool webkit_fullscreen_enabled { get; }
			[NoAccessorMethod]
			public bool webkit_is_full_screen { get; }
			public string xml_encoding { owned get; }
			public bool xml_standalone { get; set; }
			public string xml_version { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_document_fragment_get_type ()")]
		[GIR (name = "DOMDocumentFragment")]
		public class DocumentFragment : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected DocumentFragment ();
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_document_type_get_type ()")]
		[GIR (name = "DOMDocumentType")]
		public class DocumentType : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected DocumentType ();
			public unowned WebKit.DOM.NamedNodeMap get_entities ();
			public string get_internal_subset ();
			public string get_name ();
			public unowned WebKit.DOM.NamedNodeMap get_notations ();
			public string get_public_id ();
			public string get_system_id ();
			public WebKit.DOM.NamedNodeMap entities { get; }
			public string internal_subset { owned get; }
			public string name { owned get; }
			public WebKit.DOM.NamedNodeMap notations { get; }
			public string public_id { owned get; }
			public string system_id { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_element_get_type ()")]
		[GIR (name = "DOMElement")]
		public class Element : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Element ();
			public void blur ();
			public void focus ();
			public string get_attribute (string name);
			public unowned WebKit.DOM.Attr get_attribute_node (string name);
			public unowned WebKit.DOM.Attr get_attribute_node_ns (string namespaceURI, string localName);
			public string get_attribute_ns (string namespaceURI, string localName);
			public unowned WebKit.DOM.NamedNodeMap get_attributes ();
			public ulong get_child_element_count ();
			public string get_class_name ();
			public double get_client_height ();
			public double get_client_left ();
			public double get_client_top ();
			public double get_client_width ();
			public unowned WebKit.DOM.NodeList get_elements_by_class_name (string name);
			public unowned WebKit.DOM.NodeList get_elements_by_tag_name (string name);
			public unowned WebKit.DOM.NodeList get_elements_by_tag_name_ns (string namespaceURI, string localName);
			public unowned WebKit.DOM.Element get_first_element_child ();
			public string get_id ();
			public unowned WebKit.DOM.Element get_last_element_child ();
			public unowned WebKit.DOM.Element get_next_element_sibling ();
			public double get_offset_height ();
			public double get_offset_left ();
			public unowned WebKit.DOM.Element get_offset_parent ();
			public double get_offset_top ();
			public double get_offset_width ();
			public unowned WebKit.DOM.Element get_previous_element_sibling ();
			public long get_scroll_height ();
			public long get_scroll_left ();
			public long get_scroll_top ();
			public long get_scroll_width ();
			public unowned WebKit.DOM.CSSStyleDeclaration get_style ();
			public string get_tag_name ();
			public bool has_attribute (string name);
			public bool has_attribute_ns (string namespaceURI, string localName);
			public bool has_attributes ();
			public unowned WebKit.DOM.Element query_selector (string selectors) throws GLib.Error;
			public unowned WebKit.DOM.NodeList query_selector_all (string selectors) throws GLib.Error;
			public void remove_attribute (string name);
			public unowned WebKit.DOM.Attr remove_attribute_node (WebKit.DOM.Attr oldAttr) throws GLib.Error;
			public void remove_attribute_ns (string namespaceURI, string localName);
			public void scroll_by_lines (long lines);
			public void scroll_by_pages (long pages);
			public void scroll_into_view (bool alignWithTop);
			public void scroll_into_view_if_needed (bool centerIfNeeded);
			public void set_attribute (string name, string value) throws GLib.Error;
			public unowned WebKit.DOM.Attr set_attribute_node (WebKit.DOM.Attr newAttr) throws GLib.Error;
			public unowned WebKit.DOM.Attr set_attribute_node_ns (WebKit.DOM.Attr newAttr) throws GLib.Error;
			public void set_attribute_ns (string? namespaceURI, string qualifiedName, string value) throws GLib.Error;
			public void set_class_name (string value);
			public void set_id (string value);
			public void set_scroll_left (long value);
			public void set_scroll_top (long value);
			public WebKit.DOM.NamedNodeMap attributes { get; }
			public ulong child_element_count { get; }
			public string class_name { owned get; set; }
			public double client_height { get; }
			public double client_left { get; }
			public double client_top { get; }
			public double client_width { get; }
			public WebKit.DOM.Element first_element_child { get; }
			public string id { owned get; set; }
			public WebKit.DOM.Element last_element_child { get; }
			public WebKit.DOM.Element next_element_sibling { get; }
			public double offset_height { get; }
			public double offset_left { get; }
			public WebKit.DOM.Element offset_parent { get; }
			public double offset_top { get; }
			public double offset_width { get; }
			public WebKit.DOM.Element previous_element_sibling { get; }
			public long scroll_height { get; }
			public long scroll_left { get; set; }
			public long scroll_top { get; set; }
			public long scroll_width { get; }
			public WebKit.DOM.CSSStyleDeclaration style { get; }
			public string tag_name { owned get; }
			[NoAccessorMethod]
			public string webkit_region_overset { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_entity_reference_get_type ()")]
		[GIR (name = "DOMEntityReference")]
		public class EntityReference : WebKit.DOM.Node, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected EntityReference ();
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_event_get_type ()")]
		[GIR (name = "DOMEvent")]
		public class Event : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Event ();
			public bool get_bubbles ();
			public bool get_cancel_bubble ();
			public bool get_cancelable ();
			public unowned WebKit.DOM.EventTarget get_current_target ();
			public ushort get_event_phase ();
			public string get_event_type ();
			public bool get_return_value ();
			public unowned WebKit.DOM.EventTarget get_src_element ();
			public unowned WebKit.DOM.EventTarget get_target ();
			public uint32 get_time_stamp ();
			public void init_event (string eventTypeArg, bool canBubbleArg, bool cancelableArg);
			public void prevent_default ();
			public void set_cancel_bubble (bool value);
			public void set_return_value (bool value);
			public void stop_propagation ();
			public bool bubbles { get; }
			public bool cancel_bubble { get; set; }
			public bool cancelable { get; }
			public WebKit.DOM.EventTarget current_target { get; }
			[NoAccessorMethod]
			public bool default_prevented { get; }
			public uint event_phase { get; }
			public bool return_value { get; set; }
			public WebKit.DOM.EventTarget src_element { get; }
			public WebKit.DOM.EventTarget target { get; }
			public uint time_stamp { get; }
			[NoAccessorMethod]
			public string type { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_file_get_type ()")]
		[GIR (name = "DOMFile")]
		public class File : WebKit.DOM.Blob {
			[CCode (has_construct_function = false)]
			protected File ();
			public string get_name ();
			public string name { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_file_list_get_type ()")]
		[GIR (name = "DOMFileList")]
		public class FileList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected FileList ();
			public ulong get_length ();
			public unowned WebKit.DOM.File item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_anchor_element_get_type ()")]
		[GIR (name = "DOMHTMLAnchorElement")]
		public class HTMLAnchorElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLAnchorElement ();
			public string get_charset ();
			public string get_coords ();
			public string get_hash ();
			public string get_host ();
			public string get_hostname ();
			public string get_href ();
			public string get_hreflang ();
			public string get_name ();
			public string get_pathname ();
			public string get_port ();
			public string get_protocol ();
			public string get_rel ();
			public string get_rev ();
			public string get_search ();
			public string get_shape ();
			public string get_target ();
			public string get_text ();
			public string get_type_attr ();
			public void set_charset (string value);
			public void set_coords (string value);
			public void set_hash (string value);
			public void set_host (string value);
			public void set_hostname (string value);
			public void set_href (string value);
			public void set_hreflang (string value);
			public void set_name (string value);
			public void set_pathname (string value);
			public void set_port (string value);
			public void set_protocol (string value);
			public void set_rel (string value);
			public void set_rev (string value);
			public void set_search (string value);
			public void set_shape (string value);
			public void set_target (string value);
			public void set_type_attr (string value);
			public string charset { owned get; set; }
			public string coords { owned get; set; }
			[NoAccessorMethod]
			public string download { owned get; set; }
			public string hash { owned get; set; }
			public string host { owned get; set; }
			public string hostname { owned get; set; }
			public string href { owned get; set; }
			public string hreflang { owned get; set; }
			public string name { owned get; set; }
			[NoAccessorMethod]
			public string origin { owned get; }
			public string pathname { owned get; set; }
			[NoAccessorMethod]
			public string ping { owned get; set; }
			public string port { owned get; set; }
			public string protocol { owned get; set; }
			public string rel { owned get; set; }
			public string rev { owned get; set; }
			public string search { owned get; set; }
			public string shape { owned get; set; }
			public string target { owned get; set; }
			public string text { owned get; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_applet_element_get_type ()")]
		[GIR (name = "DOMHTMLAppletElement")]
		public class HTMLAppletElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLAppletElement ();
			public string get_align ();
			public string get_alt ();
			public string get_archive ();
			public string get_code ();
			public string get_code_base ();
			public string get_height ();
			public long get_hspace ();
			public string get_name ();
			public string get_object ();
			public long get_vspace ();
			public string get_width ();
			public void set_align (string value);
			public void set_alt (string value);
			public void set_archive (string value);
			public void set_code (string value);
			public void set_code_base (string value);
			public void set_height (string value);
			public void set_hspace (long value);
			public void set_name (string value);
			public void set_object (string value);
			public void set_vspace (long value);
			public void set_width (string value);
			public string align { owned get; set; }
			public string alt { owned get; set; }
			public string archive { owned get; set; }
			public string code { owned get; set; }
			public string code_base { owned get; set; }
			public string height { owned get; set; }
			public long hspace { get; set; }
			public string name { owned get; set; }
			public string object { owned get; set; }
			public long vspace { get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_area_element_get_type ()")]
		[GIR (name = "DOMHTMLAreaElement")]
		public class HTMLAreaElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLAreaElement ();
			public string get_alt ();
			public string get_coords ();
			public string get_hash ();
			public string get_host ();
			public string get_hostname ();
			public string get_href ();
			public bool get_no_href ();
			public string get_pathname ();
			public string get_port ();
			public string get_protocol ();
			public string get_search ();
			public string get_shape ();
			public string get_target ();
			public void set_alt (string value);
			public void set_coords (string value);
			public void set_href (string value);
			public void set_no_href (bool value);
			public void set_shape (string value);
			public void set_target (string value);
			public string alt { owned get; set; }
			public string coords { owned get; set; }
			public string hash { owned get; }
			public string host { owned get; }
			public string hostname { owned get; }
			public string href { owned get; set; }
			public bool no_href { get; set; }
			public string pathname { owned get; }
			[NoAccessorMethod]
			public string ping { owned get; set; }
			public string port { owned get; }
			public string protocol { owned get; }
			public string search { owned get; }
			public string shape { owned get; set; }
			public string target { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", lower_case_cprefix = "webkit_dom_html_br_element_", type_id = "webkit_dom_html_br_element_get_type ()")]
		[GIR (name = "DOMHTMLBRElement")]
		public class HTMLBRElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLBRElement ();
			public string get_clear ();
			public void set_clear (string value);
			public string clear { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_base_element_get_type ()")]
		[GIR (name = "DOMHTMLBaseElement")]
		public class HTMLBaseElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLBaseElement ();
			public string get_href ();
			public string get_target ();
			public void set_href (string value);
			public void set_target (string value);
			public string href { owned get; set; }
			public string target { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_base_font_element_get_type ()")]
		[GIR (name = "DOMHTMLBaseFontElement")]
		public class HTMLBaseFontElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLBaseFontElement ();
			public string get_color ();
			public string get_face ();
			public long get_size ();
			public void set_color (string value);
			public void set_face (string value);
			public void set_size (long value);
			public string color { owned get; set; }
			public string face { owned get; set; }
			public long size { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_body_element_get_type ()")]
		[GIR (name = "DOMHTMLBodyElement")]
		public class HTMLBodyElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLBodyElement ();
			public string get_a_link ();
			public string get_background ();
			public string get_bg_color ();
			public string get_link ();
			public string get_text ();
			public string get_v_link ();
			public void set_a_link (string value);
			public void set_background (string value);
			public void set_bg_color (string value);
			public void set_link (string value);
			public void set_text (string value);
			public void set_v_link (string value);
			public string a_link { owned get; set; }
			public string background { owned get; set; }
			public string bg_color { owned get; set; }
			public string link { owned get; set; }
			public string text { owned get; set; }
			public string v_link { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_button_element_get_type ()")]
		[GIR (name = "DOMHTMLButtonElement")]
		public class HTMLButtonElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLButtonElement ();
			public bool get_autofocus ();
			public string get_button_type ();
			public bool get_disabled ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_name ();
			public string get_value ();
			public bool get_will_validate ();
			public void set_autofocus (bool value);
			public void set_button_type (string value);
			public void set_disabled (bool value);
			public void set_name (string value);
			public void set_value (string value);
			public bool autofocus { get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			[NoAccessorMethod]
			public string form_action { owned get; set; }
			[NoAccessorMethod]
			public string form_enctype { owned get; set; }
			[NoAccessorMethod]
			public string form_method { owned get; set; }
			[NoAccessorMethod]
			public bool form_no_validate { get; set; }
			[NoAccessorMethod]
			public string form_target { owned get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.NodeList labels { owned get; }
			public string name { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
			[NoAccessorMethod]
			public string validation_message { owned get; }
			public string value { owned get; set; }
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_canvas_element_get_type ()")]
		[GIR (name = "DOMHTMLCanvasElement")]
		public class HTMLCanvasElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLCanvasElement ();
			public long get_height ();
			public long get_width ();
			public void set_height (long value);
			public void set_width (long value);
			public long height { get; set; }
			public long width { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_collection_get_type ()")]
		[GIR (name = "DOMHTMLCollection")]
		public class HTMLCollection : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected HTMLCollection ();
			public ulong get_length ();
			public unowned WebKit.DOM.Node item (ulong index);
			public unowned WebKit.DOM.Node named_item (string name);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", lower_case_cprefix = "webkit_dom_html_d_list_element_", type_id = "webkit_dom_html_d_list_element_get_type ()")]
		[GIR (name = "DOMHTMLDListElement")]
		public class HTMLDListElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLDListElement ();
			public bool get_compact ();
			public void set_compact (bool value);
			public bool compact { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_directory_element_get_type ()")]
		[GIR (name = "DOMHTMLDirectoryElement")]
		public class HTMLDirectoryElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLDirectoryElement ();
			public bool get_compact ();
			public void set_compact (bool value);
			public bool compact { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_div_element_get_type ()")]
		[GIR (name = "DOMHTMLDivElement")]
		public class HTMLDivElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLDivElement ();
			public string get_align ();
			public void set_align (string value);
			public string align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_document_get_type ()")]
		[GIR (name = "DOMHTMLDocument")]
		public class HTMLDocument : WebKit.DOM.Document, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLDocument ();
			public void capture_events ();
			public void clear ();
			public void close ();
			public string get_alink_color ();
			public string get_bg_color ();
			public string get_compat_mode ();
			public string get_design_mode ();
			public string get_dir ();
			public unowned WebKit.DOM.HTMLCollection get_embeds ();
			public string get_fg_color ();
			public long get_height ();
			public string get_link_color ();
			public unowned WebKit.DOM.HTMLCollection get_plugins ();
			public unowned WebKit.DOM.HTMLCollection get_scripts ();
			public string get_vlink_color ();
			public long get_width ();
			public void release_events ();
			public void set_alink_color (string value);
			public void set_bg_color (string value);
			public void set_design_mode (string value);
			public void set_dir (string value);
			public void set_fg_color (string value);
			public void set_link_color (string value);
			public void set_vlink_color (string value);
			public string alink_color { owned get; set; }
			public string bg_color { owned get; set; }
			public string compat_mode { owned get; }
			public string design_mode { owned get; set; }
			public string dir { owned get; set; }
			public WebKit.DOM.HTMLCollection embeds { get; }
			public string fg_color { owned get; set; }
			public long height { get; }
			public string link_color { owned get; set; }
			public WebKit.DOM.HTMLCollection plugins { get; }
			public WebKit.DOM.HTMLCollection scripts { get; }
			public string vlink_color { owned get; set; }
			public long width { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_element_get_type ()")]
		[GIR (name = "DOMHTMLElement")]
		public class HTMLElement : WebKit.DOM.Element, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLElement ();
			public void click ();
			public string get_access_key ();
			public unowned WebKit.DOM.HTMLCollection get_children ();
			public string get_content_editable ();
			public string get_dir ();
			public string get_inner_html ();
			public string get_inner_text ();
			public bool get_is_content_editable ();
			public string get_lang ();
			public string get_outer_html ();
			public string get_outer_text ();
			public long get_tab_index ();
			public string get_title ();
			public void set_access_key (string value);
			public void set_content_editable (string value) throws GLib.Error;
			public void set_dir (string value);
			public void set_inner_html (string value) throws GLib.Error;
			public void set_inner_text (string value) throws GLib.Error;
			public void set_lang (string value);
			public void set_outer_html (string value) throws GLib.Error;
			public void set_outer_text (string value) throws GLib.Error;
			public void set_tab_index (long value);
			public void set_title (string value);
			public string access_key { owned get; set; }
			public WebKit.DOM.HTMLCollection children { get; }
			public string content_editable { owned get; set; }
			public string dir { owned get; set; }
			[NoAccessorMethod]
			public bool draggable { get; set; }
			[NoAccessorMethod]
			public bool hidden { get; set; }
			public string inner_html { owned get; set; }
			public string inner_text { owned get; set; }
			public bool is_content_editable { get; }
			public string lang { owned get; set; }
			public string outer_html { owned get; set; }
			public string outer_text { owned get; set; }
			[NoAccessorMethod]
			public bool spellcheck { get; set; }
			public long tab_index { get; set; }
			public string title { owned get; set; }
			[NoAccessorMethod]
			public bool translate { get; set; }
			[NoAccessorMethod]
			public string webkitdropzone { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_embed_element_get_type ()")]
		[GIR (name = "DOMHTMLEmbedElement")]
		public class HTMLEmbedElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLEmbedElement ();
			public string get_align ();
			public long get_height ();
			public string get_name ();
			public string get_src ();
			public string get_type_attr ();
			public long get_width ();
			public void set_align (string value);
			public void set_height (long value);
			public void set_name (string value);
			public void set_src (string value);
			public void set_type_attr (string value);
			public void set_width (long value);
			public string align { owned get; set; }
			public long height { get; set; }
			public string name { owned get; set; }
			public string src { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
			public long width { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_field_set_element_get_type ()")]
		[GIR (name = "DOMHTMLFieldSetElement")]
		public class HTMLFieldSetElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLFieldSetElement ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			[NoAccessorMethod]
			public bool disabled { get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.HTMLCollection elements { owned get; }
			public WebKit.DOM.HTMLFormElement form { get; }
			[NoAccessorMethod]
			public string name { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; }
			[NoAccessorMethod]
			public string validation_message { owned get; }
			[NoAccessorMethod]
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_font_element_get_type ()")]
		[GIR (name = "DOMHTMLFontElement")]
		public class HTMLFontElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLFontElement ();
			public string get_color ();
			public string get_face ();
			public string get_size ();
			public void set_color (string value);
			public void set_face (string value);
			public void set_size (string value);
			public string color { owned get; set; }
			public string face { owned get; set; }
			public string size { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_form_element_get_type ()")]
		[GIR (name = "DOMHTMLFormElement")]
		public class HTMLFormElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLFormElement ();
			public string get_accept_charset ();
			public string get_action ();
			public unowned WebKit.DOM.HTMLCollection get_elements ();
			public string get_encoding ();
			public string get_enctype ();
			public long get_length ();
			public string get_method ();
			public string get_name ();
			public string get_target ();
			public void reset ();
			public void set_accept_charset (string value);
			public void set_action (string value);
			public void set_encoding (string value);
			public void set_enctype (string value);
			public void set_method (string value);
			public void set_name (string value);
			public void set_target (string value);
			public void submit ();
			public string accept_charset { owned get; set; }
			public string action { owned get; set; }
			[NoAccessorMethod]
			public string autocapitalize { owned get; set; }
			[NoAccessorMethod]
			public string autocomplete { owned get; set; }
			[NoAccessorMethod]
			public bool autocorrect { get; set; }
			public WebKit.DOM.HTMLCollection elements { get; }
			public string encoding { owned get; set; }
			public string enctype { owned get; set; }
			public long length { get; }
			public string method { owned get; set; }
			public string name { owned get; set; }
			[NoAccessorMethod]
			public bool no_validate { get; set; }
			public string target { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_frame_element_get_type ()")]
		[GIR (name = "DOMHTMLFrameElement")]
		public class HTMLFrameElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLFrameElement ();
			public unowned WebKit.DOM.Document get_content_document ();
			public unowned WebKit.DOM.DOMWindow get_content_window ();
			public string get_frame_border ();
			public long get_height ();
			public string get_long_desc ();
			public string get_margin_height ();
			public string get_margin_width ();
			public string get_name ();
			public bool get_no_resize ();
			public string get_scrolling ();
			public string get_src ();
			public long get_width ();
			public void set_frame_border (string value);
			public void set_long_desc (string value);
			public void set_margin_height (string value);
			public void set_margin_width (string value);
			public void set_name (string value);
			public void set_no_resize (bool value);
			public void set_scrolling (string value);
			public void set_src (string value);
			public WebKit.DOM.Document content_document { get; }
			public WebKit.DOM.DOMWindow content_window { get; }
			public string frame_border { owned get; set; }
			public long height { get; }
			public string long_desc { owned get; set; }
			public string margin_height { owned get; set; }
			public string margin_width { owned get; set; }
			public string name { owned get; set; }
			public bool no_resize { get; set; }
			public string scrolling { owned get; set; }
			public string src { owned get; set; }
			public long width { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_frame_set_element_get_type ()")]
		[GIR (name = "DOMHTMLFrameSetElement")]
		public class HTMLFrameSetElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLFrameSetElement ();
			public string get_cols ();
			public string get_rows ();
			public void set_cols (string value);
			public void set_rows (string value);
			public string cols { owned get; set; }
			public string rows { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", lower_case_cprefix = "webkit_dom_html_hr_element_", type_id = "webkit_dom_html_hr_element_get_type ()")]
		[GIR (name = "DOMHTMLHRElement")]
		public class HTMLHRElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLHRElement ();
			public string get_align ();
			public bool get_no_shade ();
			public string get_size ();
			public string get_width ();
			public void set_align (string value);
			public void set_no_shade (bool value);
			public void set_size (string value);
			public void set_width (string value);
			public string align { owned get; set; }
			public bool no_shade { get; set; }
			public string size { owned get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_head_element_get_type ()")]
		[GIR (name = "DOMHTMLHeadElement")]
		public class HTMLHeadElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLHeadElement ();
			public string get_profile ();
			public void set_profile (string value);
			public string profile { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_heading_element_get_type ()")]
		[GIR (name = "DOMHTMLHeadingElement")]
		public class HTMLHeadingElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLHeadingElement ();
			public string get_align ();
			public void set_align (string value);
			public string align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_html_element_get_type ()")]
		[GIR (name = "DOMHTMLHtmlElement")]
		public class HTMLHtmlElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLHtmlElement ();
			public string get_version ();
			public void set_version (string value);
			[NoAccessorMethod]
			public string manifest { owned get; set; }
			public string version { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", lower_case_cprefix = "webkit_dom_html_iframe_element_", type_id = "webkit_dom_html_iframe_element_get_type ()")]
		[GIR (name = "DOMHTMLIFrameElement")]
		public class HTMLIFrameElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLIFrameElement ();
			public string get_align ();
			public unowned WebKit.DOM.Document get_content_document ();
			public unowned WebKit.DOM.DOMWindow get_content_window ();
			public string get_frame_border ();
			public string get_height ();
			public string get_long_desc ();
			public string get_margin_height ();
			public string get_margin_width ();
			public string get_name ();
			public string get_scrolling ();
			public string get_src ();
			public string get_width ();
			public void set_align (string value);
			public void set_frame_border (string value);
			public void set_height (string value);
			public void set_long_desc (string value);
			public void set_margin_height (string value);
			public void set_margin_width (string value);
			public void set_name (string value);
			public void set_scrolling (string value);
			public void set_src (string value);
			public void set_width (string value);
			public string align { owned get; set; }
			public WebKit.DOM.Document content_document { get; }
			public WebKit.DOM.DOMWindow content_window { get; }
			public string frame_border { owned get; set; }
			public string height { owned get; set; }
			public string long_desc { owned get; set; }
			public string margin_height { owned get; set; }
			public string margin_width { owned get; set; }
			public string name { owned get; set; }
			[NoAccessorMethod]
			public string sandbox { owned get; set; }
			public string scrolling { owned get; set; }
			public string src { owned get; set; }
			[NoAccessorMethod]
			public string srcdoc { owned get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_image_element_get_type ()")]
		[GIR (name = "DOMHTMLImageElement")]
		public class HTMLImageElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLImageElement ();
			public string get_align ();
			public string get_alt ();
			public string get_border ();
			public bool get_complete ();
			public long get_height ();
			public long get_hspace ();
			public bool get_is_map ();
			public string get_long_desc ();
			public string get_lowsrc ();
			public string get_name ();
			public long get_natural_height ();
			public long get_natural_width ();
			public string get_src ();
			public string get_use_map ();
			public long get_vspace ();
			public long get_width ();
			public long get_x ();
			public long get_y ();
			public void set_align (string value);
			public void set_alt (string value);
			public void set_border (string value);
			public void set_height (long value);
			public void set_hspace (long value);
			public void set_is_map (bool value);
			public void set_long_desc (string value);
			public void set_lowsrc (string value);
			public void set_name (string value);
			public void set_src (string value);
			public void set_use_map (string value);
			public void set_vspace (long value);
			public void set_width (long value);
			public string align { owned get; set; }
			public string alt { owned get; set; }
			public string border { owned get; set; }
			public bool complete { get; }
			[NoAccessorMethod]
			public string cross_origin { owned get; set; }
			[NoAccessorMethod]
			public string current_src { owned get; }
			public long height { get; set; }
			public long hspace { get; set; }
			public bool is_map { get; set; }
			public string long_desc { owned get; set; }
			public string lowsrc { owned get; set; }
			public string name { owned get; set; }
			public long natural_height { get; }
			public long natural_width { get; }
			[NoAccessorMethod]
			public string sizes { owned get; set; }
			public string src { owned get; set; }
			[NoAccessorMethod]
			public string srcset { owned get; set; }
			public string use_map { owned get; set; }
			public long vspace { get; set; }
			public long width { get; set; }
			public long x { get; }
			public long y { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_input_element_get_type ()")]
		[GIR (name = "DOMHTMLInputElement")]
		public class HTMLInputElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLInputElement ();
			public string get_accept ();
			public string get_align ();
			public string get_alt ();
			public bool get_autofocus ();
			public bool get_capture ();
			public bool get_checked ();
			public bool get_default_checked ();
			public string get_default_value ();
			public bool get_disabled ();
			public unowned WebKit.DOM.FileList get_files ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public ulong get_height ();
			public bool get_indeterminate ();
			public string get_input_type ();
			public long get_max_length ();
			public bool get_multiple ();
			public string get_name ();
			public ulong get_size ();
			public string get_src ();
			public string get_use_map ();
			public string get_value ();
			public ulong get_width ();
			public bool get_will_validate ();
			public bool is_edited ();
			public void select ();
			public void set_accept (string value);
			public void set_align (string value);
			public void set_alt (string value);
			public void set_autofocus (bool value);
			public void set_checked (bool value);
			public void set_default_value (string value);
			public void set_disabled (bool value);
			public void set_files (WebKit.DOM.FileList value);
			public void set_height (ulong value);
			public void set_indeterminate (bool value);
			public void set_input_type (string value);
			public void set_max_length (long value) throws GLib.Error;
			public void set_multiple (bool value);
			public void set_name (string value);
			public void set_read_only (bool value);
			public void set_size (ulong value) throws GLib.Error;
			public void set_src (string value);
			public void set_use_map (string value);
			public void set_value (string value);
			public void set_width (ulong value);
			public string accept { owned get; set; }
			public string align { owned get; set; }
			public string alt { owned get; set; }
			[NoAccessorMethod]
			public string autocapitalize { owned get; set; }
			[NoAccessorMethod]
			public string autocomplete { owned get; set; }
			[NoAccessorMethod]
			public bool autocorrect { get; set; }
			public bool autofocus { get; set; }
			[NoAccessorMethod]
			public bool capture { get; set; }
			public bool checked { get; set; }
			[NoAccessorMethod]
			public bool default_checked { get; set; }
			public string default_value { owned get; set; }
			[NoAccessorMethod]
			public string dir_name { owned get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.FileList files { get; }
			public WebKit.DOM.HTMLFormElement form { get; }
			[NoAccessorMethod]
			public string form_action { owned get; set; }
			[NoAccessorMethod]
			public string form_enctype { owned get; set; }
			[NoAccessorMethod]
			public string form_method { owned get; set; }
			[NoAccessorMethod]
			public bool form_no_validate { get; set; }
			[NoAccessorMethod]
			public string form_target { owned get; set; }
			public ulong height { get; set; }
			[NoAccessorMethod]
			public bool incremental { get; set; }
			public bool indeterminate { get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.NodeList labels { owned get; }
			[NoAccessorMethod]
			public WebKit.DOM.HTMLElement list { owned get; }
			[NoAccessorMethod]
			public string max { owned get; set; }
			public long max_length { get; set; }
			[NoAccessorMethod]
			public string min { owned get; set; }
			public bool multiple { get; set; }
			public string name { owned get; set; }
			[NoAccessorMethod]
			public string pattern { owned get; set; }
			[NoAccessorMethod]
			public string placeholder { owned get; set; }
			[NoAccessorMethod]
			public bool read_only { get; set; }
			[NoAccessorMethod]
			public bool required { get; set; }
			public ulong size { get; set; }
			public string src { owned get; set; }
			[NoAccessorMethod]
			public string step { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
			public string use_map { owned get; set; }
			[NoAccessorMethod]
			public string validation_message { owned get; }
			public string value { owned get; set; }
			[NoAccessorMethod]
			public double value_as_number { get; set; }
			public ulong width { get; set; }
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", lower_case_cprefix = "webkit_dom_html_li_element_", type_id = "webkit_dom_html_li_element_get_type ()")]
		[GIR (name = "DOMHTMLLIElement")]
		public class HTMLLIElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLLIElement ();
			public string get_type_attr ();
			public long get_value ();
			public void set_type_attr (string value);
			public void set_value (long value);
			[NoAccessorMethod]
			public string type { owned get; set; }
			public long value { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_label_element_get_type ()")]
		[GIR (name = "DOMHTMLLabelElement")]
		public class HTMLLabelElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLLabelElement ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_html_for ();
			public void set_html_for (string value);
			[NoAccessorMethod]
			public WebKit.DOM.HTMLElement control { owned get; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public string html_for { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_legend_element_get_type ()")]
		[GIR (name = "DOMHTMLLegendElement")]
		public class HTMLLegendElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLLegendElement ();
			public string get_align ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public void set_align (string value);
			public string align { owned get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_link_element_get_type ()")]
		[GIR (name = "DOMHTMLLinkElement")]
		public class HTMLLinkElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLLinkElement ();
			public string get_charset ();
			public bool get_disabled ();
			public string get_href ();
			public string get_hreflang ();
			public string get_media ();
			public string get_rel ();
			public string get_rev ();
			public unowned WebKit.DOM.StyleSheet get_sheet ();
			public string get_target ();
			public string get_type_attr ();
			public void set_charset (string value);
			public void set_disabled (bool value);
			public void set_href (string value);
			public void set_hreflang (string value);
			public void set_media (string value);
			public void set_rel (string value);
			public void set_rev (string value);
			public void set_target (string value);
			public void set_type_attr (string value);
			public string charset { owned get; set; }
			public bool disabled { get; set; }
			public string href { owned get; set; }
			public string hreflang { owned get; set; }
			public string media { owned get; set; }
			public string rel { owned get; set; }
			public string rev { owned get; set; }
			public WebKit.DOM.StyleSheet sheet { get; }
			public string target { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_map_element_get_type ()")]
		[GIR (name = "DOMHTMLMapElement")]
		public class HTMLMapElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLMapElement ();
			public unowned WebKit.DOM.HTMLCollection get_areas ();
			public string get_name ();
			public void set_name (string value);
			public WebKit.DOM.HTMLCollection areas { get; }
			public string name { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_marquee_element_get_type ()")]
		[GIR (name = "DOMHTMLMarqueeElement")]
		public class HTMLMarqueeElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLMarqueeElement ();
			public void start ();
			public void stop ();
			[NoAccessorMethod]
			public string behavior { owned get; set; }
			[NoAccessorMethod]
			public string bg_color { owned get; set; }
			[NoAccessorMethod]
			public string direction { owned get; set; }
			[NoAccessorMethod]
			public string height { owned get; set; }
			[NoAccessorMethod]
			public ulong hspace { get; set; }
			[NoAccessorMethod]
			public long loop { get; set; }
			[NoAccessorMethod]
			public long scroll_amount { get; set; }
			[NoAccessorMethod]
			public long scroll_delay { get; set; }
			[NoAccessorMethod]
			public bool true_speed { get; set; }
			[NoAccessorMethod]
			public ulong vspace { get; set; }
			[NoAccessorMethod]
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_menu_element_get_type ()")]
		[GIR (name = "DOMHTMLMenuElement")]
		public class HTMLMenuElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLMenuElement ();
			public bool get_compact ();
			public void set_compact (bool value);
			public bool compact { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_meta_element_get_type ()")]
		[GIR (name = "DOMHTMLMetaElement")]
		public class HTMLMetaElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLMetaElement ();
			public string get_content ();
			public string get_http_equiv ();
			public string get_name ();
			public string get_scheme ();
			public void set_content (string value);
			public void set_http_equiv (string value);
			public void set_name (string value);
			public void set_scheme (string value);
			public string content { owned get; set; }
			public string http_equiv { owned get; set; }
			public string name { owned get; set; }
			public string scheme { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_mod_element_get_type ()")]
		[GIR (name = "DOMHTMLModElement")]
		public class HTMLModElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLModElement ();
			public string get_cite ();
			public string get_date_time ();
			public void set_cite (string value);
			public void set_date_time (string value);
			public string cite { owned get; set; }
			public string date_time { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", lower_case_cprefix = "webkit_dom_html_o_list_element_", type_id = "webkit_dom_html_o_list_element_get_type ()")]
		[GIR (name = "DOMHTMLOListElement")]
		public class HTMLOListElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLOListElement ();
			public bool get_compact ();
			public long get_start ();
			public string get_type_attr ();
			public void set_compact (bool value);
			public void set_start (long value);
			public void set_type_attr (string value);
			public bool compact { get; set; }
			[NoAccessorMethod]
			public bool reversed { get; set; }
			public long start { get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_object_element_get_type ()")]
		[GIR (name = "DOMHTMLObjectElement")]
		public class HTMLObjectElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLObjectElement ();
			public string get_align ();
			public string get_archive ();
			public string get_border ();
			public string get_code ();
			public string get_code_base ();
			public string get_code_type ();
			public unowned WebKit.DOM.Document get_content_document ();
			public string get_data ();
			public bool get_declare ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_height ();
			public long get_hspace ();
			public string get_name ();
			public string get_standby ();
			public string get_type_attr ();
			public string get_use_map ();
			public long get_vspace ();
			public string get_width ();
			public void set_align (string value);
			public void set_archive (string value);
			public void set_border (string value);
			public void set_code (string value);
			public void set_code_base (string value);
			public void set_code_type (string value);
			public void set_data (string value);
			public void set_declare (bool value);
			public void set_height (string value);
			public void set_hspace (long value);
			public void set_name (string value);
			public void set_standby (string value);
			public void set_type_attr (string value);
			public void set_use_map (string value);
			public void set_vspace (long value);
			public void set_width (string value);
			public string align { owned get; set; }
			public string archive { owned get; set; }
			public string border { owned get; set; }
			public string code { owned get; set; }
			public string code_base { owned get; set; }
			public string code_type { owned get; set; }
			public WebKit.DOM.Document content_document { get; }
			public string data { owned get; set; }
			public bool declare { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public string height { owned get; set; }
			public long hspace { get; set; }
			public string name { owned get; set; }
			public string standby { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
			public string use_map { owned get; set; }
			[NoAccessorMethod]
			public string validation_message { owned get; }
			public long vspace { get; set; }
			public string width { owned get; set; }
			[NoAccessorMethod]
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_opt_group_element_get_type ()")]
		[GIR (name = "DOMHTMLOptGroupElement")]
		public class HTMLOptGroupElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLOptGroupElement ();
			public bool get_disabled ();
			public string get_label ();
			public void set_disabled (bool value);
			public void set_label (string value);
			public bool disabled { get; set; }
			public string label { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_option_element_get_type ()")]
		[GIR (name = "DOMHTMLOptionElement")]
		public class HTMLOptionElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLOptionElement ();
			public bool get_default_selected ();
			public bool get_disabled ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public long get_index ();
			public string get_label ();
			public bool get_selected ();
			public string get_text ();
			public string get_value ();
			public void set_default_selected (bool value);
			public void set_disabled (bool value);
			public void set_label (string value);
			public void set_selected (bool value);
			public void set_value (string value);
			public bool default_selected { get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			public long index { get; }
			public string label { owned get; set; }
			public bool selected { get; set; }
			public string text { owned get; }
			public string value { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_options_collection_get_type ()")]
		[GIR (name = "DOMHTMLOptionsCollection")]
		public class HTMLOptionsCollection : WebKit.DOM.HTMLCollection {
			[CCode (has_construct_function = false)]
			protected HTMLOptionsCollection ();
			public ulong get_length ();
			public long get_selected_index ();
			public unowned WebKit.DOM.Node named_item (string name);
			public void set_selected_index (long value);
			public ulong length { get; }
			public long selected_index { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_paragraph_element_get_type ()")]
		[GIR (name = "DOMHTMLParagraphElement")]
		public class HTMLParagraphElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLParagraphElement ();
			public string get_align ();
			public void set_align (string value);
			public string align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_param_element_get_type ()")]
		[GIR (name = "DOMHTMLParamElement")]
		public class HTMLParamElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLParamElement ();
			public string get_name ();
			public string get_type_attr ();
			public string get_value ();
			public string get_value_type ();
			public void set_name (string value);
			public void set_type_attr (string value);
			public void set_value (string value);
			public void set_value_type (string value);
			public string name { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
			public string value { owned get; set; }
			public string value_type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_pre_element_get_type ()")]
		[GIR (name = "DOMHTMLPreElement")]
		public class HTMLPreElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLPreElement ();
			public long get_width ();
			public bool get_wrap ();
			public void set_width (long value);
			public void set_wrap (bool value);
			public long width { get; set; }
			public bool wrap { get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_quote_element_get_type ()")]
		[GIR (name = "DOMHTMLQuoteElement")]
		public class HTMLQuoteElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLQuoteElement ();
			public string get_cite ();
			public void set_cite (string value);
			public string cite { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_script_element_get_type ()")]
		[GIR (name = "DOMHTMLScriptElement")]
		public class HTMLScriptElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLScriptElement ();
			public string get_charset ();
			public bool get_defer ();
			public string get_event ();
			public string get_html_for ();
			public string get_src ();
			public string get_text ();
			public string get_type_attr ();
			public void set_defer (bool value);
			public void set_event (string value);
			public void set_html_for (string value);
			public void set_src (string value);
			public void set_text (string value);
			public void set_type_attr (string value);
			[NoAccessorMethod]
			public bool @async { get; set; }
			[NoAccessorMethod]
			public string charset { owned get; set; }
			[NoAccessorMethod]
			public string cross_origin { owned get; set; }
			public bool defer { get; set; }
			public string event { owned get; set; }
			public string html_for { owned get; set; }
			[NoAccessorMethod]
			public string nonce { owned get; set; }
			public string src { owned get; set; }
			public string text { owned get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_select_element_get_type ()")]
		[GIR (name = "DOMHTMLSelectElement")]
		public class HTMLSelectElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLSelectElement ();
			public void add (WebKit.DOM.HTMLElement element, WebKit.DOM.HTMLElement before) throws GLib.Error;
			public bool get_autofocus ();
			public bool get_disabled ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public ulong get_length ();
			public bool get_multiple ();
			public string get_name ();
			public unowned WebKit.DOM.HTMLOptionsCollection get_options ();
			public string get_select_type ();
			public long get_selected_index ();
			public long get_size ();
			public string get_value ();
			public bool get_will_validate ();
			public unowned WebKit.DOM.Node item (ulong index);
			public unowned WebKit.DOM.Node named_item (string name);
			public void remove (long index);
			public void set_autofocus (bool value);
			public void set_disabled (bool value);
			public void set_length (ulong value) throws GLib.Error;
			public void set_multiple (bool value);
			public void set_name (string value);
			public void set_selected_index (long value);
			public void set_size (long value);
			public void set_value (string value);
			public bool autofocus { get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			[NoAccessorMethod]
			public WebKit.DOM.NodeList labels { owned get; }
			public ulong length { get; set; }
			public bool multiple { get; set; }
			public string name { owned get; set; }
			public WebKit.DOM.HTMLOptionsCollection options { get; }
			[NoAccessorMethod]
			public bool required { get; set; }
			public long selected_index { get; set; }
			[NoAccessorMethod]
			public WebKit.DOM.HTMLCollection selected_options { owned get; }
			public long size { get; set; }
			[NoAccessorMethod]
			public string type { owned get; }
			[NoAccessorMethod]
			public string validation_message { owned get; }
			public string value { owned get; set; }
			public bool will_validate { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_style_element_get_type ()")]
		[GIR (name = "DOMHTMLStyleElement")]
		public class HTMLStyleElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLStyleElement ();
			public bool get_disabled ();
			public string get_media ();
			public unowned WebKit.DOM.StyleSheet get_sheet ();
			public string get_type_attr ();
			public void set_disabled (bool value);
			public void set_media (string value);
			public void set_type_attr (string value);
			public bool disabled { get; set; }
			public string media { owned get; set; }
			public WebKit.DOM.StyleSheet sheet { get; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_table_caption_element_get_type ()")]
		[GIR (name = "DOMHTMLTableCaptionElement")]
		public class HTMLTableCaptionElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableCaptionElement ();
			public string get_align ();
			public void set_align (string value);
			public string align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_table_cell_element_get_type ()")]
		[GIR (name = "DOMHTMLTableCellElement")]
		public class HTMLTableCellElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableCellElement ();
			public string get_abbr ();
			public string get_align ();
			public string get_axis ();
			public string get_bg_color ();
			public long get_cell_index ();
			public string get_ch ();
			public string get_ch_off ();
			public long get_col_span ();
			public string get_headers ();
			public string get_height ();
			public bool get_no_wrap ();
			public long get_row_span ();
			public string get_scope ();
			public string get_v_align ();
			public string get_width ();
			public void set_abbr (string value);
			public void set_align (string value);
			public void set_axis (string value);
			public void set_bg_color (string value);
			public void set_ch (string value);
			public void set_ch_off (string value);
			public void set_col_span (long value);
			public void set_headers (string value);
			public void set_height (string value);
			public void set_no_wrap (bool value);
			public void set_row_span (long value);
			public void set_scope (string value);
			public void set_v_align (string value);
			public void set_width (string value);
			public string abbr { owned get; set; }
			public string align { owned get; set; }
			public string axis { owned get; set; }
			public string bg_color { owned get; set; }
			public long cell_index { get; }
			public string ch { owned get; set; }
			public string ch_off { owned get; set; }
			public long col_span { get; set; }
			public string headers { owned get; set; }
			public string height { owned get; set; }
			public bool no_wrap { get; set; }
			public long row_span { get; set; }
			public string scope { owned get; set; }
			public string v_align { owned get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_table_col_element_get_type ()")]
		[GIR (name = "DOMHTMLTableColElement")]
		public class HTMLTableColElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableColElement ();
			public string get_align ();
			public string get_ch ();
			public string get_ch_off ();
			public long get_span ();
			public string get_v_align ();
			public string get_width ();
			public void set_align (string value);
			public void set_ch (string value);
			public void set_ch_off (string value);
			public void set_span (long value);
			public void set_v_align (string value);
			public void set_width (string value);
			public string align { owned get; set; }
			public string ch { owned get; set; }
			public string ch_off { owned get; set; }
			public long span { get; set; }
			public string v_align { owned get; set; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_table_element_get_type ()")]
		[GIR (name = "DOMHTMLTableElement")]
		public class HTMLTableElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableElement ();
			public unowned WebKit.DOM.HTMLElement create_caption ();
			public unowned WebKit.DOM.HTMLElement create_t_foot ();
			public unowned WebKit.DOM.HTMLElement create_t_head ();
			public void delete_caption ();
			public void delete_row (long index) throws GLib.Error;
			public void delete_t_foot ();
			public void delete_t_head ();
			public string get_align ();
			public string get_bg_color ();
			public string get_border ();
			public unowned WebKit.DOM.HTMLTableCaptionElement get_caption ();
			public string get_cell_padding ();
			public string get_cell_spacing ();
			public unowned WebKit.DOM.HTMLCollection get_rows ();
			public string get_rules ();
			public string get_summary ();
			public unowned WebKit.DOM.HTMLCollection get_t_bodies ();
			public unowned WebKit.DOM.HTMLTableSectionElement get_t_foot ();
			public unowned WebKit.DOM.HTMLTableSectionElement get_t_head ();
			public string get_width ();
			public unowned WebKit.DOM.HTMLElement insert_row (long index) throws GLib.Error;
			public void set_align (string value);
			public void set_bg_color (string value);
			public void set_border (string value);
			public void set_caption (WebKit.DOM.HTMLTableCaptionElement value) throws GLib.Error;
			public void set_cell_padding (string value);
			public void set_cell_spacing (string value);
			public void set_rules (string value);
			public void set_summary (string value);
			public void set_t_foot (WebKit.DOM.HTMLTableSectionElement value) throws GLib.Error;
			public void set_t_head (WebKit.DOM.HTMLTableSectionElement value) throws GLib.Error;
			public void set_width (string value);
			public string align { owned get; set; }
			public string bg_color { owned get; set; }
			public string border { owned get; set; }
			public WebKit.DOM.HTMLTableCaptionElement caption { get; }
			public string cell_padding { owned get; set; }
			public string cell_spacing { owned get; set; }
			[NoAccessorMethod]
			public string frame { owned get; set; }
			public WebKit.DOM.HTMLCollection rows { get; }
			public string rules { owned get; set; }
			public string summary { owned get; set; }
			public WebKit.DOM.HTMLCollection t_bodies { get; }
			public WebKit.DOM.HTMLTableSectionElement t_foot { get; }
			public WebKit.DOM.HTMLTableSectionElement t_head { get; }
			public string width { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_table_row_element_get_type ()")]
		[GIR (name = "DOMHTMLTableRowElement")]
		public class HTMLTableRowElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableRowElement ();
			public void delete_cell (long index) throws GLib.Error;
			public string get_align ();
			public string get_bg_color ();
			public unowned WebKit.DOM.HTMLCollection get_cells ();
			public string get_ch ();
			public string get_ch_off ();
			public long get_row_index ();
			public long get_section_row_index ();
			public string get_v_align ();
			public unowned WebKit.DOM.HTMLElement insert_cell (long index) throws GLib.Error;
			public void set_align (string value);
			public void set_bg_color (string value);
			public void set_ch (string value);
			public void set_ch_off (string value);
			public void set_v_align (string value);
			public string align { owned get; set; }
			public string bg_color { owned get; set; }
			public WebKit.DOM.HTMLCollection cells { get; }
			public string ch { owned get; set; }
			public string ch_off { owned get; set; }
			public long row_index { get; }
			public long section_row_index { get; }
			public string v_align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_table_section_element_get_type ()")]
		[GIR (name = "DOMHTMLTableSectionElement")]
		public class HTMLTableSectionElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTableSectionElement ();
			public void delete_row (long index) throws GLib.Error;
			public string get_align ();
			public string get_ch ();
			public string get_ch_off ();
			public unowned WebKit.DOM.HTMLCollection get_rows ();
			public string get_v_align ();
			public unowned WebKit.DOM.HTMLElement insert_row (long index) throws GLib.Error;
			public void set_align (string value);
			public void set_ch (string value);
			public void set_ch_off (string value);
			public void set_v_align (string value);
			public string align { owned get; set; }
			public string ch { owned get; set; }
			public string ch_off { owned get; set; }
			public WebKit.DOM.HTMLCollection rows { get; }
			public string v_align { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_text_area_element_get_type ()")]
		[GIR (name = "DOMHTMLTextAreaElement")]
		public class HTMLTextAreaElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTextAreaElement ();
			public string get_area_type ();
			public bool get_autofocus ();
			public long get_cols ();
			public string get_default_value ();
			public bool get_disabled ();
			public unowned WebKit.DOM.HTMLFormElement get_form ();
			public string get_name ();
			public bool get_read_only ();
			public long get_rows ();
			public long get_selection_end ();
			public long get_selection_start ();
			public string get_value ();
			public bool get_will_validate ();
			public bool is_edited ();
			public void select ();
			public void set_autofocus (bool value);
			public void set_cols (long value);
			public void set_default_value (string value);
			public void set_disabled (bool value);
			public void set_name (string value);
			public void set_read_only (bool value);
			public void set_rows (long value);
			public void set_selection_end (long value);
			public void set_selection_range (long start, long end, string direction);
			public void set_selection_start (long value);
			public void set_value (string value);
			[NoAccessorMethod]
			public string autocapitalize { owned get; set; }
			[NoAccessorMethod]
			public bool autocorrect { get; set; }
			public bool autofocus { get; set; }
			public long cols { get; set; }
			public string default_value { owned get; set; }
			[NoAccessorMethod]
			public string dir_name { owned get; set; }
			public bool disabled { get; set; }
			public WebKit.DOM.HTMLFormElement form { get; }
			[NoAccessorMethod]
			public WebKit.DOM.NodeList labels { owned get; }
			[NoAccessorMethod]
			public long max_length { get; set; }
			public string name { owned get; set; }
			[NoAccessorMethod]
			public string placeholder { owned get; set; }
			public bool read_only { get; set; }
			[NoAccessorMethod]
			public bool required { get; set; }
			public long rows { get; set; }
			[NoAccessorMethod]
			public string selection_direction { owned get; set; }
			public long selection_end { get; set; }
			public long selection_start { get; set; }
			[NoAccessorMethod]
			public ulong text_length { get; }
			[NoAccessorMethod]
			public string type { owned get; }
			[NoAccessorMethod]
			public string validation_message { owned get; }
			public string value { owned get; set; }
			public bool will_validate { get; }
			[NoAccessorMethod]
			public string wrap { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_html_title_element_get_type ()")]
		[GIR (name = "DOMHTMLTitleElement")]
		public class HTMLTitleElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLTitleElement ();
			public string get_text ();
			public void set_text (string value);
			public string text { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", lower_case_cprefix = "webkit_dom_html_u_list_element_", type_id = "webkit_dom_html_u_list_element_get_type ()")]
		[GIR (name = "DOMHTMLUListElement")]
		public class HTMLUListElement : WebKit.DOM.HTMLElement, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected HTMLUListElement ();
			public bool get_compact ();
			public string get_type_attr ();
			public void set_compact (bool value);
			public void set_type_attr (string value);
			public bool compact { get; set; }
			[NoAccessorMethod]
			public string type { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_keyboard_event_get_type ()")]
		[GIR (name = "DOMKeyboardEvent")]
		public class KeyboardEvent : WebKit.DOM.UIEvent {
			[CCode (has_construct_function = false)]
			protected KeyboardEvent ();
			public bool get_alt_graph_key ();
			public bool get_alt_key ();
			public bool get_ctrl_key ();
			public string get_key_identifier ();
			public ulong get_key_location ();
			public bool get_meta_key ();
			public bool get_modifier_state (string keyIdentifierArg);
			public bool get_shift_key ();
			public void init_keyboard_event (string type, bool canBubble, bool cancelable, WebKit.DOM.DOMWindow view, string keyIdentifier, ulong location, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, bool altGraphKey);
			public bool alt_graph_key { get; }
			public bool alt_key { get; }
			public bool ctrl_key { get; }
			public string key_identifier { owned get; }
			public ulong key_location { get; }
			public bool meta_key { get; }
			public bool shift_key { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_media_list_get_type ()")]
		[GIR (name = "DOMMediaList")]
		public class MediaList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected MediaList ();
			public void append_medium (string newMedium) throws GLib.Error;
			public void delete_medium (string oldMedium) throws GLib.Error;
			public ulong get_length ();
			public string get_media_text ();
			public string item (ulong index);
			public void set_media_text (string value) throws GLib.Error;
			public ulong length { get; }
			public string media_text { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_mouse_event_get_type ()")]
		[GIR (name = "DOMMouseEvent")]
		public class MouseEvent : WebKit.DOM.UIEvent {
			[CCode (has_construct_function = false)]
			protected MouseEvent ();
			public bool get_alt_key ();
			public ushort get_button ();
			public long get_client_x ();
			public long get_client_y ();
			public bool get_ctrl_key ();
			public unowned WebKit.DOM.Node get_from_element ();
			public bool get_meta_key ();
			public long get_offset_x ();
			public long get_offset_y ();
			public unowned WebKit.DOM.EventTarget get_related_target ();
			public long get_screen_x ();
			public long get_screen_y ();
			public bool get_shift_key ();
			public unowned WebKit.DOM.Node get_to_element ();
			public long get_x ();
			public long get_y ();
			public void init_mouse_event (string type, bool canBubble, bool cancelable, WebKit.DOM.DOMWindow view, long detail, long screenX, long screenY, long clientX, long clientY, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, ushort button, WebKit.DOM.EventTarget relatedTarget);
			public bool alt_key { get; }
			public uint button { get; }
			public long client_x { get; }
			public long client_y { get; }
			public bool ctrl_key { get; }
			public WebKit.DOM.Node from_element { get; }
			public bool meta_key { get; }
			[NoAccessorMethod]
			public long movement_x { get; }
			[NoAccessorMethod]
			public long movement_y { get; }
			public long offset_x { get; }
			public long offset_y { get; }
			public WebKit.DOM.EventTarget related_target { get; }
			public long screen_x { get; }
			public long screen_y { get; }
			public bool shift_key { get; }
			public WebKit.DOM.Node to_element { get; }
			public long x { get; }
			public long y { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_named_node_map_get_type ()")]
		[GIR (name = "DOMNamedNodeMap")]
		public class NamedNodeMap : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected NamedNodeMap ();
			public ulong get_length ();
			public unowned WebKit.DOM.Node get_named_item (string name);
			public unowned WebKit.DOM.Node get_named_item_ns (string namespaceURI, string localName);
			public unowned WebKit.DOM.Node item (ulong index);
			public unowned WebKit.DOM.Node remove_named_item (string name) throws GLib.Error;
			public unowned WebKit.DOM.Node remove_named_item_ns (string namespaceURI, string localName) throws GLib.Error;
			public unowned WebKit.DOM.Node set_named_item (WebKit.DOM.Node node) throws GLib.Error;
			public unowned WebKit.DOM.Node set_named_item_ns (WebKit.DOM.Node node) throws GLib.Error;
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_node_get_type ()")]
		[GIR (name = "DOMNode")]
		public class Node : WebKit.DOM.Object, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Node ();
			public unowned WebKit.DOM.Node append_child (WebKit.DOM.Node newChild) throws GLib.Error;
			public unowned WebKit.DOM.Node clone_node (bool deep);
			public ushort compare_document_position (WebKit.DOM.Node other);
			public bool contains (WebKit.DOM.Node other);
			public string get_base_uri ();
			public unowned WebKit.DOM.NodeList get_child_nodes ();
			public unowned WebKit.DOM.Node get_first_child ();
			public unowned WebKit.DOM.Node get_last_child ();
			public string get_local_name ();
			public string get_namespace_uri ();
			public unowned WebKit.DOM.Node get_next_sibling ();
			public string get_node_name ();
			public ushort get_node_type ();
			public string get_node_value ();
			public unowned WebKit.DOM.Document get_owner_document ();
			public unowned WebKit.DOM.Element get_parent_element ();
			public unowned WebKit.DOM.Node get_parent_node ();
			public string get_prefix ();
			public unowned WebKit.DOM.Node get_previous_sibling ();
			public string get_text_content ();
			public bool has_child_nodes ();
			public unowned WebKit.DOM.Node insert_before (WebKit.DOM.Node newChild, WebKit.DOM.Node? refChild) throws GLib.Error;
			public bool is_default_namespace (string namespaceURI);
			public bool is_equal_node (WebKit.DOM.Node other);
			public bool is_same_node (WebKit.DOM.Node other);
			public bool is_supported (string feature, string version);
			public string lookup_namespace_uri (string prefix);
			public string lookup_prefix (string namespaceURI);
			public void normalize ();
			public unowned WebKit.DOM.Node remove_child (WebKit.DOM.Node oldChild) throws GLib.Error;
			public unowned WebKit.DOM.Node replace_child (WebKit.DOM.Node newChild, WebKit.DOM.Node oldChild) throws GLib.Error;
			public void set_node_value (string value) throws GLib.Error;
			public void set_prefix (string value) throws GLib.Error;
			public void set_text_content (string value) throws GLib.Error;
			public string base_uri { owned get; }
			public WebKit.DOM.NodeList child_nodes { get; }
			public WebKit.DOM.Node first_child { get; }
			public WebKit.DOM.Node last_child { get; }
			public string local_name { owned get; }
			public string namespace_uri { owned get; }
			public WebKit.DOM.Node next_sibling { get; }
			public string node_name { owned get; }
			public uint node_type { get; }
			public string node_value { owned get; set; }
			public WebKit.DOM.Document owner_document { get; }
			public WebKit.DOM.Element parent_element { get; }
			public WebKit.DOM.Node parent_node { get; }
			public string prefix { owned get; set; }
			public WebKit.DOM.Node previous_sibling { get; }
			public string text_content { owned get; set; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_node_iterator_get_type ()")]
		[GIR (name = "DOMNodeIterator")]
		public class NodeIterator : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected NodeIterator ();
			public void detach ();
			public bool get_expand_entity_references ();
			public unowned WebKit.DOM.NodeFilter get_filter ();
			public bool get_pointer_before_reference_node ();
			public unowned WebKit.DOM.Node get_reference_node ();
			public unowned WebKit.DOM.Node get_root ();
			public ulong get_what_to_show ();
			public unowned WebKit.DOM.Node next_node () throws GLib.Error;
			public unowned WebKit.DOM.Node previous_node () throws GLib.Error;
			public bool expand_entity_references { get; }
			public WebKit.DOM.NodeFilter filter { get; }
			public bool pointer_before_reference_node { get; }
			public WebKit.DOM.Node reference_node { get; }
			public WebKit.DOM.Node root { get; }
			public ulong what_to_show { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_node_list_get_type ()")]
		[GIR (name = "DOMNodeList")]
		public class NodeList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected NodeList ();
			public ulong get_length ();
			public unowned WebKit.DOM.Node item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_object_get_type ()")]
		[GIR (name = "DOMObject")]
		public class Object : GLib.Object {
			public void* coreObject;
			[CCode (has_construct_function = false)]
			protected Object ();
			public void* core_object { construct; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_processing_instruction_get_type ()")]
		[GIR (name = "DOMProcessingInstruction")]
		public class ProcessingInstruction : WebKit.DOM.CharacterData, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected ProcessingInstruction ();
			public unowned WebKit.DOM.StyleSheet get_sheet ();
			public string get_target ();
			public WebKit.DOM.StyleSheet sheet { get; }
			public string target { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_range_get_type ()")]
		[GIR (name = "DOMRange")]
		public class Range : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected Range ();
			public unowned WebKit.DOM.DocumentFragment clone_contents () throws GLib.Error;
			public unowned WebKit.DOM.Range clone_range () throws GLib.Error;
			public void collapse (bool toStart) throws GLib.Error;
			public short compare_boundary_points (ushort how, WebKit.DOM.Range sourceRange) throws GLib.Error;
			public short compare_node (WebKit.DOM.Node refNode) throws GLib.Error;
			public short compare_point (WebKit.DOM.Node refNode, long offset) throws GLib.Error;
			public unowned WebKit.DOM.DocumentFragment create_contextual_fragment (string html) throws GLib.Error;
			public void delete_contents () throws GLib.Error;
			public void detach () throws GLib.Error;
			public unowned WebKit.DOM.DocumentFragment extract_contents () throws GLib.Error;
			public bool get_collapsed () throws GLib.Error;
			public unowned WebKit.DOM.Node get_common_ancestor_container () throws GLib.Error;
			public unowned WebKit.DOM.Node get_end_container () throws GLib.Error;
			public long get_end_offset () throws GLib.Error;
			public unowned WebKit.DOM.Node get_start_container () throws GLib.Error;
			public long get_start_offset () throws GLib.Error;
			public string get_text ();
			public void insert_node (WebKit.DOM.Node newNode) throws GLib.Error;
			public bool intersects_node (WebKit.DOM.Node refNode) throws GLib.Error;
			public bool is_point_in_range (WebKit.DOM.Node refNode, long offset) throws GLib.Error;
			public void select_node (WebKit.DOM.Node refNode) throws GLib.Error;
			public void select_node_contents (WebKit.DOM.Node refNode) throws GLib.Error;
			public void set_end (WebKit.DOM.Node refNode, long offset) throws GLib.Error;
			public void set_end_after (WebKit.DOM.Node refNode) throws GLib.Error;
			public void set_end_before (WebKit.DOM.Node refNode) throws GLib.Error;
			public void set_start (WebKit.DOM.Node refNode, long offset) throws GLib.Error;
			public void set_start_after (WebKit.DOM.Node refNode) throws GLib.Error;
			public void set_start_before (WebKit.DOM.Node refNode) throws GLib.Error;
			public void surround_contents (WebKit.DOM.Node newParent) throws GLib.Error;
			public string to_string () throws GLib.Error;
			public bool collapsed { get; }
			public WebKit.DOM.Node common_ancestor_container { get; }
			public WebKit.DOM.Node end_container { get; }
			public long end_offset { get; }
			public WebKit.DOM.Node start_container { get; }
			public long start_offset { get; }
			public string text { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_style_sheet_get_type ()")]
		[GIR (name = "DOMStyleSheet")]
		public class StyleSheet : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected StyleSheet ();
			public string get_content_type ();
			public bool get_disabled ();
			public string get_href ();
			public unowned WebKit.DOM.MediaList get_media ();
			public unowned WebKit.DOM.Node get_owner_node ();
			public unowned WebKit.DOM.StyleSheet get_parent_style_sheet ();
			public string get_title ();
			public void set_disabled (bool value);
			public bool disabled { get; set; }
			public string href { owned get; }
			public WebKit.DOM.MediaList media { get; }
			public WebKit.DOM.Node owner_node { get; }
			public WebKit.DOM.StyleSheet parent_style_sheet { get; }
			public string title { owned get; }
			[NoAccessorMethod]
			public string type { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_style_sheet_list_get_type ()")]
		[GIR (name = "DOMStyleSheetList")]
		public class StyleSheetList : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected StyleSheetList ();
			public ulong get_length ();
			public unowned WebKit.DOM.StyleSheet item (ulong index);
			public ulong length { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_text_get_type ()")]
		[GIR (name = "DOMText")]
		public class Text : WebKit.DOM.CharacterData, WebKit.DOM.EventTarget {
			[CCode (has_construct_function = false)]
			protected Text ();
			public string get_whole_text ();
			public unowned WebKit.DOM.Text replace_whole_text (string content) throws GLib.Error;
			public unowned WebKit.DOM.Text split_text (ulong offset) throws GLib.Error;
			public string whole_text { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_tree_walker_get_type ()")]
		[GIR (name = "DOMTreeWalker")]
		public class TreeWalker : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected TreeWalker ();
			public unowned WebKit.DOM.Node first_child ();
			public unowned WebKit.DOM.Node get_current_node ();
			public bool get_expand_entity_references ();
			public unowned WebKit.DOM.NodeFilter get_filter ();
			public unowned WebKit.DOM.Node get_root ();
			public ulong get_what_to_show ();
			public unowned WebKit.DOM.Node last_child ();
			public unowned WebKit.DOM.Node next_node ();
			public unowned WebKit.DOM.Node next_sibling ();
			public unowned WebKit.DOM.Node parent_node ();
			public unowned WebKit.DOM.Node previous_node ();
			public unowned WebKit.DOM.Node previous_sibling ();
			public void set_current_node (WebKit.DOM.Node value) throws GLib.Error;
			public WebKit.DOM.Node current_node { get; }
			public bool expand_entity_references { get; }
			public WebKit.DOM.NodeFilter filter { get; }
			public WebKit.DOM.Node root { get; }
			public ulong what_to_show { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_ui_event_get_type ()")]
		[GIR (name = "DOMUIEvent")]
		public class UIEvent : WebKit.DOM.Event {
			[CCode (has_construct_function = false)]
			protected UIEvent ();
			public long get_char_code ();
			public long get_detail ();
			public long get_key_code ();
			public long get_layer_x ();
			public long get_layer_y ();
			public long get_page_x ();
			public long get_page_y ();
			public unowned WebKit.DOM.DOMWindow get_view ();
			public void init_ui_event (string type, bool canBubble, bool cancelable, WebKit.DOM.DOMWindow view, long detail);
			public long char_code { get; }
			public long detail { get; }
			public long key_code { get; }
			public long layer_x { get; }
			public long layer_y { get; }
			public long page_x { get; }
			public long page_y { get; }
			public WebKit.DOM.DOMWindow view { get; }
			[NoAccessorMethod]
			public long which { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_wheel_event_get_type ()")]
		[GIR (name = "DOMWheelEvent")]
		public class WheelEvent : WebKit.DOM.MouseEvent {
			[CCode (has_construct_function = false)]
			protected WheelEvent ();
			public long get_wheel_delta ();
			public long get_wheel_delta_x ();
			public long get_wheel_delta_y ();
			public void init_wheel_event (long wheelDeltaX, long wheelDeltaY, WebKit.DOM.DOMWindow view, long screenX, long screenY, long clientX, long clientY, bool ctrlKey, bool altKey, bool shiftKey, bool metaKey);
			[NoAccessorMethod]
			public ulong delta_mode { get; }
			[NoAccessorMethod]
			public double delta_x { get; }
			[NoAccessorMethod]
			public double delta_y { get; }
			[NoAccessorMethod]
			public double delta_z { get; }
			[NoAccessorMethod]
			public bool webkit_direction_inverted_from_device { get; }
			public long wheel_delta { get; }
			public long wheel_delta_x { get; }
			public long wheel_delta_y { get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_xpath_expression_get_type ()")]
		[GIR (name = "DOMXPathExpression")]
		public class XPathExpression : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected XPathExpression ();
			public unowned WebKit.DOM.XPathResult evaluate (WebKit.DOM.Node contextNode, ushort type, WebKit.DOM.XPathResult inResult) throws GLib.Error;
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_xpath_result_get_type ()")]
		[GIR (name = "DOMXPathResult")]
		public class XPathResult : WebKit.DOM.Object {
			[CCode (has_construct_function = false)]
			protected XPathResult ();
			public bool get_boolean_value () throws GLib.Error;
			public bool get_invalid_iterator_state ();
			public double get_number_value () throws GLib.Error;
			public ushort get_result_type ();
			public unowned WebKit.DOM.Node get_single_node_value () throws GLib.Error;
			public ulong get_snapshot_length () throws GLib.Error;
			public string get_string_value () throws GLib.Error;
			public unowned WebKit.DOM.Node iterate_next () throws GLib.Error;
			public unowned WebKit.DOM.Node snapshot_item (ulong index) throws GLib.Error;
			public bool boolean_value { get; }
			public bool invalid_iterator_state { get; }
			public double number_value { get; }
			public uint result_type { get; }
			public WebKit.DOM.Node single_node_value { get; }
			public ulong snapshot_length { get; }
			public string string_value { owned get; }
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_event_target_get_type ()")]
		[GIR (name = "DOMEventTarget")]
		public interface EventTarget : GLib.Object {
			public bool add_event_listener_with_closure (string event_name, GLib.Closure handler, bool use_capture);
			public abstract bool dispatch_event (WebKit.DOM.Event event) throws GLib.Error;
			public abstract bool remove_event_listener (string event_name, GLib.Closure handler, bool use_capture);
			public bool remove_event_listener_with_closure (string event_name, GLib.Closure handler, bool use_capture);
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_node_filter_get_type ()")]
		[GIR (name = "DOMNodeFilter")]
		public interface NodeFilter : GLib.Object {
			public abstract short accept_node (WebKit.DOM.Node node);
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_dom_xpath_ns_resolver_get_type ()")]
		[GIR (name = "DOMXPathNSResolver")]
		public interface XPathNSResolver : GLib.Object {
			public abstract string lookup_namespace_uri (string prefix);
		}
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_CSS_RULE_CHARSET_RULE")]
		public const int _CSS_RULE_CHARSET_RULE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_CSS_RULE_FONT_FACE_RULE")]
		public const int _CSS_RULE_FONT_FACE_RULE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_CSS_RULE_IMPORT_RULE")]
		public const int _CSS_RULE_IMPORT_RULE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_CSS_RULE_MEDIA_RULE")]
		public const int _CSS_RULE_MEDIA_RULE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_CSS_RULE_PAGE_RULE")]
		public const int _CSS_RULE_PAGE_RULE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_CSS_RULE_STYLE_RULE")]
		public const int _CSS_RULE_STYLE_RULE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_CSS_RULE_UNKNOWN_RULE")]
		public const int _CSS_RULE_UNKNOWN_RULE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_CSS_VALUE_CSS_CUSTOM")]
		public const int _CSS_VALUE_CSS_CUSTOM;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_CSS_VALUE_CSS_INHERIT")]
		public const int _CSS_VALUE_CSS_INHERIT;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_CSS_VALUE_CSS_PRIMITIVE_VALUE")]
		public const int _CSS_VALUE_CSS_PRIMITIVE_VALUE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_CSS_VALUE_CSS_VALUE_LIST")]
		public const int _CSS_VALUE_CSS_VALUE_LIST;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_AT_TARGET")]
		public const int _EVENT_AT_TARGET;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_BLUR")]
		public const int _EVENT_BLUR;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_BUBBLING_PHASE")]
		public const int _EVENT_BUBBLING_PHASE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_CAPTURING_PHASE")]
		public const int _EVENT_CAPTURING_PHASE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_CHANGE")]
		public const int _EVENT_CHANGE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_CLICK")]
		public const int _EVENT_CLICK;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_DBLCLICK")]
		public const int _EVENT_DBLCLICK;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_DRAGDROP")]
		public const int _EVENT_DRAGDROP;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_FOCUS")]
		public const int _EVENT_FOCUS;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_KEYDOWN")]
		public const int _EVENT_KEYDOWN;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_KEYPRESS")]
		public const int _EVENT_KEYPRESS;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_KEYUP")]
		public const int _EVENT_KEYUP;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_MOUSEDOWN")]
		public const int _EVENT_MOUSEDOWN;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_MOUSEDRAG")]
		public const int _EVENT_MOUSEDRAG;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_MOUSEMOVE")]
		public const int _EVENT_MOUSEMOVE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_MOUSEOUT")]
		public const int _EVENT_MOUSEOUT;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_MOUSEOVER")]
		public const int _EVENT_MOUSEOVER;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_MOUSEUP")]
		public const int _EVENT_MOUSEUP;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_NONE")]
		public const int _EVENT_NONE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_EVENT_SELECT")]
		public const int _EVENT_SELECT;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_KEYBOARD_EVENT_KEY_LOCATION_LEFT")]
		public const int _KEYBOARD_EVENT_KEY_LOCATION_LEFT;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_KEYBOARD_EVENT_KEY_LOCATION_NUMPAD")]
		public const int _KEYBOARD_EVENT_KEY_LOCATION_NUMPAD;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_KEYBOARD_EVENT_KEY_LOCATION_RIGHT")]
		public const int _KEYBOARD_EVENT_KEY_LOCATION_RIGHT;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_KEYBOARD_EVENT_KEY_LOCATION_STANDARD")]
		public const int _KEYBOARD_EVENT_KEY_LOCATION_STANDARD;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_ATTRIBUTE_NODE")]
		public const int _NODE_ATTRIBUTE_NODE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_CDATA_SECTION_NODE")]
		public const int _NODE_CDATA_SECTION_NODE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_COMMENT_NODE")]
		public const int _NODE_COMMENT_NODE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_DOCUMENT_FRAGMENT_NODE")]
		public const int _NODE_DOCUMENT_FRAGMENT_NODE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_DOCUMENT_NODE")]
		public const int _NODE_DOCUMENT_NODE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_DOCUMENT_POSITION_CONTAINED_BY")]
		public const int _NODE_DOCUMENT_POSITION_CONTAINED_BY;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_DOCUMENT_POSITION_CONTAINS")]
		public const int _NODE_DOCUMENT_POSITION_CONTAINS;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_DOCUMENT_POSITION_DISCONNECTED")]
		public const int _NODE_DOCUMENT_POSITION_DISCONNECTED;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_DOCUMENT_POSITION_FOLLOWING")]
		public const int _NODE_DOCUMENT_POSITION_FOLLOWING;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC")]
		public const int _NODE_DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_DOCUMENT_POSITION_PRECEDING")]
		public const int _NODE_DOCUMENT_POSITION_PRECEDING;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_DOCUMENT_TYPE_NODE")]
		public const int _NODE_DOCUMENT_TYPE_NODE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_ELEMENT_NODE")]
		public const int _NODE_ELEMENT_NODE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_ENTITY_NODE")]
		public const int _NODE_ENTITY_NODE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_ENTITY_REFERENCE_NODE")]
		public const int _NODE_ENTITY_REFERENCE_NODE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_FILTER_ACCEPT")]
		public const int _NODE_FILTER_ACCEPT;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_FILTER_REJECT")]
		public const int _NODE_FILTER_REJECT;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_FILTER_SHOW_ALL")]
		public const int _NODE_FILTER_SHOW_ALL;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_FILTER_SHOW_ATTRIBUTE")]
		public const int _NODE_FILTER_SHOW_ATTRIBUTE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_FILTER_SHOW_CDATA_SECTION")]
		public const int _NODE_FILTER_SHOW_CDATA_SECTION;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_FILTER_SHOW_COMMENT")]
		public const int _NODE_FILTER_SHOW_COMMENT;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_FILTER_SHOW_DOCUMENT")]
		public const int _NODE_FILTER_SHOW_DOCUMENT;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_FILTER_SHOW_DOCUMENT_FRAGMENT")]
		public const int _NODE_FILTER_SHOW_DOCUMENT_FRAGMENT;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_FILTER_SHOW_DOCUMENT_TYPE")]
		public const int _NODE_FILTER_SHOW_DOCUMENT_TYPE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_FILTER_SHOW_ELEMENT")]
		public const int _NODE_FILTER_SHOW_ELEMENT;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_FILTER_SHOW_ENTITY")]
		public const int _NODE_FILTER_SHOW_ENTITY;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_FILTER_SHOW_ENTITY_REFERENCE")]
		public const int _NODE_FILTER_SHOW_ENTITY_REFERENCE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_FILTER_SHOW_NOTATION")]
		public const int _NODE_FILTER_SHOW_NOTATION;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_FILTER_SHOW_PROCESSING_INSTRUCTION")]
		public const int _NODE_FILTER_SHOW_PROCESSING_INSTRUCTION;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_FILTER_SHOW_TEXT")]
		public const int _NODE_FILTER_SHOW_TEXT;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_FILTER_SKIP")]
		public const int _NODE_FILTER_SKIP;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_NOTATION_NODE")]
		public const int _NODE_NOTATION_NODE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_PROCESSING_INSTRUCTION_NODE")]
		public const int _NODE_PROCESSING_INSTRUCTION_NODE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_NODE_TEXT_NODE")]
		public const int _NODE_TEXT_NODE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_RANGE_END_TO_END")]
		public const int _RANGE_END_TO_END;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_RANGE_END_TO_START")]
		public const int _RANGE_END_TO_START;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_RANGE_NODE_AFTER")]
		public const int _RANGE_NODE_AFTER;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_RANGE_NODE_BEFORE")]
		public const int _RANGE_NODE_BEFORE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_RANGE_NODE_BEFORE_AND_AFTER")]
		public const int _RANGE_NODE_BEFORE_AND_AFTER;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_RANGE_NODE_INSIDE")]
		public const int _RANGE_NODE_INSIDE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_RANGE_START_TO_END")]
		public const int _RANGE_START_TO_END;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_RANGE_START_TO_START")]
		public const int _RANGE_START_TO_START;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_XPATH_RESULT_ANY_TYPE")]
		public const int _XPATH_RESULT_ANY_TYPE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_XPATH_RESULT_ANY_UNORDERED_NODE_TYPE")]
		public const int _XPATH_RESULT_ANY_UNORDERED_NODE_TYPE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_XPATH_RESULT_BOOLEAN_TYPE")]
		public const int _XPATH_RESULT_BOOLEAN_TYPE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_XPATH_RESULT_FIRST_ORDERED_NODE_TYPE")]
		public const int _XPATH_RESULT_FIRST_ORDERED_NODE_TYPE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_XPATH_RESULT_NUMBER_TYPE")]
		public const int _XPATH_RESULT_NUMBER_TYPE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_XPATH_RESULT_ORDERED_NODE_ITERATOR_TYPE")]
		public const int _XPATH_RESULT_ORDERED_NODE_ITERATOR_TYPE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_XPATH_RESULT_ORDERED_NODE_SNAPSHOT_TYPE")]
		public const int _XPATH_RESULT_ORDERED_NODE_SNAPSHOT_TYPE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_XPATH_RESULT_STRING_TYPE")]
		public const int _XPATH_RESULT_STRING_TYPE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_XPATH_RESULT_UNORDERED_NODE_ITERATOR_TYPE")]
		public const int _XPATH_RESULT_UNORDERED_NODE_ITERATOR_TYPE;
		[CCode (cheader_filename = "webkit2/webkit-web-extension.h", cname = "WEBKIT_DOM_XPATH_RESULT_UNORDERED_NODE_SNAPSHOT_TYPE")]
		public const int _XPATH_RESULT_UNORDERED_NODE_SNAPSHOT_TYPE;
	}
	[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_frame_get_type ()")]
	public class Frame : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Frame ();
		public void* get_javascript_context_for_script_world (WebKit.ScriptWorld world);
		public void* get_javascript_global_context ();
		public unowned string get_uri ();
		public bool is_main_frame ();
	}
	[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_script_world_get_type ()")]
	public class ScriptWorld : GLib.Object {
		[CCode (has_construct_function = false)]
		public ScriptWorld ();
		public static unowned WebKit.ScriptWorld get_default ();
		public signal void window_object_cleared (WebKit.WebPage page, WebKit.Frame frame);
	}
	 
	[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_web_extension_get_type ()")]
	public class WebExtension : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebExtension ();
		public unowned WebKit.WebPage get_page (uint64 page_id);
		public signal void page_created (WebKit.WebPage web_page);
	}
	[CCode (cheader_filename = "webkit2/webkit-web-extension.h", type_id = "webkit_web_page_get_type ()")]
	public class WebPage : GLib.Object {
		[CCode (has_construct_function = false)]
		protected WebPage ();
		public unowned WebKit.DOM.Document get_dom_document ();
		public uint64 get_id ();
		public unowned WebKit.Frame get_main_frame ();
		public unowned string get_uri ();
		public string uri { get; }
		public signal void document_loaded ();
		public signal bool send_request (WebKit.URIRequest request, WebKit.URIResponse redirected_response);
	}
	[CCode (cheader_filename = "webkit2/webkit-web-extension.h", has_target = false)]
	public delegate void WebExtensionInitializeFunction (WebKit.WebExtension extension);
	[CCode (cheader_filename = "webkit2/webkit-web-extension.h", has_target = false)]
	public delegate void WebExtensionInitializeWithUserDataFunction (WebKit.WebExtension extension, GLib.Variant user_data);

}
