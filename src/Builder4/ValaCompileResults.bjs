{
 "name" : "ValaCompileResults",
 "parent" : "",
 "title" : "",
 "path" : "/home/alan/gitlive/app.Builder.js/src/Builder4/ValaCompileResults.bjs",
 "permname" : "",
 "modOrder" : "",
 "build_module" : "",
 "items" : [
  {
   "int height_request" : 800,
   "id" : "ValaCompileResults",
   "Xcls_MainWindow window" : "",
   "| void show" : "(Json.Object tree, Gtk.Widget onbtn) {\n\n        \n        this.file = null;\n        this.notices = tree;\n       \n         //print(\"looking for %s\\n\", id);\n        // loop through parent childnre\n          \n        \n        var store = this.compile_result_store.el;    \n        \n        store.clear();\n     \n        \n        tree.foreach_member((obj, file, node) => {\n            // id line \"display text\", file\n            \n            var title = GLib.Path.get_basename(GLib.Path.get_dirname( file)) + \"/\" +  GLib.Path.get_basename( file) ;\n            Gtk.TreeIter iter;\n            print(\"Add file %s\", title);\n            store.append(out iter, null);\n            var lines = tree.get_object_member(file);\n            title += \" (\" + lines.get_size().to_string() + \")\";\n            store.set(iter, 0, file, 1, 0, 2, title, 3, file,-1);\n            \n            lines.foreach_member((obja, line, nodea) => {\n                var msg  = \"\";\n                var ar = lines.get_array_member(line);\n                for (var i = 0 ; i < ar.get_length(); i++) {\n    \t\t    msg += (msg.length > 0) ? \"\\n\" : \"\";\n    \t\t    msg += ar.get_string_element(i);\n\t        }\n                Gtk.TreeIter citer;  \n                print(\"Add line %s\", line);\n                store.append(out citer, iter);\n                store.set(citer, \n                    0, file + \":\" + line, \n                    1, int.parse(line), \n                    2, GLib.Markup.escape_text(line + \": \" + msg), \n                    3, file,-1);\n            \n            });\n            \n            \n        \n        });\n        \n    int w,h;\n    this.window.el.get_size(out w, out h);\n    \n    // left tree = 250, editor area = 500?\n    \n    var new_w = int.min(250, w-100);\n    if (new_w > (w-100)) {\n        new_w = w-100;\n    }\n    this.el.set_size_request( int.max(100, new_w), int.max(100, h-120));\n\n    \n\n    if (this.el.relative_to == null) {\n        this.el.set_relative_to(onbtn);\n    }\n    this.el.show_all();\n   \n    while(Gtk.events_pending()) { \n            Gtk.main_iteration();\n    }       \n //   this.hpane.el.set_position( 0);\n}\n",
   "xtype" : "Popover",
   "Gtk.PositionType position" : "Gtk.PositionType.TOP",
   "bool active" : false,
   "int width_request" : 900,
   "$ xns" : "Gtk",
   "JsRender.JsRender? file" : "",
   "Json.Object notices" : "",
   "bool modal" : true,
   "items" : [
    {
     "id" : "compile_view",
     "* pack" : "add",
     "xtype" : "Box",
     "gboolean homogeneous" : false,
     "$ xns" : "Gtk",
     "Gtk.Orientation orientation" : "Gtk.Orientation.VERTICAL",
     "items" : [
      {
       "* init" : "{\n this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n \n\n}\n",
       "bool hexpand" : true,
       "* pack" : "pack_end,true,true,0",
       "xtype" : "ScrolledWindow",
       "$ xns" : "Gtk",
       "items" : [
        {
         "* init" : "{\n\n    var description =   Pango.FontDescription.from_string(\"monospace\");\n    description.set_size(8000);\n    this.el.override_font(description);\n\n\n}\n",
         "xtype" : "SourceView",
         "* pack" : "add",
         "$ xns" : "Gtk",
         "bool show_line_numbers" : true
        }
       ]
      }
     ]
    }
   ]
  }
 ]
}