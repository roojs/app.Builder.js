{
    "id": "file-gtk-16",
    "name": "WindowLeftProps",
    "parent": "",
    "title": false,
    "path": "/home/alan/gitlive/app.Builder.js/Builder4/WindowLeftProps.bjs",
    "items": [
        {
            ".JsRender.JsRender:file": "",
            ".JsRender.Node:node": "",
            ".bool:allow_edit": false,
            ".signal:void:changed": "()",
            ".signal:void:show_add_props": "(string type)",
            ".signal:void:show_editor": "(JsRender.JsRender file, JsRender.Node node, string type, string key)",
            "id": "LeftProps",
            "xtype": "VBox",
            "|homogeneous": "false   ",
            "|string:keyFormat": "(string val, string type) {\n    \n    // Glib.markup_escape_text(val);\n\n    if (type == \"listener\") {\n        return \"<span font_weight=\\\"bold\\\" color=\\\"#660000\\\">\" + \n            GLib.Markup.escape_text(val) +\n             \"</span>\";\n    }\n    // property..\n    if (val.length < 1) {\n        return \"<span  color=\\\"#FF0000\\\">--empty--</span>\";\n    }\n    \n    //@ = signal\n    //$ = property with \n    //# - object properties\n    //* = special\n    // all of these... - display value is last element..\n    var ar = val.strip().split(\" \");\n    \n    \n    var dval = GLib.Markup.escape_text(ar[ar.length-1]);\n    \n    \n    \n    \n    switch(val[0]) {\n        case '@': // signal // just bold balck?\n            if (dval[0] == '@') {\n                dval = dval.substring(1);\n            }\n        \n            return @\"<span  font_weight=\\\"bold\\\">@ $dval</span>\";        \n        case '#': // object properties?\n            if (dval[0] == '#') {\n                dval = dval.substring(1);\n            }\n            return @\"<span  font_weight=\\\"bold\\\">$dval</span>\";\n        case '*': // special\n            if (dval[0] == '*') {\n                dval = dval.substring(1);\n            }\n            return @\"<span   color=\\\"#0000CC\\\" font_weight=\\\"bold\\\">$dval</span>\";            \n        case '$':\n            if (dval[0] == '$') {\n                dval = dval.substring(1);\n            }\n            return @\"<span   style=\\\"italic\\\">$dval</span>\";\n       case '|': // user defined methods\n            if (dval[0] == '|') {\n                dval = dval.substring(1);\n            }\n            return @\"<span color=\\\"#008000\\\" font_weight=\\\"bold\\\">$dval</span>\";\n            \n              \n            \n        default:\n            return dval;\n    }\n      \n    \n\n}",
            "|string:keySortFormat": "(string key) {\n    // listeners first - with 0\n    // specials\n    if (key[0] == '*') {\n        return \"1 \" + key;\n    }\n    // functions\n    \n    var bits = key.split(\" \");\n    \n    if (key[0] == '|') {\n        return \"2 \" + bits[bits.length -1];\n    }\n    // signals\n    if (key[0] == '@') {\n        return \"3 \" + bits[bits.length -1];\n    }\n        \n    // props\n    if (key[0] == '#') {\n        return \"4 \" + bits[bits.length -1];\n    }\n    // the rest..\n    return \"5 \" + bits[bits.length -1];    \n\n\n\n}",
            "|void:addProp": " (string type, string key, string value) {\n      // info includes key, val, skel, etype..\n      //console.dump(info);\n        //type = info.type.toLowerCase();\n        //var data = this.toJS();\n        \n \n            \n    if (type == \"listener\") {\n        if (this.node.listeners.has_key(key)) {\n            return;\n        }\n        this.node.listeners.set(key,value);\n    } else  {\n    \n        if (this.node.props.has_key(key)) {\n            return;\n        }\n        this.node.props.set(key,value);\n    }\n           \n      \n    // add a row???\n    this.load(this.file, this.node);\n    \n    \n    \n    /// need to find the row which I've just added..\n    \n    \n    var s = this.view.el.get_selection();\n    s.unselect_all();\n    \n  \n    this.model.el.foreach((model, path, iter) => {\n        GLib.Value gval;\n    \n        this.model.el.get_value(iter, 0 , out gval);\n        if ((string)gval != type) {\n            return false;\n        }\n        this.model.el.get_value(iter, 1 , out gval);\n        if ((string)gval != key) {\n            return false;\n        }\n        this.startEditingValue(this.model.el.get_path(iter));\n        //s.select_iter(iter);\n        return true; \n    });\n    \n    \n    \n              \n}\n",
            "|void:before_edit": "()\n{\n\n    print(\"before edit - stop editing\\n\");\n    \n  // these do not appear to trigger save...\n    _this.keyrender.el.stop_editing(false);\n    _this.keyrender.el.editable  =false;\n\n    _this.valrender.el.stop_editing(false);\n    _this.valrender.el.editable  =false;    \n    \n    \n// technicall stop the popup editor..\n\n}\n",
            "|void:deleteSelected": " () {\n    \n            Gtk.TreeIter iter;\n            Gtk.TreeModel mod;\n            \n            var s = this.view.el.get_selection();\n            s.get_selected(out mod, out iter);\n                 \n                  \n            GLib.Value gval;\n            mod.get_value(iter, 0 , out gval);\n            var type = (string)gval;\n            \n            mod.get_value(iter, 1 , out gval);\n            var key = (string)gval;\n            \n            switch(type) {\n                case \"listener\":\n                    this.node.listeners.remove(key);\n                    break;\n                    \n                case \"prop\":\n                    this.node.props.remove(key);\n                    break;\n            }\n            this.load(this.file, this.node);\n            \n            _this.changed();\n}",
            "|void:finish_editing": "() {\n     // \n    this.before_edit();\n}",
            "|void:load": "(JsRender.JsRender file, JsRender.Node? node) \n{\n    print(\"load leftprops\\n\");\n    this.before_edit();\n    this.node = node;\n    this.file = file;\n    \n \n    this.model.el.clear();\n              \n    //this.get('/RightEditor').el.hide();\n    if (node ==null) {\n        return ;\n    }\n     \n    \n\n    //var provider = this.get('/LeftTree').getPaleteProvider();\n    Gtk.TreeIter iter;\n    \n    //typeof(string),  // 0 key type\n     //typeof(string),  // 1 key\n     //typeof(string),  // 2 key (display)\n     //typeof(string),  // 3 value\n     //typeof(string),  // 4 value (display)\n     //typeof(string),  // 5 both (tooltip)\n    \n    \n    \n    \n    // really need a way to sort the hashmap...\n    var m = this.model.el;\n    \n    var miter = node.listeners.map_iterator();\n    \n    while(miter.next()) {\n        m.append(out iter,null);\n        \n        var dl = miter.get_value().split(\"\\n\");\n        var dis_val = dl.length > 0 ? (dl[0].strip()+ \"...\") : \"\";\n        \n        m.set(iter, \n                0, \"listener\",\n            1, miter.get_key(),\n            2, this.keyFormat(miter.get_key() , \"listener\"),\n            3, miter.get_value(),\n            4, dis_val,\n            5, \"<tt>\" +  GLib.Markup.escape_text(miter.get_key() + \" \" + miter.get_value()) + \"</tt>\",\n            6,  \"0 \" + miter.get_key()\n        ); \n     }\n     \n      \n    miter = node.props.map_iterator();\n    \n    \n   while(miter.next()) {\n        m.append(out iter,null);\n        var dl = miter.get_value().split(\"\\n\");\n        var dis_val = dl.length > 0 ? dl[0] : \"\";\n\n        m.set(iter, \n                0, \"props\",\n                1, miter.get_key(),\n                2,  this.keyFormat(miter.get_key() , \"prop\"),\n                3, miter.get_value(),\n                4, dis_val,\n                 5, \"<tt>\" + GLib.Markup.escape_text(miter.get_key() + \" \" + miter.get_value()) + \"</tt>\",\n                 6,  this.keySortFormat(miter.get_key())\n            ); \n   }\n   print(\"clear selection\\n\");\n   // clear selection?\n   this.model.el.set_sort_column_id(6,Gtk.SortType.ASCENDING); // sort by real key..\n   \n   this.view.el.get_selection().unselect_all();\n   \n   \n   \n}\n",
            "|void:startEditingKey": "( Gtk.TreePath path) {\n    \n     \n    \n  \n    // others... - fill in options for true/false?\n    \n       \n    GLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {\n        this.allow_edit  = true;\n        this.keyrender.el.editable = true;\n     \n        this.view.el.set_cursor_on_cell(\n            path,\n            this.keycol.el,\n            this.keyrender.el,\n            true\n        );\n               \n        return false;\n    });\n      \n    \n}\n",
            "|void:startEditingValue": "( Gtk.TreePath path) {\n            \n             \n            \n            Gtk.TreeIter iter;\n\n            var mod = this.model.el;\n            mod.get_iter (out iter, path);\n             \n            /*\n                m.set(iter, \n                        0, \"listener\",\n                        1, miter.get_key(),\n                        2, \"<b>\" + miter.get_key() + \"</b>\",\n                        3, miter.get_value()\n                    ); \n             \n            */\n            GLib.Value gval;\n            mod.get_value(iter, 3 , out gval);\n            var val = (string)gval;\n        \n            mod.get_value(iter, 1 , out gval);\n            var key = (string)gval;\n            \n            mod.get_value(iter, 0 , out gval);\n            var type = (string)gval;\n            \n            var use_textarea = false;\n            \n            if (type == \"listener\") {\n                use_textarea = true;\n            }\n            if (key.length > 0 && key[0] == '|') {\n                use_textarea = true;\n            }\n            if (use_textarea) {\n                print(\"Call show editor\\n\");\n                GLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {\n                    this.view.el.get_selection().select_path(path);\n                    return false;\n                });\n                this.show_editor(file, node, type, key);\n                \n                return;\n            }\n            // others... - fill in options for true/false?\n           print(\"turn on editing %s \\n\" , mod.get_path(iter).to_string());\n            \n            GLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {\n                this.allow_edit  = true;\n                this.valrender.el.editable = true;\n                this.view.el.set_cursor_on_cell(\n                    path,\n                    this.valcol.el,\n                    this.valrender.el,\n                    true\n                );\n                return false;\n            });\n            \n        }\n",
            "|xns": "Gtk",
            "items": [
                {
                    "pack": "pack_start,false,true,0",
                    "xtype": "HBox",
                    "|xns": "Gtk",
                    "items": [
                        {
                            "listeners": {
                                "button_press_event": " ( event ) => {\n    _this.show_add_props(\"prop\");\n    return false;\n}"
                            },
                            "pack": "add",
                            "xtype": "Button",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "|xns": "Gtk",
                                    "xtype": "HBox",
                                    "pack": "add",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Image",
                                            "pack": "add",
                                            "|stock": "Gtk.STOCK_ADD",
                                            "|icon_size": "Gtk.IconSize.MENU"
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Label",
                                            "pack": "add",
                                            "label": "Property"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "listeners": {
                                "button_press_event": "  ( event)  => {\n    \n// \tif (!this.get('/Editor').save()) {\n// \t    // popup!! - click handled.. \n// \t    return true;\n//        }\n    _this.show_add_props(\"listener\");\n    return false;\n}"
                            },
                            "pack": "add",
                            "xtype": "Button",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "|xns": "Gtk",
                                    "xtype": "HBox",
                                    "pack": "add",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Image",
                                            "pack": "add",
                                            "|stock": "Gtk.STOCK_ADD",
                                            "|icon_size": "Gtk.IconSize.MENU"
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Label",
                                            "pack": "add",
                                            "label": "Handler"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "listeners": {
                                "button_press_event": "  (self, ev) => {\n    _this.before_edit();\n    \n        \n    var p = _this.AddPropertyPopup;\n    p.el.set_screen(Gdk.Screen.get_default());\n    p.el.show_all();\n     p.el.popup(null, null, null, ev.button, ev.time);\n     return true;\n}"
                            },
                            "pack": "add",
                            "xtype": "Button",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "|xns": "Gtk",
                                    "xtype": "HBox",
                                    "pack": "add",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Image",
                                            "pack": "add",
                                            "|stock": "Gtk.STOCK_ADD",
                                            "|icon_size": "Gtk.IconSize.MENU"
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Label",
                                            "pack": "add",
                                            "label": "Other"
                                        }
                                    ]
                                },
                                {
                                    "|xns": "Gtk",
                                    "xtype": "Menu",
                                    "pack": false,
                                    "id": "AddPropertyPopup",
                                    "items": [
                                        {
                                            "listeners": {
                                                "activate": " ()  => {\n    _this.addProp( \"prop\", \".string:id\", \"\");\n}"
                                            },
                                            "label": "ID",
                                            "pack": "append",
                                            "tooltip_markup": "Using this.get('*someid') will find any id in an application.",
                                            "xtype": "MenuItem",
                                            "|xns": "Gtk"
                                        },
                                        {
                                            "listeners": {
                                                "activate": "  ( ) => {\n\n    _this.addProp( \"prop\", \"*pack\",\"add\");\n}"
                                            },
                                            "label": "PACK",
                                            "pack": "append",
                                            "tooltip_markup": "Add what type of packing is to be used",
                                            "xtype": "MenuItem",
                                            "|xns": "Gtk"
                                        },
                                        {
                                            "listeners": {
                                                "activate": "  ( ) => {\n\n    _this.addProp( \"prop\",  \"|init\", \"{\\n\\n}\\n\" );\n}"
                                            },
                                            "label": "INIT",
                                            "pack": "append",
                                            "tooltip_markup": "Override the init method",
                                            "xtype": "MenuItem",
                                            "|xns": "Gtk"
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "SeparatorMenuItem",
                                            "pack": "add"
                                        },
                                        {
                                            "listeners": {
                                                "activate": "  (self) => {\n\n    _this.addProp( \"prop\", \".string:XXXX\", \"\");\n\n}"
                                            },
                                            "label": "String",
                                            "pack": "append",
                                            "tooltip_markup": "Add a user defined string property",
                                            "xtype": "MenuItem",
                                            "|xns": "Gtk"
                                        },
                                        {
                                            "listeners": {
                                                "activate": "  ( ) =>{\n\n    _this.addProp(\"prop\",  \".int:XXX\", \"0\");\n}"
                                            },
                                            "label": "Number",
                                            "pack": "append",
                                            "tooltip_markup": "Add a user defined number property",
                                            "xtype": "MenuItem",
                                            "|xns": "Gtk"
                                        },
                                        {
                                            "listeners": {
                                                "activate": "  ( ) =>{\n\n    _this.addProp( \"prop\", \".bool:XXX\", \"true\");\n}"
                                            },
                                            "label": "Boolean",
                                            "pack": "append",
                                            "tooltip_markup": "Add a user defined boolean property",
                                            "xtype": "MenuItem",
                                            "|xns": "Gtk"
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "SeparatorMenuItem",
                                            "pack": "add"
                                        },
                                        {
                                            "listeners": {
                                                "activate": "  ( ) =>{\n\n    _this.addProp(\"prop\",  \"|XXXX\", \"function() { }\");\n}"
                                            },
                                            "label": "Javascript Function",
                                            "pack": "append",
                                            "tooltip_markup": "Add a user function boolean property",
                                            "xtype": "MenuItem",
                                            "|xns": "Gtk"
                                        },
                                        {
                                            "listeners": {
                                                "activate": "  ( ) =>{\n\n    _this.addProp( \"prop\", \"|.type:return_type:XXXX\", \"() {\\n\\n}\\n\");\n}"
                                            },
                                            "label": "Vala Method",
                                            "pack": "append",
                                            "tooltip_markup": "Add a user function boolean property",
                                            "xtype": "MenuItem",
                                            "|xns": "Gtk"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    ".bool:editing": false,
                    "id": "EditProps",
                    "pack": "pack_end,true,true,0",
                    "xtype": "ScrolledWindow",
                    "|init": "  {\n  \n   this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n}\n",
                    "|shadow_type": "Gtk.ShadowType.IN",
                    "|xns": "Gtk",
                    "items": [
                        {
                            "listeners": {
                                "button_press_event": "  ( ev)  => {\n\n    _this.before_edit();\n    \n    Gtk.TreeViewColumn col;\n    int cell_x;\n    int cell_y;\n    Gtk.TreePath path;\n    if (!this.el.get_path_at_pos((int)ev.x, (int) ev.y, out path, out col, out cell_x, out cell_y )) {\n        print(\"nothing selected on click\");\n        GLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {\n            this.el.get_selection().unselect_all();\n            return false;\n        });\n        return false; //not on a element.\n    }\n    \n     // right click.\n     if (ev.type == Gdk.EventType.BUTTON_PRESS  && ev.button == 3) {    \n        // show popup!.   \n        if (col.title == \"value\") {\n            return false;\n        }\n\n        var p = _this.ContextMenu;\n\n        p.el.set_screen(Gdk.Screen.get_default());\n        p.el.show_all();\n        p.el.popup(null, null, null,  ev.button, ev.time);\n        //Seed.print(\"click:\" + res.column.title);\n        // select the \n        GLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {\n  \n            this.el.get_selection().select_path(path);\n            return false;\n        });\n        \n        return false;\n    }\n    \n     \n    if (col.title != \"value\") {\n        print(\"col title != value\");\n        \n        GLib.Timeout.add_full(GLib.Priority.DEFAULT,10 , () => {\n            this.el.get_selection().select_path(path);\n            return false;\n        });\n        \n        \n          //  XObject.error(\"column is not value?\");\n        return false; // ignore.. - key click.. ??? should we do this??\n    }\n    \n    // currently editing???\n//    if (  this.activePath) {\n        \n     //   this.activePath = false;\n       // stop editing!!!!\n     /*\n        if (this.get('/Editor').dirty) {\n            //if (!this.get('/Editor.buffer').checkSyntax()) {\n            //   this.get('/StandardErrorDialog').show(\"Fix errors in code and save..\"); \n            //   return true;\n            //    // error Dialog\n            //}\n            if (!this.get('/Editor.view').save()) {\n                return true;\n            }\n        }   \n        */\n        \n        //this.EditProps.editableColumn.items[0].el.stop_editing();\n        //this.EditProps.editing = false;\n    \n    //    XObject.error(\"Currently editing?\");\n     //   return false;\n   // }\n    \n   // var renderer = this.valrender.el; // set has_entry..\n    \n    //var type = this.get('/LeftPanel.model').getType(res.path.to_string());\n        \n    // get options for this type -- this is to support option lists etc..\n    //var provider = this.get('/LeftTree').getPaleteProvider();\n    //var opts = provider.findOptions(type);\n    \n//    if (opts === false) {\n        // it's text etnry\n//         this.get('/LeftPanel').editableColumn.setOptions([]);\n//        renderer.has_entry = true;\n//    } else {\n//         this.get('/LeftPanel').editableColumn.setOptions(opts);\n//        renderer.has_entry = false;\n//    }\n\n    // we need to set the selected row..\n    \n     //Gtk.TreePath path;\n\n     ;\n     \n    _this.startEditingValue(path); // assumes selected row..\n        \n   //Seed.print(\"click\" + ev.type);\n    //console.dump(res);\n    return false;\n\n              \n   \n}"
                            },
                            "id": "view",
                            "tooltip_column": 5,
                            "xtype": "TreeView",
                            "|enable_tree_lines": "true",
                            "|headers_visible": "false",
                            "|init": "{\n    var selection = this.el.get_selection();\n    selection.set_mode( Gtk.SelectionMode.SINGLE);\n\n\n    var description = new Pango.FontDescription();\n    description.set_size(8000);\n    this.el.modify_font(description);\n}\n",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "id": "model",
                                    "n_columns": 7,
                                    "pack": "set_model",
                                    "xtype": "TreeStore",
                                    "|changed": "function(str, doRefresh) {\n    if (!this.activePath) {\n        return;\n    }\n    var iter = new Gtk.TreeIter();\n    this.el.get_iter(iter, new Gtk.TreePath.from_string(this.activePath));\n    \n    this.el.set_value(iter, 1, '' +str);\n    this.el.set_value(iter, 3, '' + this.toShort(str));\n    var type = this.getIterValue(iter, 4);\n\n    this.el.set_value(iter, 5, type + ' : ' + str);\n    // update the tree...  \n\n    this.get('/LeftTree.model').changed(this.toJS(), doRefresh); \n}\n",
                                    "|columns": "     typeof(string),  // 0 key type\n     typeof(string),  // 1 key\n     typeof(string),  // 2 key (display)\n     typeof(string),  // 3 value\n     typeof(string),   // 4 value (display)\n     typeof(string),   // 5 both (tooltip)     \n     typeof(string)   // 6 key (for sorting)\n",
                                    "|toShort": "function(str) {\n    var a = typeof(str) == 'string' ? str.split(\"\\n\") : [];\n        return a.length > 1 ? a[0] + '....' : '' + str;\n}\n",
                                    "|xns": "Gtk"
                                },
                                {
                                    "id": "keycol",
                                    "pack": "append_column",
                                    "title": "key",
                                    "xtype": "TreeViewColumn",
                                    "|init": " this.el.add_attribute(_this.keyrender.el , \"markup\", 2 );\n this.el.add_attribute(_this.keyrender.el , \"text\", 1 );\n  ",
                                    "|xns": "Gtk",
                                    "items": [
                                        {
                                            "listeners": {
                                                "editing_started": "(  editable, path) => {\n    ((Gtk.Entry)editable).set_text(\"XXX\");\n     //   this.get('/LeftPanel.model').activePath  = path;\n\n}",
                                                "edited": "  (path, newtext) => {\n        print(\"Keyrender  - signal:edited\\n\");\n    \n    this.el.editable = false;\n  \n/*\n m.set(iter, \n                0, \"listener\",\n                1, miter.get_key(),\n                2, \"<b>\" + miter.get_key() + \"</b>\",\n                3, miter.get_value()\n            ); \n\n  */      \n\n        Gtk.TreeIter  iter;\n        _this.model.el.get_iter(out iter, new Gtk.TreePath.from_string(path));\n        GLib.Value gval;\n        \n         _this.model.el.get_value(iter,1, out gval);\n        var oldval = (string)gval;\n        \n         _this.model.el.get_value(iter,0, out gval);\n        var ktype = (string)gval;\n       \n        _this.model.el.set_value(iter, 1, newtext);\n        \n        \n        switch(ktype) {\n            case \"listener\":\n                _this.node.listeners.set(newtext, _this.node.listeners.get(oldval));\n                _this.node.listeners.remove(oldval);\n                break;\n            case \"prop\":\n                _this.node.props.set(newtext, _this.node.props.get(oldval));\n                _this.node.props.remove(oldval);\n                break;\n         }\n         _this.changed();\n          \n}"
                                            },
                                            "id": "keyrender",
                                            "pack": "pack_start,false",
                                            "xtype": "CellRendererText",
                                            "|xns": "Gtk"
                                        }
                                    ]
                                },
                                {
                                    "id": "valcol",
                                    "pack": "append_column",
                                    "title": "value",
                                    "xtype": "TreeViewColumn",
                                    "|init": "{\n\t\n\t//     typeof(string),  // 0 key type\n    // typeof(string),  // 1 key\n    // typeof(string),  // 2 key (display)\n    // typeof(string),  // 3 value\n    // typeof(string)   // 4 value (display)\n\n\t\n\tthis.el.add_attribute(_this.valrender.el , \"text\", 4 );\n\t//this.el.add_attribute(_this.valrender.el , \"sensitive\", 4 );\n\t//this.el.add_attribute(this.items[0].el , 'editable', 3 );\n          // this.el.set_cell_data_func(cell, age_cell_data_func, NULL, NULL);\n\n //\tthis.get('/LeftPanel').editableColumn= this;\n}\n",
                                    "|xns": "Gtk",
                                    "items": [
                                        {
                                            "listeners": {
                                                "edited": "  (path, newtext) => {\n    print(\"Valrender  - signal:edited\\n\");\n  \n        this.el.editable = false;\n/*  \n m.set(iter, \n                0, \"listener\",\n                1, miter.get_key(),\n                2, \"<b>\" + miter.get_key() + \"</b>\",\n                3, miter.get_value(),\n                4, display_value(short);\n            ); \n\n  */      \n\n        Gtk.TreeIter  iter;\n        _this.model.el.get_iter(out iter, new Gtk.TreePath.from_string(path));\n        GLib.Value gval;\n        \n         _this.model.el.get_value(iter,0, out gval);\n        var ktype = (string)gval;\n        \n        \n         _this.model.el.get_value(iter,3, out gval);\n        var oldval = (string)gval;\n        \n         _this.model.el.get_value(iter,1, out gval);\n        var key = (string)gval;\n        \n         \n        \n        switch(ktype) {\n            case \"listener\":\n                _this.node.listeners.set(key, newtext);\n                break;\n            case \"prop\":\n                _this.node.props.set(key,newtext);\n                break;\n         }\n         _this.load(_this.file,_this.node);\n         _this.changed();\n          \n}",
                                                "editing_started": "( editable, path) => {\n    //_this.editing = true;\n    if (_this.allow_edit) {\n        _this.allow_edit =false;\n        return;\n    }\n    print(\"val - editing_Started\\n\");\n    this.el.editable = false; // make sure it's not editor...\n   \n}"
                                            },
                                            "id": "valrender",
                                            "pack": "pack_start,true",
                                            "text_column": 0,
                                            "xtype": "CellRendererCombo",
                                            "|editable": "false",
                                            "|has_entry": "true",
                                            "|xns": "Gtk",
                                            "items": [
                                                {
                                                    "*prop": "model",
                                                    "|columns": "typeof(string)",
                                                    "n_columns": 1,
                                                    "pack": false,
                                                    "xtype": "ListStore",
                                                    "|xns": "Gtk"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "id": "ContextMenu",
                            "pack": false,
                            "xtype": "Menu",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "listeners": {
                                        "activate": "  ( )  =>{\n  \n    var s = _this.view.el.get_selection();\n    Gtk.TreeIter iter;\n    Gtk.TreeModel model;\n    s.get_selected (out  model, out  iter);\n    _this.startEditingKey(model.get_path(iter));\n}"
                                    },
                                    "label": "Edit",
                                    "pack": "append",
                                    "xtype": "MenuItem",
                                    "|xns": "Gtk"
                                },
                                {
                                    "pack": "append",
                                    "xtype": "SeparatorMenuItem",
                                    "|xns": "Gtk"
                                },
                                {
                                    "listeners": {
                                        "activate": "  ( )  =>{\n\t_this.deleteSelected();\n}"
                                    },
                                    "label": "Delete",
                                    "pack": "append",
                                    "xtype": "MenuItem",
                                    "|xns": "Gtk"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],
    "permname": "",
    "modOrder": ""
}