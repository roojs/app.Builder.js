{
    "id": "file-gtk-14",
    "name": "WindowAddProp",
    "parent": "",
    "title": false,
    "path": "/home/alan/gitlive/app.Builder.js/Builder4/WindowAddProp.bjs",
    "items": [
        {
            "activeElement": false,
            "id": "MidPropTree",
            "pack": "pack_end,false,true,0",
            "xtype": "ScrolledWindow",
            "|init": "function() {\n    XObject.prototype.init.call(this);\n       XObject.prototype.init.call(this); \n    this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)\n    this.el.set_size_request ( 150, -1 );\n    this.shown = true;\n}\n",
            "|shadow_type": "Gtk.ShadowType.IN",
            "|xns": "Gtk",
            "items": [
                {
                    "listeners": {
                        "cursor_changed": "function (self) {\n       var iter = new Gtk.TreeIter();\n                        \n                        //console.log('changed');\n        var m = this.get('model');\n\tif (!this.selection){\n\t\tthis.selection = this.el.get_selection();\n\t}\n\n        var s = this.selection;\n        if (!s.get_selected(m.el, iter)) {\n\t\treturn; \n\t}\n        var tp = m.el.get_path(iter).to_string();\n        \n        \n        // var val = \"\";\n        \n        var key = m.getValue(tp, 0);\n        \n        var type = m.getValue(tp, 1);\n        var skel = m.getValue(tp, 3);\n        var etype = m.getValue(tp, 5);\n        \n        \n        this.get('/MidPropTree').hideWin();\n\n        if (type.toLowerCase() == 'function') {\n            \n            if (etype != 'events') {\n                key = '|' + key;\n            }\n            \n            this.get('/LeftPanel.model').add({\n                key :  key, \n                type : type,\n                val  : skel,\n                etype : etype\n            })  \n            return;\n        }\n        // has dot in name, and is boolean???? this does not make sense..\n        //if (type.indexOf('.') > -1 ||  type.toLowerCase() == 'boolean') {\n        //     key = '|' + key;\n       // }\n        \n        this.get('/LeftPanel.model').add( {\n            key : key, \n            type : type,\n            //skel  : skel,\n            etype : etype\n           }) //, \n}"
                    },
                    "pack": "add",
                    "tooltip_column": 2,
                    "xtype": "TreeView",
                    "|enable_tree_lines": true,
                    "|headers_visible": false,
                    "|init": "function() {\n\tXObject.prototype.init.call(this); \n                    \n       var description = new Pango.FontDescription.c_new();\n     description.set_size(8000);\n    this.el.modify_font(description);     \n                    \n    //this.selection = this.el.get_selection();\n    // this.selection.set_mode( Gtk.SelectionMode.SINGLE);\n \n\n    \n  \n    \n}\n",
                    "|xns": "Gtk",
                    "items": [
                        {
                            "id": "model",
                            "pack": "set_model",
                            "xtype": "ListStore",
                            "|getValue": "function(treepath, col)\n{\n    var tp = new Gtk.TreePath.from_string (treepath);\n    var iter = new Gtk.TreeIter();\n    this.el.get_iter (iter, tp);\n    var value = new GObject.Value('');\n    this.el.get_value(iter, col, value);\n    return value.value;\n    \n}",
                            "|init": "function() {\n    XObject.prototype.init.call(this);\n   this.el.set_column_types ( 6, [\n        GObject.TYPE_STRING,  // real key\n         GObject.TYPE_STRING, // real type\n         GObject.TYPE_STRING, // docs ?\n         GObject.TYPE_STRING, // visable desc\n         GObject.TYPE_STRING, // function desc\n         GObject.TYPE_STRING // element type (event|prop)\n        \n    ] );\n}\n",
                            "|showData": "function(type) {\n    this.el.clear();\n            if (!this.get('/MidPropTree').activeElement || !type) {\n                return; // no active element\n            }\n\n            var fullpath = this.get('/LeftTree.model').file.guessName(this.get('/MidPropTree').activeElement);\n            var palete = this.get('/LeftTree').getPaleteProvider();\n            \n             \n            \n            Seed.print('Showing right?');\n            if (!this.get('/MidPropTree').shown) {\n\n                this.get('/Window.left').el.position = this.get('/Window.left').el.position  + 150;\n                this.get('/MidPropTree').el.show();\n                this.get('/MidPropTree').shown = true;\n            }\n            \n            var elementList = palete.getPropertiesFor(fullpath, type).sort(function(a,b) { \n                return a.name >  b.name ? 1 : -1;\n            });\n            print (\"GOT \" + elementList.length + \" items for \" + fullpath + \"|\" + type);\n           // console.dump(elementList);\n           \n            \n            var iter = new Gtk.TreeIter();\n            for(var i =0 ; i < elementList.length; i++) {\n                var p=elementList[i];\n                this.el.append(iter);\n              //  console.log( '<b>' + p.name +'</b> ['+p.type+']');\n                    //GObject.TYPE_STRING,  // real key\n                    // GObject.TYPE_STRING, // real type\n                    // GObject.TYPE_STRING, // docs ?this.el.set_value(iter, 0, p.name);et_value(iter, 0, p.name);\n                    // GObject.TYPE_STRING // func def?\n                    \n                \n                this.el.set_value(iter, 0, p.name);\n                this.el.set_value(iter, 1, p.type);\n                this.el.set_value(iter, 2, '<span size=\"small\"><b>' + p.name +'</b> ['+p.type+']</span>' + \"\\n\" + p.desc);\n                this.el.set_value(iter, 3, p.sig ? p.sig  : '');\n                this.el.set_value(iter, 4, '<span size=\"small\"><b>' + p.name +'</b> ['+p.type+']</span>');\n                this.el.set_value(iter, 5, type);\n                \n            }\n                             \n}\n",
                            "|xns": "Gtk"
                        },
                        {
                            "pack": false,
                            "xtype": "TreeViewColumn",
                            "|init": "function() {\n    this.el = new Gtk.TreeViewColumn();\n    this.parent.el.append_column(this.el);\n    \n    XObject.prototype.init.call(this);\n    this.el.add_attribute(this.items[0].el , 'markup', 4  );\n}\n",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "|xns": "Gtk",
                                    "xtype": "CellRendererText",
                                    "pack": "pack_start,true"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],
    "permname": "",
    "modOrder": ""
}