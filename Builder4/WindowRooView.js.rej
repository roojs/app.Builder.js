--- Builder4/WindowRooView.js
+++ Builder4/WindowRooView.js
@@ -156,236 +156,233 @@
             id : "inspectorcontainer",
             shadow_type : Gtk.ShadowType.IN,
             xtype : "ScrolledWindow",
-            xns : Gtk,
-            items : [
-            	{
-                    renderedData : "\"\"",
-                    id : "view",
-                    refreshRequired : false,
-                    redraws : 0,
-                    xtype : "WebView",
-                    inspector : "",
-                    redraws : 0,
-                    runRefresh : () 
-                    {
-                        // this is run every 2 seconds from the init..
-                    
-                      
-                        
-                        if (!this.refreshRequired) {
-                           // print("no refresh required");
-                            return;
-                        }
-                    
-                        if (this.lastRedraw != null) {
-                           // do not redraw if last redraw was less that 5 seconds ago.
-                           if ((int64)(new DateTime.now_local()).difference(this.lastRedraw) < 5000 ) {
-                                return;
-                            }
-                        }
-                        
-                        if (_this.file == null) {
-                            return;
-                        }
-                        
-                        
-                         this.refreshRequired = false;
-                       //  print("HTML RENDERING");
-                         
-                         
-                         //this.get('/BottomPane').el.show();
-                         //this.get('/BottomPane').el.set_current_page(2);// webkit inspector
-                        _this.file.webkit_page_id  = this.el.get_page_id();
-                        
-                        var js = _this.file.toSourcePreview();
-                    
-                        if (js.length < 1) {
-                            print("no data");
-                            return;
-                        }
-                    //    var  data = js[0];
-                        this.redraws++;
-                      
-                        var project = _this.file.project;  
+            xns : Gtk
+        },
+    	{
+            renderedData : "\"\"",
+            id : "view",
+            refreshRequired : false,
+            redraws : 0,
+            xtype : "WebView",
+            inspector : "",
+            redraws : 0,
+            runRefresh : () 
+            {
+                // this is run every 2 seconds from the init..
+            
+              
+                
+                if (!this.refreshRequired) {
+                   // print("no refresh required");
+                    return;
+                }
+            
+                if (this.lastRedraw != null) {
+                   // do not redraw if last redraw was less that 5 seconds ago.
+                   if ((int64)(new DateTime.now_local()).difference(this.lastRedraw) < 5000 ) {
+                        return;
+                    }
+                }
+                
+                if (_this.file == null) {
+                    return;
+                }
+                
+                
+                 this.refreshRequired = false;
+               //  print("HTML RENDERING");
+                 
+                 
+                 //this.get('/BottomPane').el.show();
+                 //this.get('/BottomPane').el.set_current_page(2);// webkit inspector
+                _this.file.webkit_page_id  = this.el.get_page_id();
+                
+                var js = _this.file.toSourcePreview();
+            
+                if (js.length < 1) {
+                    print("no data");
+                    return;
+                }
+            //    var  data = js[0];
+                this.redraws++;
+              
+                var project = _this.file.project;  
+            
+                 //print (project.fn);
+                 // set it to non-empty.
+                 
+            //     runhtml = runhtml.length ?  runhtml : '<script type="text/javascript"></script>'; 
+            
+            
+            //   this.runhtml  = this.runhtml || '';
+             
+             
+                // then we need to reload the browser using
+                // load_html_string..
+            
+                // then trigger a redraw once it's loaded..
+                this.pendingRedraw = true;
+            
+                var runhtml = "<script type=\"text/javascript\">\n" ;
+                string builderhtml;
+                
+                
+                GLib.FileUtils.get_contents(Builder4.Application.configDirectory() + "/resources/roo.builder.js", out builderhtml);
+            
+                runhtml += builderhtml + "\n";
+                runhtml += "</script>\n" ;
+            
+                // fix to make sure they are the same..
+                this.runhtml = project.runhtml;
+                // need to modify paths
+            
+                string inhtml;
+                var base_template = _this.file.project.base_template;
+                
+                if (base_template.length > 0 && !FileUtils.test(
+                    Builder4.Application.configDirectory() + "/resources/" +  base_template, FileTest.EXISTS)  
+                    ) {
+                       print("invalid base_template name - using default:  %s\n", base_template);
+                       base_template = "";
+                
+                }
+                
+                GLib.FileUtils.get_contents(
+                    Builder4.Application.configDirectory() + "/resources/" + 
+                        (base_template.length > 0 ? base_template :  "roo.builder.html")
+                        , out inhtml);
+                
+                
+                this.renderedData = js;
+            
+            
+                string js_src = js + "\n" +
+            	"Roo.onReady(function() {\n" +
+            	"if (" + _this.file.name +".show) " +  _this.file.name +".show({});\n" +
+            	"Roo.XComponent.build();\n" +
+            	"});\n";
+            	
+                print("render js: " + js);
+                //if (!this.ready) {
+              //      console.log('not loaded yet');
+                //}
+                this.lastRedraw = new DateTime.now_local();
+            
+                    var html = inhtml.replace("</head>", runhtml + this.runhtml + 
                     
-                         //print (project.fn);
-                         // set it to non-empty.
-                         
-                    //     runhtml = runhtml.length ?  runhtml : '<script type="text/javascript"></script>'; 
+                            "<script type=\"text/javascript\">\n" +
+                            js_src + "\n" + 
+                            "</script>" + 
+                                    
+                    "</head>");
+                    print("LOAD HTML " + html);
                     
+                     var rootURL = _this.file.project.rootURL;
+               
                     
-                    //   this.runhtml  = this.runhtml || '';
-                     
-                     
-                        // then we need to reload the browser using
-                        // load_html_string..
                     
-                        // then trigger a redraw once it's loaded..
-                        this.pendingRedraw = true;
+                    this.el.load_html( html , 
+                        //fixme - should be a config option!
+                        (rootURL.length > 0 ? rootURL : "http://localhost/app.Builder/")
+                    );
                     
-                        var runhtml = "<script type=\"text/javascript\">\n" ;
-                        string builderhtml;
-                        
-                        
-                        GLib.FileUtils.get_contents(Builder4.Application.configDirectory() + "/resources/roo.builder.js", out builderhtml);
+                // force the inspector...        
+                    this.el.get_inspector().show();
+                    this.el.get_inspector().open_window();
                     
-                        runhtml += builderhtml + "\n";
-                        runhtml += "</script>\n" ;
-                    
-                        // fix to make sure they are the same..
-                        this.runhtml = project.runhtml;
-                        // need to modify paths
-                    
-                        string inhtml;
-                        var base_template = _this.file.project.base_template;
-                        
-                        if (base_template.length > 0 && !FileUtils.test(
-                            Builder4.Application.configDirectory() + "/resources/" +  base_template, FileTest.EXISTS)  
-                            ) {
-                               print("invalid base_template name - using default:  %s\n", base_template);
-                               base_template = "";
-                        
-                        }
-                        
-                        GLib.FileUtils.get_contents(
-                            Builder4.Application.configDirectory() + "/resources/" + 
-                                (base_template.length > 0 ? base_template :  "roo.builder.html")
-                                , out inhtml);
-                        
-                        
-                        this.renderedData = js;
-                    
-                    
-                        string js_src = js + "\n" +
-                    	"Roo.onReady(function() {\n" +
-                    	"if (" + _this.file.name +".show) " +  _this.file.name +".show({});\n" +
-                    	"Roo.XComponent.build();\n" +
-                    	"});\n";
-                    	
-                        print("render js: " + js);
-                        //if (!this.ready) {
-                      //      console.log('not loaded yet');
-                        //}
-                        this.lastRedraw = new DateTime.now_local();
-                    
-                            var html = inhtml.replace("</head>", runhtml + this.runhtml + 
-                            
-                                    "<script type=\"text/javascript\">\n" +
-                                    js_src + "\n" + 
-                                    "</script>" + 
-                                            
-                            "</head>");
-                            print("LOAD HTML " + html);
-                            
-                             var rootURL = _this.file.project.rootURL;
-                       
-                            
-                            
-                            this.el.load_html( html , 
-                                //fixme - should be a config option!
-                                (rootURL.length > 0 ? rootURL : "http://localhost/app.Builder/")
-                            );
-                            
-                        // force the inspector...        
-                            this.el.get_inspector().show();
-                            this.el.get_inspector().open_window();
-                            
-                            // - no need for this, the builder javascript will call it when build is complete
-                            //GLib.Timeout.add_seconds(1, () => {
-                            //    this.el.run_javascript("Builder.saveHTML()",null);
-                            //    return false;
-                            //});
-                    //     print( "before render" +    this.lastRedraw);
-                    //    print( "after render" +    (new Date()));
-                        
-                    },
-                    xns : WebKit,
-                    lastRedraw : "null",
-                    runhtml : "\"\"",
-                    pendingRedraw : false,
-                    renderJS : (bool force) {
-                    
-                        // this is the public redraw call..
-                        // we refresh in a loop privately..
-                        var autodraw = _this.AutoRedraw.el.active;
-                        if (!autodraw && !force) {
-                            print("Skipping redraw - no force, and autodraw off");
-                            return;
-                        }
-                        this.refreshRequired  = true;
-                    },
-                    listeners : {
-                    	script_dialog : (dialog) => {
-                    	        var msg = dialog.get_message();
-                    	        if (msg.length < 4) {
-                    	           return false;
-                    	        }
-                    	        if (msg.substring(0,4) != "IPC:") {
-                    	            return false;
-                    	        }
-                    	        var ar = msg.split(":", 3);
-                    	       if (ar.length < 3) {
-                    	           return false;
-                    	       }
-                    	       switch(ar[1]) {
-                    	           case "SAVEHTML":
-                    	               _this.file.saveHTML(ar[2]);
-                    	               return true;
-                    	           default:
-                    	               return false;
-                    	       }
-                    	       
-                    	   },
-                    	show : ( ) => {
-                    	       this.inspector = this.el.get_inspector();
-                    	       this.inspector.ref();
-                    	       this.inspector.open_window.connect(() => {
-                    	            this.inspector = this.el.get_inspector();
-                    	           print("inspector attach\n");
-                    	           var wv = this.inspector.get_web_view();
-                    	           if (wv != null) {
-                    	               print("got inspector web view\n");
-                    	               _this.inspectorcontainer.el.add(wv);
-                    	               wv.show();
-                    	           } else {
-                    	               print("no web view yet\n");
-                    	           }
-                    	           return true;
-                    	          
-                    	       });
-                    	      this.inspector.closed.connect(() => {
-                    	           
-                    	           this.inspector.show();
-                    	          
-                    	       }); 
-                    	       this.inspector.show();
-                    	   },
-                    	drag_drop : ( ctx, x, y,time, ud) => {
-                    	       return false;
-                    	       /*
-                    	   	print("TARGET: drag-drop");
-                    	           var is_valid_drop_site = true;
-                    	           
-                    	            
-                    	           Gtk.drag_get_data
-                    	           (
-                    	                   w,         // will receive 'drag-data-received' signal 
-                    	                   ctx,        /* represents the current state of the DnD 
-                    	                   this.get('/Window').atoms["STRING"],    /* the target type we want 
-                    	                   time            /* time stamp 
-                    	           );
-                    	                           
-                    	                           
-                    	                           /* No target offered by source => error 
-                    	                          
-                    	   
-                    	   	return  is_valid_drop_site;
-                    	   	*/
-                    	   }
-                    }
+                    // - no need for this, the builder javascript will call it when build is complete
+                    //GLib.Timeout.add_seconds(1, () => {
+                    //    this.el.run_javascript("Builder.saveHTML()",null);
+                    //    return false;
+                    //});
+            //     print( "before render" +    this.lastRedraw);
+            //    print( "after render" +    (new Date()));
+                
+            },
+            xns : WebKit,
+            lastRedraw : "null",
+            runhtml : "\"\"",
+            pendingRedraw : false,
+            renderJS : (bool force) {
+            
+                // this is the public redraw call..
+                // we refresh in a loop privately..
+                var autodraw = _this.AutoRedraw.el.active;
+                if (!autodraw && !force) {
+                    print("Skipping redraw - no force, and autodraw off");
+                    return;
                 }
-            ]
-
+                this.refreshRequired  = true;
+            },
+            listeners : {
+            	script_dialog : (dialog) => {
+            	        var msg = dialog.get_message();
+            	        if (msg.length < 4) {
+            	           return false;
+            	        }
+            	        if (msg.substring(0,4) != "IPC:") {
+            	            return false;
+            	        }
+            	        var ar = msg.split(":", 3);
+            	       if (ar.length < 3) {
+            	           return false;
+            	       }
+            	       switch(ar[1]) {
+            	           case "SAVEHTML":
+            	               _this.file.saveHTML(ar[2]);
+            	               return true;
+            	           default:
+            	               return false;
+            	       }
+            	       
+            	   },
+            	show : ( ) => {
+            	       this.inspector = this.el.get_inspector();
+            	       this.inspector.ref();
+            	       this.inspector.open_window.connect(() => {
+            	            this.inspector = this.el.get_inspector();
+            	           print("inspector attach\n");
+            	           var wv = this.inspector.get_web_view();
+            	           if (wv != null) {
+            	               print("got inspector web view\n");
+            	               _this.inspectorcontainer.el.add(wv);
+            	               wv.show();
+            	           } else {
+            	               print("no web view yet\n");
+            	           }
+            	           return true;
+            	          
+            	       });
+            	      this.inspector.closed.connect(() => {
+            	           
+            	           this.inspector.show();
+            	          
+            	       }); 
+            	       this.inspector.show();
+            	   },
+            	drag_drop : ( ctx, x, y,time, ud) => {
+            	       return false;
+            	       /*
+            	   	print("TARGET: drag-drop");
+            	           var is_valid_drop_site = true;
+            	           
+            	            
+            	           Gtk.drag_get_data
+            	           (
+            	                   w,         // will receive 'drag-data-received' signal 
+            	                   ctx,        /* represents the current state of the DnD 
+            	                   this.get('/Window').atoms["STRING"],    /* the target type we want 
+            	                   time            /* time stamp 
+            	           );
+            	                           
+            	                           
+            	                           /* No target offered by source => error 
+            	                          
+            	   
+            	   	return  is_valid_drop_site;
+            	   	*/
+            	   }
+            }
         }
     ]
 
