{"id":"file-gtk-7","name":"builder.bjs","parent":"","title":false,"path":"/home/alan/gitlive/app.Builder.js/Sample/builder.bjs","items":[{"|xns":"Gtk","xtype":"Window","|type":"Gtk.WindowType.TOPLEVEL","title":"Application Builder","border_width":0,"|init":"function() {\n     this.atoms = {\n           \"STRING\" : Gdk.atom_intern(\"STRING\")\n\t};\n    XObject.prototype.init.call(this);\n    this.el.show_all();\n    \n    //this.get('MidPropTree').hideWin();\n    //this.get('RightPalete').hide();\n\n              \n}\n","default_width":800,"default_height":500,"id":"Window","listeners":{"delete_event":"function (self, event) {\n    return false;\n}","destroy":"function (self) {\n   Gtk.main_quit();\n}"},"items":[{"|xns":"Gtk","xtype":"VBox","id":"w-vbox","items":[{"|xns":"Gtk","xtype":"MenuBar","pack":"pack_start,false,false","items":[{"|xns":"Gtk","xtype":"MenuItem","label":"File","items":[{"|xns":"Gtk","xtype":"Menu","pack":"set_submenu","items":[{"|xns":"Gtk","xtype":"MenuItem","label":"New Project","listeners":{"activate":"function (self) {\n\tthis.get('/EditProject').show({\n\t    success : function(pr) {\n\t\t     this.get('/LeftProjectTree').get('combo').setValue(pr.fn);\n\t    }\n\t});\n}"}},{"|xns":"Gtk","xtype":"MenuItem","label":"New File","listeners":{"activate":"function (self) {\n \tvar fn = this.get('/LeftProjectTree.combo').getValue();\n        if (!fn) {\n            this.get('/LeftProjectTree').showNoProjectSelected();\n            return true;\n        }\n        var pm = imports.Builder.Provider.ProjectManager.ProjectManager;\n        this.get('/DialogNewComponent').show({\n            project : pm.getByFn(fn)\n        });\n}"}},{"|xns":"Gtk","xtype":"SeparatorMenuItem"},{"|xns":"Gtk","xtype":"MenuItem","label":"Add Directory to Project","listeners":{"activate":"function (self) {\n\tvar fn = this.get('/LeftProjectTree').get('combo').getValue();\n        if (!fn) {\n            this.get('/LeftProjectTree').showNoProjectSelected();\n            return true;\n        }\n        \n        \n        var dc = new Gtk.FileChooserDialog({\n            action : Gtk.FileChooserAction.SELECT_FOLDER,\n            modal: true,\n            'select-multiple' : false,\n            \"show-hidden\" : true,\n        });\n        dc.add_button(\"Add To Project\", Gtk.ResponseType.ACCEPT );\n        dc.add_button(\"Cancel\",Gtk.ResponseType.CANCEL);\n        \n        if (dc.run() != Gtk.ResponseType.ACCEPT) {\n            \n            dc.destroy();\n            return;\n        }\n            \n        //Seed.print(dc.get_filename());\n        var pm  = imports.Builder.Provider.ProjectManager.ProjectManager;\n        pm.getByFn(fn).add(dc.get_filename(), 'dir');\n        dc.destroy();\n}"}}]}]},{"|xns":"Gtk","xtype":"MenuItem","label":"Help"}]},{"|xns":"Gtk","xtype":"HPaned","id":"left","position":400,"items":[{"|xns":"Gtk","xtype":"HBox","items":[{"|xns":"Gtk","xtype":"VPaned","position":300,"items":[{"|xns":"Gtk","xtype":"VBox","id":"LeftTopPanel","items":[{"|xns":"Gtk","xtype":"Expander","label":"Select Project","id":"expander","pack":"pack_start,false,true","|init":"function() {\n    XObject.prototype.init.call(this);\n   this.el.add_events (Gdk.EventMask.BUTTON_MOTION_MASK );\n}\n","listeners":{"activate":"function (self) {\n\tvar nb = this.get('/LeftTopPanel.notebook');\n\tif (this.el.expanded) {\n\t    // now expanded..\n            \n\t    var pm  = imports.Builder.Provider.ProjectManager.ProjectManager;\n\t    \n\t   \n\t    var model = this.get('/LeftProjectTree.combomodel');\n\t    \n\t    model.loadData(ProjectManager.projects);\n\t     \n\t    \n\t    nb.el.set_current_page(1);\n\t    //pm.on('changed', function() {\n\t\t//console.log(\"CAUGHT project manager change\");\n\t    //    _combo.model.loadData(pm.projects);\n\t    //}\n\t    return;\n\t}\n\tnb.el.set_current_page(0);\n}","enter_notify_event":"function (self, event) {\n    this.el.expanded = !this.el.expanded;\n    this.listeners.activate.call(this);\n    return false;\n}"}},{"|xns":"Gtk","xtype":"Notebook","id":"notebook","|show_border":false,"|show_tabs":true,"pack":"pack_start,true,true","|init":"function() {\n    XObject.prototype.init.call(this);\n\tthis.el.set_current_page(0);\n\n}\n","items":[{"|xns":"Gtk","xtype":"ScrolledWindow","id":"LeftPanel","pack":"add","|shadow_type":"Gtk.ShadowType.IN","editing":false,"|init":"function() {\n    XObject.prototype.init.call(this);\n   this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n}\n","items":[{"|xns":"Gtk","xtype":"TreeView","id":"view","tooltip_column":1,"|headers_visible":false,"|enable_tree_lines":true,"|init":"function() {\n     XObject.prototype.init.call(this); \n                       \n                    this.selection = this.el.get_selection();\n                    this.selection.set_mode( Gtk.SelectionMode.SINGLE);\n                 \n                    \n                    var description = new Pango.FontDescription.c_new();\n                    description.set_size(8000);\n                    this.el.modify_font(description);\n}\n","listeners":{"button_press_event":"function (self, ev) {\n    \n                \n                var res = { }; \n                if (!this.el.get_path_at_pos(ev.button.x,ev.button.y, res)) {\n                    return false; //not on a element.\n                }\n                \n                \n                if (ev.type != Gdk.EventType.BUTTON_PRESS  || ev.button.button != 3) {\n                    \n                    if (res.column.title != 'value') {\n                        return false; // ignore..\n                    }\n                    if (  this.get('/LeftPanel').editing) {\n                        return false;\n                    }\n                    var renderer = this.get('/LeftPanel').editableColumn.items[0].el; // set has_entry..\n                    this.get('/LeftPanel').editableColumn.items[0].el.stop_editing();\n                    var type = this.get('/LeftPanel.model').getType(res.path.to_string());\n                    \n                     \n\n                    var provider = this.get('/LeftTree').getPaleteProvider();\n                    \n                    var opts = provider.findOptions(type);\n                    \n                    if (opts === false) {\n                         this.get('/LeftPanel').editableColumn.setOptions([]);\n                        renderer.has_entry = true;\n                    } else {\n                        LeftPanel.editableColumn.setOptions(opts);\n                        renderer.has_entry = false;\n                    }\n                    \n                    \n                   //Seed.print(\"click\" + ev.type);\n                    //console.dump(res);\n                    return false;\n                }\n              \n            \n               \n                if (res.column.title == 'value') {\n                    return false;\n                }\n                //if (! this.get('/LeftPanelPopup')LeftPanelPopup.el) LeftPanelPopup.init();\n                this.get('/LeftPanelPopup').el.set_screen(Gdk.Screen.get_default());\n                this.get('/LeftPanelPopup').el.show_all();\n                this.get('/LeftPanelPopup').el.popup(null, null, null, null, 3, ev.button.time);\n                //Seed.print(\"click:\" + res.column.title);\n                \n                \n                return false;\n}"},"items":[{"|xns":"Gtk","xtype":"TreeStore","pack":"set_model","id":"model","|init":"function() {\n    XObject.prototype.init.call(this);\nthis.el.set_column_types ( 5, [\n                                GObject.TYPE_STRING,  // 0 real key\n                                GObject.TYPE_STRING, // 1 real value \n                                 GObject.TYPE_STRING,  // 2 visable key\n                                 GObject.TYPE_STRING, // 3 visable value\n                                 GObject.TYPE_STRING, // 4 need to store type of!!!\n                              \n                            ]);\n}\n","|toShort":"function(str) {\n    var a = typeof(str) == 'string' ? str.split(\"\\n\") : [];\n        return a.length > 1 ? a[0] + '....' : '' + str;\n}\n","|load":"function(ar) {\n     this.el.clear();\n                            \n            this.get('/RightEditor').el.hide();\n            if (ar === false) {\n                return ;\n            }\n            var ret = {}; \n            \n\n            var provider = this.get('/LeftTree').getPaleteProvider();\n            \n            // sort!!!?\n            var iter = new Gtk.TreeIter();\n            for (var i in ar) {\n                if (typeof(ar[i]) == 'object') {\n                    continue;\n                }\n                \n                var type = provider.findType(ar, i, ar[i]);\n                \n                this.el.append(iter);\n                var p = this.el.get_path(iter).to_string();\n                ret[i] = p;\n                this.el.set_value(iter, 0, i);\n                this.el.set_value(iter, 1, '' + ar[i]);\n                this.el.set_value(iter, 2, i);\n                this.el.set_value(iter, 3, this.toShort(ar[i]));\n                this.el.set_value(iter, 4, type);\n            }\n            ar.listeners = ar.listeners || {};\n            for (var i in ar.listeners ) {\n                this.el.append(iter);\n                var p = this.el.get_path(iter).to_string();\n                ret['!' + i] = p;\n                \n                this.el.set_value(iter, 0, '!'+  i  );\n                this.el.set_value(iter, 1, '' + ar.listeners[i]);\n                this.el.set_value(iter, 2, '<b>'+ i + '</b>');\n                \n                this.el.set_value(iter, 3, '' + this.toShort(ar.listeners[i]));\n                this.el.set_value(iter, 4, 'function');\n            }\n            return ret;\n}\n","|add":"function(info) {\n      // info includes key, val, skel, etype..\n                             console.dump(info);\n            type = info.type.toLowerCase();\n            var data = this.toJS();\n            \n            if (info.etype == 'events') {\n                data.listeners = data.listeners || { };\n                if (typeof(data.listeners[info.key]) != 'undefined') {\n                    return; //already set!\n                }\n            } else {\n                if (typeof(data[info.key]) != 'undefined') {\n                    return;\n                }\n            }\n            \n            if (typeof(info.val) == 'undefined') {\n                    \n                info.val = '';\n                if (info.type == 'boolean') {\n                    info.val = true;\n                }\n                if (type == 'number') {\n                    info.val = 0;\n                }\n                // utf8 == string..\n                \n                \n            }\n            var k = info.key;\n            if (info.etype == 'events') {\n             \n                data.listeners[info.key] = info.val;\n                k = '!' + info.key;\n            } else {\n                data[info.key] = info.val;\n            }\n            \n            \n            var map = this.load(data);\n            \n            // flag it as changed to the interface..\n\n            this.get('/LeftTree.model').changed(data, true); \n            \n            \n            this.startEditing(map[k]);\n             \n            /*\n            LeftPanel.get('view').el.row_activated(\n                new Gtk.TreePath.from_string(map[k]), \n                LeftPanel.editableColumn.el\n            );\n            */\n}\n","|startEditing":"function(path,col) {\n/**\n* start editing path (or selected if not set..)\n* @param {String|false} path  (optional) treepath to edit - selected tree gets\n*     edited by default.\n* @param {Number} 0 or 1 (optional)- column to edit. \n*/\n     var tp;\n            if (typeof(path) == 'string') {\n                tp = new Gtk.TreePath.from_string(path);\n            } else {\n                var iter = new Gtk.TreeIter();\n                var s = this.get('/LeftPanel.view').selection;\n                s.get_selected(this.el, iter);\n                tp = this.el.get_path(iter);\n                path = tp.to_string();\n            }\n            \n           \n            // which colum is to be edited..\n            var colObj = false;\n            if (typeof(col) == 'undefined') {\n                var k = this.getValue(path, 0);\n                colObj = (!k.length || k == '|') ? \n                    this.get('/LeftPanel').propertyColumn : this.get('/LeftPanel').editableColumn;\n            } else {\n                colObj = col ? this.get('/LeftPanel').editableColumn : this.get('/LeftPanel').propertyColumn;\n            }\n            \n            // make sure the pulldown is set correctly..\n            // not really needed for second col...\n\n            var provider = this.get('/LeftTree').getPaleteProvider();\n           \n            var type = this.get('/LeftPanel.model').getType(path);\n            var opts = provider.findOptions(type);\n            var renderer = this.get('/LeftPanel').editableColumn.items[0].el;\n            \n            if (opts === false) {\n                this.get('/LeftPanel').editableColumn.setOptions([]);\n                renderer.has_entry = true; /// probably does not have any effect.\n            } else {\n                this.get('/LeftPanel').editableColumn.setOptions(opts);\n                renderer.has_entry = false;\n            }\n            \n            var _this=this;\n            // iter now has row...\n            GLib.timeout_add(0, 100, function() {\n                \n                colObj.items[0].el.editable = true; // esp. need for col 0..\n                _this.get('/LeftPanel.view').el.set_cursor_on_cell(\n                    tp,\n                    colObj.el,\n                    colObj.items[0].el,\n                    true\n                );\n            });\n            \n}\n","|deleteSelected":"function() {\n     var data = this.toJS();\n    var iter = new Gtk.TreeIter();\n    var s = this.get('/LeftPanel.view').selection;\n    s.get_selected(this.el, iter);\n         \n       \n    var gval = new GObject.Value('');\n   this.get('/LeftPanel.model').el.get_value(iter, 0 ,gval);\n    \n    var val = gval.value;\n    if (val[0] == '!') {\n        // listener..\n        if (!data.listeners || typeof(data.listeners[  val.substring(1)]) == 'undefined') {\n            return;\n        }\n        delete data.listeners[  val.substring(1)];\n        if (!XObject.keys(data.listeners).length) {\n            delete data.listeners;\n        }\n        \n    } else {\n        if (typeof(data[val]) == 'undefined') {\n            return;\n        }\n        delete data[val];\n    }\n    \n    \n    this.load(data);\n    this.get('/LeftTree.model').changed(data, true);\n    \n}\n","activePath":false,"|changed":"function(str, doRefresh) {\n    if (!this.activePath) {\n        return;\n    }\n    var iter = new Gtk.TreeIter();\n    this.el.get_iter(iter, new Gtk.TreePath.from_string(this.activePath));\n    \n    this.el.set_value(iter, 1, '' +str);\n    this.el.set_value(iter, 3, '' + this.toShort(str));\n    // update the tree...\n    var LeftTree        = imports.Builder.LeftTree.LeftTree;\n    this.get('/LeftTree.model').changed(this.toJS(), doRefresh); \n}\n","|toJS":"function() {\n     var iter = new Gtk.TreeIter();\n    this.get('/LeftPanel.model').el.get_iter_first(iter);\n    var ar = {};\n       \n    while (true) {\n        \n        var k = this.getValue(this.el.get_path(iter).to_string(), 0);\n       // Seed.print(k);\n        if (k[0] == '!') {\n            ar.listeners = ar.listeners || {};\n            ar.listeners[  k.substring(1)] = this.getValue(this.el.get_path(iter).to_string(), 1);\n            \n        } else {\n            ar[ k ] = this.getValue(this.el.get_path(iter).to_string(), 1);\n        }\n        \n        if (! this.get('/LeftPanel.model').el.iter_next(iter)) {\n            break;\n        }\n    }\n    \n    \n    //print(JSON.stringify(ar));\n    return ar;\n    // convert the l\n}\n","|getType":"function(treepath) {\n     return this.getValue(treepath_str, 4);\n}\n","|getValue":"function(treepath_str, col) {\n      var iter = new Gtk.TreeIter();\n    this.el.get_iter(iter, new Gtk.TreePath.from_string(treepath_str));\n    \n    var gval = new GObject.Value('');\n    this.get('/LeftPanel.model').el.get_value(iter, col ,gval);\n    var val = '' + gval.value;\n    if (col != 1) {\n        return val;\n    }\n    var type = this.getType(this.el.get_path(iter).to_string());\n    //print(\"TYPE: \" +type + \" -  val:\" + val);\n    switch(type.toLowerCase()) {\n        case 'number':\n        case 'uint':\n        case 'int':\n            return parseFloat(val); // Nan ?? invalid!!?\n        case 'boolean':\n            return val == 'true' ? true : false;\n        default: \n            return val;\n    }\n                            \n}\n","|editSelected":"function(e) {\n    print(\"EDIT SELECTED?\");\n            var iter = new Gtk.TreeIter();\n            var s = this.get('/LeftPanel.view').selection;\n            s.get_selected(this.get('/LeftPanel.model').el, iter);\n            var m = this.get('/LeftPanel.model')\n           \n            var gval = new GObject.Value('');\n            this.el.get_value(iter, 0 ,gval);\n            var val = '' + gval.value;\n            \n            gval = new GObject.Value('');\n            this.el.get_value(iter, 1 ,gval);\n            var rval = gval.value;\n            var activePath = this.el.get_path(iter).to_string(); \n            this.activePath = activePath ;\n            // was activeIter...\n            //  not listener...\n            \n            var showEditor = false;\n            \n            if (val[0] == '!') {\n                showEditor = true;\n            }\n            if (val[0] == '|') {\n                if (rval.match(/function/g) || rval.match(/\\n/g)) {\n                    showEditor = true;\n                }\n            }\n            \n            if (showEditor) {\n                var _this = this;\n                this.activePath = false;\n                GLib.timeout_add(0, 1, function() {\n                    //   Gdk.threads_enter();\n                    _this.get('/RightEditor').el.show();\n\t\t   _this.get('/RightEditor.view').load( rval );\n                    \n                    e.editing_done();\n                    e.remove_widget();\n                    _this.activePath = activePath ;\n                    \n             //       Gdk.threads_leave();\n                    return false;\n                });\n                return;\n            }\n             \n            this.get('/RightEditor').el.hide();\n\n            //var type = this.getValue(this.el.get_path(iter).to_string(),4);\n            \n            \n}\n"},{"|xns":"Gtk","xtype":"TreeViewColumn","pack":"append_column","|init":"function() {\n    XObject.prototype.init.call(this);\n\n    this.el.add_attribute(this.items[0].el , 'markup', 2 );\n    this.get('/LeftPanel').propertyColumn = this;\n}\n","items":[{"|xns":"Gtk","xtype":"CellRendererText","pack":"pack_start","listeners":{"editing_started":"function (self, editable, path) {\n\n        this.get('/LeftPanel.model').activePath  = path;\n\n}","edited":"function (self, object, p0) {\n\tvar model = this.get('/LeftPanel.model');\n        var path = model.activePath;\n        var iter = new Gtk.TreeIter();\n        model.el.get_iter(iter, new Gtk.TreePath.from_string(path));\n        model.el.set_value(iter, 0, p0);\n        model.el.set_value(iter, 2, p0);\n        \n\tmodel.activePath = false;\n\n\tthis.get('/LeftTree.model').changed(model.toJS(), true); \n        this.el.editable = false;\n}"}}]},{"|xns":"Gtk","xtype":"TreeViewColumn","pack":"append_column","|init":"function() {\n    XObject.prototype.init.call(this);\n\tthis.el.add_attribute(this.items[0].el , 'text', 3 );\n\tthis.el.add_attribute(this.items[0].el , 'sensitive', 3 );\n\tthis.el.add_attribute(this.items[0].el , 'editable', 3 );\n                           // this.el.set_cell_data_func(cell, age_cell_data_func, NULL, NULL);\n\n \tthis.get('/LeftPanel').editableColumn= this;\n}\n","|setOptions":"function(ar) {\n       var m = this.items[0].el.model;\n            m.clear();\n            var iter = new Gtk.TreeIter();\n            ar.forEach(function(i) {\n                   // sort!!!?\n                m.append(iter);\n                m.set_value(iter, 0, i);\n            });\n            \n}\n","items":[{"|xns":"Gtk","xtype":"CellRendererCombo","pack":"clear_attributes","|editable":true,"|has_entry":true,"text_column":0,"listeners":{"edited":"function (self, object, p0) {\n \tthis.get('/LeftPanel').editing = false;\n\tprint(\"EDITED? p:\" + p + \" t:\" + p0);\n        this.get('/LeftPanel.model').changed(p0, true);\n        this.get('/LeftPanel.model').activePath = false;\n}","editing_started":"function (self, editable, path) {\n   this.get('/LeftPanel').editing  = true;\n\t//  console.log('editing started');\n       // r.has_entry = false;\n   this.get('/LeftPanel.model').editSelected(editable);\n}"},"items":[{"|xns":"Gtk","xtype":"ListStore","*prop":"model","pack":false,"|init":"function() {\n   XObject.prototype.init.call(this);\n   this.el.set_column_types ( 1, [\n   \t\tGObject.TYPE_STRING,  // 0 real key\n   ]);\n}\n"}]}]}]}]},{"|xns":"Gtk","xtype":"ScrolledWindow","pack":"add","|shadow_type":"Gtk.ShadowType.IN","|init":"function() {\n    XObject.prototype.init.call(this);\n    this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)\n}\n","id":"LeftTree","|getPaleteProvider":"function() {\n    var model = this.get('model');\n    var pm = imports.Builder.Provider.ProjectManager.ProjectManager;\n    return pm.getPalete(model.file.getType());\n}\n","|renderView":"function() {\n   \t var model = this.get('model');\n\tprint(\"RENDER VIEW?\" + model.file.getType());\n\tswitch( model.file.getType()) {\n\t\tcase 'Roo':\n\t\t    this.get('/RightBrowser.view').renderJS(model.toJS(false,true)[0]);\n\t\tcase 'Gtk':\n\t\t    this.get('/RightGtkView').renderJS(model.toJS(false,true)[0]);\n\t}\n}\n","items":[{"|xns":"Gtk","xtype":"TreeView","pack":"add","id":"view","|headers_visible":true,"|enable_tree_lines":true,"tooltip_column":0,"|init":"function() {\n    \tXObject.prototype.init.call(this);\n\tvar description = new Pango.FontDescription.c_new();\n\tdescription.set_size(8000);\n\tthis.el.modify_font(description);\n\n\tthis.selection = this.el.get_selection();\n\tthis.selection.set_mode( Gtk.SelectionMode.SINGLE);\n\tvar _this = this;\n\tthis.selection.signal['changed'].connect(function() {\n\t\t_this.get('/LeftTree.view').listeners.cursor_changed.apply(\n\t\t    _this.get('/LeftTree.view'), [ _this.get('/LeftTree.view'), '']\n\t\t);\n\t});\n\n\tGtk.drag_source_set (\n\t\tthis.el,            /* widget will be drag-able */\n\t\tGdk.ModifierType.BUTTON1_MASK,       /* modifier that will start a drag */\n\t\tnull,            /* lists of target to support */\n\t\t0,              /* size of list */\n\t\tGdk.DragAction.COPY   | Gdk.DragAction.MOVE           /* what to do with data after dropped */\n\t);\n\tvar targets = new Gtk.TargetList();\n\ttargets.add( this.get('/Window').atoms[\"STRING\"], 0, 0);\n\tGtk.drag_source_set_target_list(this.el, targets);\n\n\tGtk.drag_source_add_text_targets(this.el); \n\tGtk.drag_dest_set\n\t(\n\t    this.el,              /* widget that will accept a drop */\n\t    Gtk.DestDefaults.MOTION  | Gtk.DestDefaults.HIGHLIGHT,\n\t    null,            /* lists of target to support */\n\t    0,              /* size of list */\n\t    Gdk.DragAction.COPY   | Gdk.DragAction.MOVE       /* what to do with data after dropped */\n\t);\n\n\tGtk.drag_dest_set_target_list(this.el, targets);\n\tGtk.drag_dest_add_text_targets(this.el);\n}\n","|highlight":"function(treepath_ar) {\n                    if (treepath_ar.length && treepath_ar[0].length ) {\n                this.el.set_drag_dest_row( \n                    new  Gtk.TreePath.from_string( treepath_ar[0] ),  treepath_ar[1]);\n            } else {\n                this.el.set_drag_dest_row(null, Gtk.TreeViewDropPosition.INTO_OR_AFTER);\n            }\n             \n        }","|selectNode":"function(treepath_str) {\n    this.selection.select_path(new  Gtk.TreePath.from_string( treepath_str));\n}\n","listeners":{"button_press_event":"function (self, ev) {\n \tconsole.log(\"button press?\");\n                if (ev.type != Gdk.EventType.BUTTON_PRESS  || ev.button.button != 3) {\n                    print(\"click\" + ev.type);\n                    return false;\n                }\n              \n            \n                var res = {}; \n                this.get('/LeftTree.view').el.get_path_at_pos(ev.button.x,ev.button.y, res);\n                \n                if (!this.get('/LeftTreeMenu').el)  this.get('/LeftTreeMenu').init();\n                \n                this.get('/LeftTreeMenu').el.set_screen(Gdk.Screen.get_default());\n                this.get('/LeftTreeMenu').el.show_all();\n                this.get('/LeftTreeMenu').el.popup(null, null, null, null, 3, ev.button.time);\n                print(\"click:\" + res.path.to_string());\n                return false;\n}","drag_begin":"function (self, drag_context) {\n\tprint('SOURCE: drag-begin');\n         this.targetData = false;\n        // find what is selected in our tree...\n        var iter = new Gtk.TreeIter();\n        var s = this.selection;\n        s.get_selected(this.get('/LeftTree.model').el, iter);\n\n        // set some properties of the tree for use by the dropped element.\n        var value = new GObject.Value('');\n        this.get('/LeftTree.model').el.get_value(iter, 2, value);\n        var data = JSON.parse(value.value);\n        var xname = this.get('/LeftTree.model').file.guessName(data);\n        \n        this.el.dragData = xname;\n        this.el.dropList = this.get('/LeftTree').getPaleteProvider().getDropList(xname);\n        \n\n        // make the drag icon a picture of the node that was selected\n        var path = this.get('/LeftTree.model').el.get_path(iter);\n        this.el.treepath = path.to_string();\n        \n        var pix = this.el.create_row_drag_icon ( path);\n        \n        Gtk.drag_set_icon_pixmap (ctx,\n            pix.get_colormap(),\n            pix,\n            null,\n            -10,\n            -10);\n        \n        return true;\n}","drag_end":"function (self, drag_context) {\n\tSeed.print('LEFT-TREE: drag-end');\n        this.el.dragData = false;\n        this.el.dropList = false;\n        this.targetData = false;\n        this.get('/LeftTree.view').highlight(false);\n        return true;\n}","drag_motion":"function (self, ctx, x, y, time) {\n    console.log(\"LEFT-TREE: drag-motion\");\n                var src = Gtk.drag_get_source_widget(ctx);\n\n                // a drag from  elsewhere...- prevent drop..\n                if (!src.dragData) {\n                    print(\"no drag data!\");\n                    Gdk.drag_status(ctx, 0, time);\n                    this.targetData = false;\n                    return true;\n                }\n                var action = Gdk.DragAction.COPY;\n                if (src == this.el) {\n                    // unless we are copying!!! ctl button..\n                    action = Gdk.DragAction.MOVE;\n                }\n                var data = {};\n                print(\"GETTING POS\");\n                var isOver = this.get('/LeftTree.view').el.get_dest_row_at_pos(x,y, data);\n                print(\"ISOVER? \" + isOver);\n                if (!isOver) {\n                    Gdk.drag_status(ctx, 0 ,time);\n                    return false; // not over apoint!?!\n                }\n                // drag node is parent of child..\n                console.log(\"SRC TREEPATH: \" + src.treepath);\n                console.log(\"TARGET TREEPATH: \" + data.path.to_string());\n                \n                // nned to check a  few here..\n                //Gtk.TreeViewDropPosition.INTO_OR_AFTER\n                //Gtk.TreeViewDropPosition.INTO_OR_BEFORE\n                //Gtk.TreeViewDropPosition.AFTER\n                //Gtk.TreeViewDropPosition.BEFORE\n                \n                if (typeof(src.treepath) != 'undefined'  && \n                    src.treepath == data.path.to_string().substring(0,src.treepath.length)) {\n                    print(\"subpath drag\");\n                     Gdk.drag_status(ctx, 0 ,time);\n                    return false;\n                }\n                \n                // check that \n                //print(\"DUMPING DATA\");\n                //console.dump(data);\n                // path, pos\n                \n                print(data.path.to_string() +' => '+  data.pos);\n                var tg = this.get('/LeftTree.model').findDropNodeByPath(\n                    data.path.to_string(), src.dropList, data.pos);\n                    \n                this.get('/LeftTree.view').highlight(tg);\n                if (!tg.length) {\n                    print(\"Can not find drop node path\");\n                    this.targetData = false;\n                    Gdk.drag_status(ctx, 0, time);\n                    return true;\n                }\n                //console.dump(tg);\n                this.targetData = tg;    \n                \n                \n                Gdk.drag_status(ctx, action ,time);\n                 \n                return true;\n}","drag_drop":"function (self, ctx, x, y, time) {\n      Seed.print(\"TARGET: drag-drop\");\n                       \n                        Gtk.drag_get_data\n                        (\n                                w,         /* will receive 'drag-data-received' signal */\n                                ctx,        /* represents the current state of the DnD */\n                                this.get('/Window').atoms[\"STRING\"],    /* the target type we want */\n                                time            /* time stamp */\n                        );\n                        \n                         \n                        /* No target offered by source => error */\n                       \n\n                        return  true;\n}","drag_data_received":"function (self, drag_context, x, y, sel_data, info, time) {\n Seed.print(\"Tree: drag-data-received\");\n              var   delete_selection_data = false;\n               var  dnd_success = false;\n                /* Deal with what we are given from source */\n                if( sel_data && sel_data.length ) {\n                    \n                    if (ctx.action == Gdk.DragAction.ASK)  {\n                        /* Ask the user to move or copy, then set the ctx action. */\n                    }\n\n                    if (ctx.action == Gdk.DragAction.MOVE) {\n                        //delete_selection_data = true;\n                    }\n                    \n                    var source = Gtk.drag_get_source_widget(ctx);\n\n                    if (this.targetData) {\n                        if (source != this.el) {\n                            this.get('/LeftTree.model').dropNode(this.targetData,  source.dragData);\n                        } else {\n                            // drag around.. - reorder..\n                             this.get('/LeftTree.model').moveNode(this.targetData);\n                            \n                            \n                        }\n                        //Seed.print(this.targetData);\n                      \n                    }\n                    \n                    \n                    \n                    // we can send stuff to souce here...\n\n                    dnd_success = true;\n\n                }\n\n                if (dnd_success == false)\n                {\n                        Seed.print (\"DnD data transfer failed!\\n\");\n                }\n\n                Gtk.drag_finish (ctx, dnd_success, delete_selection_data, time);\n                return true;\n}","cursor_changed":"function (self) {\n var iter = new Gtk.TreeIter();\n                \n                if (this.selection.count_selected_rows() < 1) {\n                    .get('/LeftPanel.model').load( false);\n                    MidPropTree.activeElement =  false;\n                    MidPropTree.hideWin();\n                    var RightPalete     = imports.Builder.RightPalete.RightPalete;\n                    var pm = RightPalete.get('model');\n                    if (!LeftTree.getPaleteProvider()) {\n                        // it may not be loaded yet..\n                        return  true;\n                    }\n                    pm.load( LeftTree.getPaleteProvider().gatherList(\n                        LeftTree.get('model').listAllTypes()));\n                   \n                    return true;\n                }\n                \n                //console.log('changed');\n                var s = this.selection;\n                s.get_selected(LeftTree.get('model').el, iter);\n                \n                \n                // var val = \"\";\n                value = new GObject.Value('');\n                LeftTree.get('model').el.get_value(iter, 2, value);\n                LeftTree.get('model').activeIter = iter;\n                \n                var data = JSON.parse(value.value);\n                MidPropTree.activeElement =  data;\n                MidPropTree.hideWin();\n                LeftPanel.get('model').load( data);\n                \n                console.log(value.value);\n               // _g.button.set_label(''+value.get_string());\n                var RightPalete     = imports.Builder.RightPalete.RightPalete;\n                var pm = RightPalete.get('model');\n                pm.load( RightPalete.provider.gatherList(\n                    LeftTree.get('model').listAllTypes()));\n               \n                \n               \n               \n                //Seed.print( value.get_string());\n                return true;\n                \n}"}}]}]}]}]}]}]}]}]}]}