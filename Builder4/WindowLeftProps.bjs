{
    "id": "file-gtk-13",
    "name": "WindowLeftProps",
    "parent": "",
    "title": false,
    "path": "/home/alan/gitlive/app.Builder.js/Builder4/WindowLeftProps.bjs",
    "items": [
        {
            ".JsRender.JsRender:file": "",
            ".JsRender.Node:node": "",
            ".signal:void:before_edit": "()",
            "id": "LeftProps",
            "xtype": "VBox",
            "|void.startEditingKey": "() {\n    \n     \n    \n    Gtk.TreeIter iter;\n    Gtk.TreeModel mod;\n    \n    var s = this.view.get_selection();\n    s.get_selected(out mod, out iter);\n         \n  \n    // others... - fill in options for true/false?\n    \n    this.keyrender.el.editable = true;\n    this.view.el.set_cursor_on_cell(\n        mod.get_path(iter),\n        this.keycol.el,\n        this.keyrender.el,\n        true\n    );\n    \n    \n}\n",
            "|void:addProp": " (string type, string key, string value) {\n      // info includes key, val, skel, etype..\n      //console.dump(info);\n        //type = info.type.toLowerCase();\n        //var data = this.toJS();\n        \n \n            \n    if (type == \"listener\") {\n        if (this.node.listeners.has_key(key)) {\n            return;\n        }\n        this.node.listeners.set(key,value);\n    } else  {\n    \n        if (this.node.props.has_key(key)) {\n            return;\n        }\n        this.node.props.set(key,value);\n    }\n           \n      \n    // add a row???\n    this.load(this.file, this.node);\n    \n    \n    \n    /// need to find the row which I've just added..\n    \n    \n    var s = this.view.el.get_selection();\n    s.unselect_all();\n    \n    GLib.Value gval;\n    \n    this.view.foreach((model, path, iter) => {\n\n        this.model.el.get_value(iter, 0 , out gval);\n        if ((string)gval != type) {\n            return;\n        }\n        this.model.el.get_value(iter, 1 , out gval);\n        if ((string)gval != key) {\n            return;\n        }\n        s.set_selection(iter); \n    });\n    \n    \n    this.startEditingValue();\n              \n}\n",
            "|void:deleteSelected": " () {\n    \n            Gtk.TreeIter iter;\n            Gtk.TreeModel mod;\n            \n            var s = this.view.get_selection();\n            s.get_selected(out mod, out iter);\n                 \n                  \n            GLib.Value gval;\n            mod.get_value(iter, 0 , out gval);\n            var type = (string)gval;\n            \n            mod.get_value(iter, 1 , out gval);\n            var key = (string)gval;\n            \n            switch(type) {\n                case \"listener\":\n                    this.node.listeners.remove(key);\n                    break;\n                    \n                case \"prop\":\n                    this.node.prop.remove(key);\n                    break;\n            }\n            this.load(this.file, this.node);\n            \n            this.file.changed(\"prop\");\n}\n",
            "|void:load": "(JsRender.JsRender file, JsRender.Node? node) \n{\n    \n    this.before_edit();\n    this.node = node;\n    this.file = file;\n    \n \n    this.model.el.clear();\n              \n    //this.get('/RightEditor').el.hide();\n    if (node ==null) {\n        return ;\n    }\n     \n    \n\n    //var provider = this.get('/LeftTree').getPaleteProvider();\n    Gtk.TreeIter iter;\n    \n    \n    // really need a way to sort the hashmap...\n    var m = this.model.el;\n    \n    var miter = node.listeners.map_iterator();\n    \n    while(miter.next()) {\n        m.append(out iter,null);\n        m.set(iter, \n                0, \"listener\",\n                1, miter.get_key(),\n                2, \"<b>\" + miter.get_key() + \"</b>\",\n                3, miter.get_value()\n            ); \n     }\n     \n      \n    miter = node.props.map_iterator();\n    \n    \n   while(miter.next()) {\n        m.append(out iter,null);\n        m.set(iter, \n                0, \"props\",\n                1, miter.get_key(),\n                2,  miter.get_key() ,\n                3, miter.get_value()\n            ); \n   }\n    \n}\n",
            "|void:startEditingValue": "() {\n            \n             \n            \n            Gtk.TreeIter iter;\n            Gtk.TreeModel mod;\n            \n            var s = this.view.get_selection();\n            s.get_selected(out mod, out iter);\n                 \n            /*\n                m.set(iter, \n                        0, \"listener\",\n                        1, miter.get_key(),\n                        2, \"<b>\" + miter.get_key() + \"</b>\",\n                        3, miter.get_value()\n                    ); \n             \n            */\n            GLib.Value gval;\n            mod.get_value(iter, 3 , out gval);\n            var val = (string)gval;\n        \n            mod.get_value(iter, 1 , out gval);\n            var key = (string)gval;\n            \n            mod.get_value(iter, 0 , out gval);\n            var type = (string)gval;\n            \n            var use_textarea = false;\n            \n            if (type = \"listener\") {\n                use_textarea = true;\n            }\n            if (key.length > 0 && key[0] == '|') {\n                use_textarea = true;\n            }\n            if (use_textarea) {\n                this.showEditor(file, node, type, key);\n                return;\n            }\n            // others... - fill in options for true/false?\n            \n            this.keyrender.el.editable = true;\n            this.view.el.set_cursor_on_cell(\n                mod.get_path(iter),\n                this.valcol.el,\n                this.valrender.el,\n                true\n            );\n            \n            \n        }\n",
            "|xns": "Gtk",
            "items": [
                {
                    "pack": "pack_start,false,true,0",
                    "xtype": "HBox",
                    "|xns": "Gtk",
                    "items": [
                        {
                            "listeners": {
                                "button_press_event": " ( event ) => {\n    _this.showAddProps(\"prop\");\n    return false;\n}"
                            },
                            "pack": "add",
                            "xtype": "Button",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "|xns": "Gtk",
                                    "xtype": "HBox",
                                    "pack": "add",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Image",
                                            "pack": "add",
                                            "|stock": "Gtk.STOCK_ADD",
                                            "|icon_size": "Gtk.IconSize.MENU"
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Label",
                                            "pack": "add",
                                            "label": "Property"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "listeners": {
                                "button_press_event": "  ( event)  => {\n    \n// \tif (!this.get('/Editor').save()) {\n// \t    // popup!! - click handled.. \n// \t    return true;\n//        }\n    _this.showAddProps(\"listener\");\n    return false;\n}"
                            },
                            "pack": "add",
                            "xtype": "Button",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "|xns": "Gtk",
                                    "xtype": "HBox",
                                    "pack": "add",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Image",
                                            "pack": "add",
                                            "|stock": "Gtk.STOCK_ADD",
                                            "|icon_size": "Gtk.IconSize.MENU"
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Label",
                                            "pack": "add",
                                            "label": "Handler"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "listeners": {
                                "button_press_event": "  (self, ev) => {\n    this.before_edit();\n    \n        \n    var p = this.AddPropertyPopup;\n    p.el.set_screen(Gdk.Screen.get_default());\n    p.el.show_all();\n     p.el.popup(null, null, null, 3, ev.button.time);\n     return true;\n}"
                            },
                            "pack": "add",
                            "xtype": "Button",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "|xns": "Gtk",
                                    "xtype": "HBox",
                                    "pack": "add",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Image",
                                            "pack": "add",
                                            "|stock": "Gtk.STOCK_ADD",
                                            "|icon_size": "Gtk.IconSize.MENU"
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Label",
                                            "pack": "add",
                                            "label": "Other"
                                        }
                                    ]
                                },
                                {
                                    "|xns": "Gtk",
                                    "xtype": "Menu",
                                    "pack": false,
                                    "id": "AddPropertyPopup",
                                    "items": [
                                        {
                                            "listeners": {
                                                "activate": " ()  => {\n    _this.addProp( \"prop\", \".string:id\", \"\");\n}"
                                            },
                                            "label": "ID",
                                            "pack": "append",
                                            "tooltip_markup": "Using this.get('*someid') will find any id in an application.",
                                            "xtype": "MenuItem",
                                            "|xns": "Gtk"
                                        },
                                        {
                                            "listeners": {
                                                "activate": "  ( ) => {\n\n    _this.addProp( \"prop\", \"*pack\",\"add\");\n}"
                                            },
                                            "label": "PACK",
                                            "pack": "append",
                                            "tooltip_markup": "Add what type of packing is to be used",
                                            "xtype": "MenuItem",
                                            "|xns": "Gtk"
                                        },
                                        {
                                            "listeners": {
                                                "activate": "  ( ) => {\n\n    this.addProp( \"prop\",  \"|init\", \"{\\n\\n}\\n\" );\n}"
                                            },
                                            "label": "INIT",
                                            "pack": "append",
                                            "tooltip_markup": "Override the init method",
                                            "xtype": "MenuItem",
                                            "|xns": "Gtk"
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "SeparatorMenuItem",
                                            "pack": "add"
                                        },
                                        {
                                            "listeners": {
                                                "activate": "  (self) => {\n\n    _this.addProp( \"prop\", \".string:XXXX\", \"\");\n\n}"
                                            },
                                            "label": "String",
                                            "pack": "append",
                                            "tooltip_markup": "Add a user defined string property",
                                            "xtype": "MenuItem",
                                            "|xns": "Gtk"
                                        },
                                        {
                                            "listeners": {
                                                "activate": "  ( ) =>{\n\n    _this.addProp(\"prop\",  \".int:XXX\", \"0\");\n}"
                                            },
                                            "label": "Number",
                                            "pack": "append",
                                            "tooltip_markup": "Add a user defined number property",
                                            "xtype": "MenuItem",
                                            "|xns": "Gtk"
                                        },
                                        {
                                            "listeners": {
                                                "activate": "  ( ) =>{\n\n    _this.addProp( \"prop\", \".bool:XXX\", \"true\");\n}"
                                            },
                                            "label": "Boolean",
                                            "pack": "append",
                                            "tooltip_markup": "Add a user defined boolean property",
                                            "xtype": "MenuItem",
                                            "|xns": "Gtk"
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "SeparatorMenuItem",
                                            "pack": "add"
                                        },
                                        {
                                            "listeners": {
                                                "activate": "  ( ) =>{\n\n    _this.addProp(\"prop\",  \"|XXXX\", \"function() { }\");\n}"
                                            },
                                            "label": "Javascript Function",
                                            "pack": "append",
                                            "tooltip_markup": "Add a user function boolean property",
                                            "xtype": "MenuItem",
                                            "|xns": "Gtk"
                                        },
                                        {
                                            "listeners": {
                                                "activate": "  ( ) =>{\n\n    _this.addProp( \"prop\", \"|.type:return_type:XXXX\", \"() {\\n\\n}\\n\");\n}"
                                            },
                                            "label": "Vala Method",
                                            "pack": "append",
                                            "tooltip_markup": "Add a user function boolean property",
                                            "xtype": "MenuItem",
                                            "|xns": "Gtk"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    ".bool:editing": false,
                    "id": "EditProps",
                    "pack": "add",
                    "xtype": "ScrolledWindow",
                    "|init": "  {\n  \n   this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n}\n",
                    "|shadow_type": "Gtk.ShadowType.IN",
                    "|xns": "Gtk",
                    "items": [
                        {
                            "listeners": {
                                "button_press_event": "  ( ev)  => {\n\n    _this.beforeEdit();\n    \n    Gtk.TreeViewColumn col;\n    int cell_x;\n    int cell_y;\n    Gtk.TreePath path;\n    if (!this.el.get_path_at_pos(ev.x,ev.y, out path, out col, out cell_x, out cell_y )) {\n        return false; //not on a element.\n    }\n    \n     // right click.\n     if (ev.type == Gdk.EventType.BUTTON_PRESS  && ev.button == 3) {    \n        // show popup!.   \n        if (col.title == \"value\" && this.EditProps.editing) {\n            return false;\n        }\n\n        var p = this.ContextMenu;\n\n        p.el.set_screen(Gdk.Screen.get_default());\n        p.el.show_all();\n        p.el.popup(null, null, null, null, 3, ev.button.time);\n        //Seed.print(\"click:\" + res.column.title);\n        \n        \n        return false;\n    }\n    \n     \n    if (col.title != \"value\") {\n          //  XObject.error(\"column is not value?\");\n        return false; // ignore.. - key click.. ??? should we do this??\n    }\n    \n    // currently editing???\n//    if (  this.activePath) {\n        \n     //   this.activePath = false;\n       // stop editing!!!!\n     /*\n        if (this.get('/Editor').dirty) {\n            //if (!this.get('/Editor.buffer').checkSyntax()) {\n            //   this.get('/StandardErrorDialog').show(\"Fix errors in code and save..\"); \n            //   return true;\n            //    // error Dialog\n            //}\n            if (!this.get('/Editor.view').save()) {\n                return true;\n            }\n        }   \n        */\n        this.keycol.el.stop_editing();\n        this.valcol.el.stop_editing();\n        \n        //this.EditProps.editableColumn.items[0].el.stop_editing();\n        this.EditProps.editing = false;\n    \n    //    XObject.error(\"Currently editing?\");\n     //   return false;\n   // }\n    \n    var renderer = this.valrender.el; // set has_entry..\n    \n    //var type = this.get('/LeftPanel.model').getType(res.path.to_string());\n        \n    // get options for this type -- this is to support option lists etc..\n    //var provider = this.get('/LeftTree').getPaleteProvider();\n    //var opts = provider.findOptions(type);\n    \n//    if (opts === false) {\n        // it's text etnry\n//         this.get('/LeftPanel').editableColumn.setOptions([]);\n//        renderer.has_entry = true;\n//    } else {\n//         this.get('/LeftPanel').editableColumn.setOptions(opts);\n//        renderer.has_entry = false;\n//    }\n    _this.startEditing(res.path.to_string(), 1);\n        \n   //Seed.print(\"click\" + ev.type);\n    //console.dump(res);\n    return false;\n\n              \n   \n}"
                            },
                            "id": "view",
                            "tooltip_column": 5,
                            "xtype": "TreeView",
                            "|enable_tree_lines": "true",
                            "|headers_visible": "false",
                            "|init": "{\n    var selection = this.el.get_selection();\n    selection.set_mode( Gtk.SelectionMode.SINGLE);\n\n\n    var description = new Pango.FontDescription.c_new();\n    description.set_size(8000);\n    this.el.modify_font(description);\n}\n",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "columns": "    typeof(Object),  // 0 real key\n    typeof(string),  // 1 property type (prop|event)\n    typeof(string),  // 2 real key\n    typeof(string),  // 4 visable key\n    typeof(string)  // 5 visable value\n     ",
                                    "id": "model",
                                    "n_columns": 6,
                                    "pack": "set_model",
                                    "xtype": "TreeStore",
                                    "|changed": "function(str, doRefresh) {\n    if (!this.activePath) {\n        return;\n    }\n    var iter = new Gtk.TreeIter();\n    this.el.get_iter(iter, new Gtk.TreePath.from_string(this.activePath));\n    \n    this.el.set_value(iter, 1, '' +str);\n    this.el.set_value(iter, 3, '' + this.toShort(str));\n    var type = this.getIterValue(iter, 4);\n\n    this.el.set_value(iter, 5, type + ' : ' + str);\n    // update the tree...  \n\n    this.get('/LeftTree.model').changed(this.toJS(), doRefresh); \n}\n",
                                    "|toShort": "function(str) {\n    var a = typeof(str) == 'string' ? str.split(\"\\n\") : [];\n        return a.length > 1 ? a[0] + '....' : '' + str;\n}\n",
                                    "|xns": "Gtk"
                                },
                                {
                                    "id": "keycol",
                                    "pack": "append_column",
                                    "title": "key",
                                    "xtype": "TreeViewColumn",
                                    "|init": " this.el.add_attribute(_this.keyrender.el , \"markup\", 2 );\n  ",
                                    "|xns": "Gtk",
                                    "items": [
                                        {
                                            "listeners": {
                                                "editing_started": "(  editable, path) => {\n\n     //   this.get('/LeftPanel.model').activePath  = path;\n\n}",
                                                "edited": "  (path, newtext) => {\n/*\n m.set(iter, \n                0, \"listener\",\n                1, miter.get_key(),\n                2, \"<b>\" + miter.get_key() + \"</b>\",\n                3, miter.get_value()\n            ); \n\n  */      \n\n        Gtk.TreeIter  iter;\n        _this.model.el.get_iter(out iter, new Gtk.TreePath.from_string(path));\n        GLib.Value gval;\n        \n         _this.model.el.get_value(iter,1, out gval);\n        var oldval = (string)gval;\n        \n         _this.model.el.get_value(iter,0, out gval);\n        var oldtype = (string)gval;\n       \n        _this.model.el.set_value(iter, 1, newtext);\n        \n        \n        switch(oldtype) {\n            case \"listener\":\n                this.node.listeners.set(newtext, this.node.props.get(oldval));\n                this.node.listeners.remove(oldval);\n                break;\n            case \"prop\":\n                this.node.props.set(newtext, this.node.props.get(oldval));\n                this.node.props.remove(oldval);\n                break;\n         }\n         _this.changed();\n          \n}"
                                            },
                                            "id": "keyrender",
                                            "pack": "pack_start,false",
                                            "xtype": "CellRendererText",
                                            "|xns": "Gtk"
                                        }
                                    ]
                                },
                                {
                                    "id": "valcol",
                                    "pack": "append_column",
                                    "title": "value",
                                    "xtype": "TreeViewColumn",
                                    "|init": "{\n\tthis.el.add_attribute(this.valrender.el , \"text\", 3 );\n\tthis.el.add_attribute(this.valrender.el , \"sensitive\", 3 );\n\t//this.el.add_attribute(this.items[0].el , 'editable', 3 );\n          // this.el.set_cell_data_func(cell, age_cell_data_func, NULL, NULL);\n\n //\tthis.get('/LeftPanel').editableColumn= this;\n}\n",
                                    "|xns": "Gtk",
                                    "items": [
                                        {
                                            "listeners": {
                                                "edited": "  ( treepath, str) => {\n \t_this .editing = false;\n \t\n \t//var ap = this.get('/LeftPanel.model').activePath\n\t//print(\"EDITED? \"  + ap + \" - p:\" + p0 + \" t:\" + p0);\n        _this.setCurrentValue(str, true);\n        //this.get('/LeftPanel.model').activePath = false;\n        this.el.editable = false;\n}",
                                                "editing_started": "( editable, path) => {\n    _this.editing = true;\n    this.el.editable = false; // make sure it's not editor...\n   \n}"
                                            },
                                            "editable": "false",
                                            "id": "valrender",
                                            "pack": "pack_start,true",
                                            "text_column": 0,
                                            "xtype": "CellRendererCombo",
                                            "|has_entry": "true",
                                            "|xns": "Gtk",
                                            "items": [
                                                {
                                                    "columns": "typeof(string)",
                                                    "*prop": "model",
                                                    "n_columns": 1,
                                                    "pack": false,
                                                    "xtype": "ListStore",
                                                    "|xns": "Gtk"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "id": "ContextMenu",
                            "pack": false,
                            "xtype": "Menu",
                            "|xns": "Gtk",
                            "items": [
                                {
                                    "listeners": {
                                        "activate": "  ( )  =>{\n\t_this.deleteSelected();\n}"
                                    },
                                    "label": "Delete",
                                    "pack": "append",
                                    "xtype": "MenuItem",
                                    "|xns": "Gtk"
                                },
                                {
                                    "listeners": {
                                        "activate": "  ( ) => {\n    _this.startEditing(false, 0);\n}"
                                    },
                                    "label": "Edit",
                                    "pack": "append",
                                    "xtype": "MenuItem",
                                    "|xns": "Gtk"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],
    "permname": "",
    "modOrder": ""
}