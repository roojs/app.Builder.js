{
    "id": "file-gtk-7",
    "name": "Window",
    "parent": "",
    "title": false,
    "path": "/home/alan/gitlive/app.Builder.js/Sample/Window.bjs",
    "items": [
        {
            "|xns": "Gtk",
            "xtype": "Window",
            "|type": "Gtk.WindowType.TOPLEVEL",
            "title": "Application Builder",
            "border_width": 0,
            "|init": "function() {\n     this.atoms = {\n           \"STRING\" : Gdk.atom_intern(\"STRING\")\n\t};\n\tthis.targetList = new Gtk.TargetList();\n\tthis.targetList.add( this.atoms[\"STRING\"], 0, 0);\n\t//imports.Builder.Provider.ProjectManager.ProjectManager.loadConfig();\nGtk.rc_parse_string(\n            \"style \\\"gtkcombobox-style\\\" {\\n\" + \n            \"    GtkComboBox::appears-as-list = 1\\n\" +\n            \"}\\n\"+\n            \"class \\\"GtkComboBox\\\" style \\\"gtkcombobox-style\\\"\\n\");\n    XObject.prototype.init.call(this);\n    this.el.show_all();\n    \n   \n              \n}\n",
            "default_width": 800,
            "default_height": 500,
            "id": "Window",
            "|setTitle": "function(str) {\n    this.el.set_title(this.title + ' - ' + str);\n}\n",
            "listeners": {
                "delete_event": "function (self, event) {\n    return false;\n}",
                "destroy": "function (self) {\n   Gtk.main_quit();\n}",
                "show": "function (self) {\n  print(\"WINDOW SHOWING - trying to hide\");\nimports.Builder.Provider.ProjectManager.ProjectManager.loadConfig();\n \tthis.get('/MidPropTree').hideWin();\n    this.get('/RightPalete').hide();\n    this.get('/BottomPane').el.hide();\n\n}"
            },
            "items": [
                {
                    "|xns": "Gtk",
                    "xtype": "VBox",
                    "id": "w-vbox",
                    "items": [
                        {
                            "|xns": "Gtk",
                            "xtype": "MenuBar",
                            "pack": "pack_start,false,false",
                            "items": [
                                {
                                    "|xns": "Gtk",
                                    "xtype": "MenuItem",
                                    "|use_underline": true,
                                    "label": "_File",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Menu",
                                            "pack": "set_submenu",
                                            "items": [
                                                {
                                                    "|xns": "Gtk",
                                                    "xtype": "MenuItem",
                                                    "|use_underline": true,
                                                    "label": "New _Project",
                                                    "listeners": {
                                                        "activate": "function (self) {\n         var _this = this;\n\tthis.get('/EditProject').show({\n\t    success : function(pr) {\n\t\t     _this.get('/LeftProjectTree').get('combo').setValue(pr.fn);\n\t    }\n\t});\n}"
                                                    }
                                                },
                                                {
                                                    "|xns": "Gtk",
                                                    "xtype": "MenuItem",
                                                    "label": "_New File",
                                                    "|use_underline": true,
                                                    "listeners": {
                                                        "activate": "function (self) {\n \tvar fn = this.get('/LeftProjectTree.combo').getValue();\n        if (!fn) {\n            this.get('/LeftProjectTree').showNoProjectSelected();\n            return true;\n        }\n        var pm = imports.Builder.Provider.ProjectManager.ProjectManager;\n        this.get('/DialogNewComponent').show({\n            project : pm.getByFn(fn)\n        });\n}"
                                                    }
                                                },
                                                {
                                                    "|xns": "Gtk",
                                                    "xtype": "SeparatorMenuItem",
                                                    "pack": "add"
                                                },
                                                {
                                                    "|xns": "Gtk",
                                                    "xtype": "MenuItem",
                                                    "|use_underline": true,
                                                    "pack": "add",
                                                    "label": "D_elete Project",
                                                    "listeners": {
                                                        "activate": "function (self) {\n\n\tvar fn =  this.get('/LeftProjectTree').get('combo').getValue();\n\tif (!fn.length) {\n\t\tthis.get('/StandardErrorDialog').show(\"Select a project\")\n\t\treturn;\n        }\n\tvar pm = imports.Builder.Provider.ProjectManager.ProjectManager;\n\tvar pr  = pm.getByFn(fn);\n\n\t// confirm..\n\tthis.get('/DialogConfirm').show(\"Are you sure you want to delete project '\" + pr.name + \"'\", function() {\n\t\tpm.deleteProject(fn);\n\t\tprint(\"DELETE?\");\n\t});\n\n}"
                                                    }
                                                },
                                                {
                                                    "|xns": "Gtk",
                                                    "xtype": "SeparatorMenuItem",
                                                    "pack": "add"
                                                },
                                                {
                                                    "|xns": "Gtk",
                                                    "xtype": "MenuItem",
                                                    "pack": "add",
                                                    "label": "_Quit",
                                                    "|use_underline": true,
                                                    "listeners": {
                                                        "activate": "function (self) {\n   Gtk.main_quit();\n} "
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "label": "_Edit",
                                    "xtype": "MenuItem",
                                    "|use_underline": true,
                                    "|xns": "Gtk",
                                    "pack": "add",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Menu",
                                            "pack": "set_submenu",
                                            "listeners": {},
                                            "items": [
                                                {
                                                    "listeners": {
                                                        "activate": "function (self) {\n \tvar fn = this.get('/LeftTree').getActiveFile();\n        if (!fn) {\n            this.get('/StandardErrorDialog').show(\"No File active\");\n            return true;\n        }\n \n        this.get('/DialogNewComponent').show(fn);\n        return true;\n}"
                                                    },
                                                    "label": "File _Properties",
                                                    "pack": "add",
                                                    "xtype": "MenuItem",
                                                    "|use_underline": true,
                                                    "|xns": "Gtk"
                                                },
                                                {
                                                    "listeners": {
                                                        "activate": "function (self, event) {\n    this.get('/RooProjectProperties').show();\n    return false;\n}"
                                                    },
                                                    "label": "Modify Project HTML ",
                                                    "pack": "add",
                                                    "xtype": "MenuItem",
                                                    "|use_underline": true,
                                                    "|xns": "Gtk"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "label": "_View",
                                    "xtype": "MenuItem",
                                    "|use_underline": true,
                                    "|xns": "Gtk",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Menu",
                                            "pack": "set_submenu",
                                            "listeners": {},
                                            "items": [
                                                {
                                                    "listeners": {
                                                        "activate": "function (self, event) {\n      var js = this.get('/LeftTree.model').toJS();\n    if (js && js[0]) {\n        this.get('/RightBrowser.view').renderJS(js[0]);\n    } \n    return false;\n}"
                                                    },
                                                    "label": "_Redraw (Roo)",
                                                    "pack": "add",
                                                    "xtype": "MenuItem",
                                                    "|use_underline": true,
                                                    "|xns": "Gtk"
                                                },
                                                {
                                                    "listeners": {
                                                        "activate": "function (self, event) \n{\n        /* Firefox testing for debugging..\n          - we can create a /tmp directory, and put.\n            builder.html, builder.html.js, link roojs1 \n            add at the end of builder.html Roo.onload(function() {\n\t  */\n\t if (!this.get('/Window.LeftTree').getActiveFile()) {\n            return;\n        }\n        \n        var js = this.get('/LeftTree.model').toJS();\n         if (!js ||  !js[0]) {\n            return;\n        }\n        var project = this.get('/Window.LeftTree').getActiveFile().project;\n        //print (project.fn);\n        \n        project.runhtml  = project.runhtml || '';\n\n\n\tvar File = imports.File.File;\n\t\n\tvar target = \"/tmp/firetest\"; // fixme..\n\tif (!File.isDirectory(target)) {\n\t    File.mkdir(target);\n        }\n\tFile.copy(__script_path__ + '/../builder.html.js', target+ '/builder.html.js', Gio.FileCopyFlags.OVERWRITE);\n\tif (!File.exists( target+ '/roojs1')) {\n            File.link( target+ '/roojs1', __script_path__ + '/../roojs1');\n    \t}\n        \n        \n        \n        var html = imports.File.File.read(__script_path__ + '/../builder.html');\n        html = html.replace('</head>', project.runhtml + '</head>');\n        \n       \n        var     jsstr = JSON.stringify(js[0], null, 4);\n       \n        var runbuilder = '<script type=\"text/javascript\">' + \"\\n\" + \n            \" Builder.render(\" + jsstr + \");\\n\" +\n            '</script>';\n        \n        html = html.replace('</body>', runbuilder + '</body>');\n\n\tFile.write( target+ '/builder.html', html);\n\t\n        this.get('/Terminal').feed(\"RUN DIR:\" + target);\n    \n    this.get('/Terminal').el.fork_command( null , [], [], target\n\t, false,false,false); \n    var cmd = \"firefox file://\" + target + \"/builder.html  \\n\";\n    this.get('/Terminal').el.feed_child(cmd, cmd.length);\n     return false;\n}"
                                                    },
                                                    "label": "_Test in Firefox (Roo)",
                                                    "pack": "add",
                                                    "xtype": "MenuItem",
                                                    "|use_underline": true,
                                                    "|xns": "Gtk"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "|xns": "Gtk",
                                    "xtype": "MenuItem",
                                    "label": "_Help",
                                    "|use_underline": true,
                                    "listeners": {},
                                    "pack": "add",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "Menu",
                                            "pack": "set_submenu",
                                            "listeners": {},
                                            "items": [
                                                {
                                                    "|xns": "Gtk",
                                                    "xtype": "MenuItem",
                                                    "pack": "add",
                                                    "label": "_About",
                                                    "|use_underline": true,
                                                    "listeners": {
                                                        "activate": "function (self) {\n    this.get('/About').el.run();\n}"
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "|xns": "Gtk",
                            "xtype": "HPaned",
                            "id": "left",
                            "position": 400,
                            "items": [
                                {
                                    "|xns": "Gtk",
                                    "xtype": "HBox",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "VPaned",
                                            "position": 300,
                                            "id": "leftvpaned",
                                            "items": [
                                                {
                                                    "|xns": "Gtk",
                                                    "xtype": "VBox",
                                                    "id": "LeftTopPanel",
                                                    "items": [
                                                        {
                                                            "listeners": {
                                                                "activate": "function (self) {\n\tvar nb = this.get('/LeftTopPanel.notebook');\n\tif (this.el.expanded) {\n\t    // now expanded..\n            \n\t    var pm  = imports.Builder.Provider.ProjectManager.ProjectManager;\n\t    \n\t   \n\t    var model = this.get('/LeftProjectTree.combomodel');\n\t  //  print (\"loading Projects?\")\n\t//console.dump(pm.projects);\n\t    model.loadData(pm.projects);\n\t     \n\t    \n\t    nb.el.set_current_page(1);\n\t    //pm.on('changed', function() {\n\t\t//console.log(\"CAUGHT project manager change\");\n\t    //    _combo.model.loadData(pm.projects);\n\t    //}\n\t    return;\n\t}\n\tnb.el.set_current_page(0);\n}",
                                                                "enter_notify_event": "function (self, event) {\n     this.el.expanded = !this.el.expanded;\n//if (this.el.expanded ) {\n    this.listeners.activate.call(this);\n//   }\n\nreturn true;\n}"
                                                            },
                                                            "id": "expander",
                                                            "label": "Select Project or File",
                                                            "pack": "pack_start,false,true",
                                                            "xtype": "Expander",
                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n   this.el.add_events (Gdk.EventMask.BUTTON_MOTION_MASK );\n}\n",
                                                            "|xns": "Gtk"
                                                        },
                                                        {
                                                            "|xns": "Gtk",
                                                            "xtype": "Notebook",
                                                            "id": "notebook",
                                                            "|show_border": false,
                                                            "|show_tabs": false,
                                                            "pack": "pack_start,true,true",
                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n\tthis.el.set_current_page(0);\n\n}\n",
                                                            "items": [
                                                                {
                                                                    "id": "LeftTree",
                                                                    "pack": "add",
                                                                    "xtype": "ScrolledWindow",
                                                                    "|getActiveElement": "function() { // return path to actie node.\n\n     var path = this.getActivePath();\n     if (!path) {\n        return false;\n     }\n     var iter = new Gtk.TreeIter();\n     this.get('model').el.get_iter_from_string(iter, path);\n     \n     var value = new GObject.Value('');\n     this.get('model').el.get_value(iter, 2, value);\n        \n     return JSON.parse(value.value);\n}\n",
                                                                    "|getActiveFile": "function() {\n    return this.get('model').file;\n}\n",
                                                                    "|getActivePath": "function() {\n    var model = this.get('model');\n    var view = this.get('view');\n    if (view.selection.count_selected_rows() < 1) {\n        return false;\n    }\n    var iter = new Gtk.TreeIter();\n\n    view.selection.get_selected(model.el, iter);\n    return model.el.get_path(iter).to_string();\n}\n",
                                                                    "|getPaleteProvider": "function() {\n    var model = this.get('model');\n    var pm = imports.Builder.Provider.ProjectManager.ProjectManager;\n    return pm.getPalete(model.file.getType());\n}\n",
                                                                    "|getRenderer": "function() {\n\n\tswitch( this.getActiveFile().getType()) {\n\t\tcase 'Roo':\n\t\t    return this.get('/RightBrowser.view');\n\t\tcase 'Gtk':\n\t\t    return this.get('/RightGtkView');\n\t}\n\n}\n",
                                                                    "|init": "function() {\n    XObject.prototype.init.call(this);\n    this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)\n}\n",
                                                                    "|renderView": "function() {\n    var render = this.getRenderer();\n    var model = this.get('model');\n    if (render) {\n        render.renderJS(model.toJS(false,true)[0]);\n    } else {\n        print(\"NO RENDER JS METHOD?\");\n    }\n}\n",
                                                                    "|shadow_type": "Gtk.ShadowType.IN",
                                                                    "|xns": "Gtk",
                                                                    "items": [
                                                                        {
                                                                            "listeners": {
                                                                                "button_press_event": "function (self, ev) {\n \tconsole.log(\"button press?\");\n        if (ev.type != Gdk.EventType.BUTTON_PRESS  || ev.button.button != 3) {\n            print(\"click\" + ev.type);\n            return false;\n        }\n      \n    \n        var res = {}; \n        this.get('/LeftTree.view').el.get_path_at_pos(ev.button.x,ev.button.y, res);\n        \n        if (!this.get('/LeftTreeMenu').el)  this.get('/LeftTreeMenu').init();\n        \n        this.get('/LeftTreeMenu').el.set_screen(Gdk.Screen.get_default());\n        this.get('/LeftTreeMenu').el.show_all();\n        this.get('/LeftTreeMenu').el.popup(null, null, null, null, 3, ev.button.time);\n        print(\"click:\" + res.path.to_string());\n        return false;\n}",
                                                                                "drag_begin": "function (self, drag_context) {\n\tprint('SOURCE: drag-begin');\n         this.targetData = false;\n        // find what is selected in our tree...\n        var iter = new Gtk.TreeIter();\n        var s = this.selection;\n        s.get_selected(this.get('/LeftTree.model').el, iter);\n\n        // set some properties of the tree for use by the dropped element.\n        var value = new GObject.Value('');\n        this.get('/LeftTree.model').el.get_value(iter, 2, value);\n        var data = JSON.parse(value.value);\n        var xname = this.get('/LeftTree.model').file.guessName(data);\n        \n        this.el.dragData = xname;\n        this.el.dropList = this.get('/LeftTree').getPaleteProvider().getDropList(xname);\n        \n\n        // make the drag icon a picture of the node that was selected\n        var path = this.get('/LeftTree.model').el.get_path(iter);\n        this.el.treepath = path.to_string();\n        \n        var pix = this.el.create_row_drag_icon ( path);\n        \n        Gtk.drag_set_icon_pixmap (ctx,\n            pix.get_colormap(),\n            pix,\n            null,\n            -10,\n            -10);\n        \n        return true;\n}",
                                                                                "drag_end": "function (self, drag_context) {\n\tSeed.print('LEFT-TREE: drag-end');\n        this.el.dragData = false;\n        this.el.dropList = false;\n        this.targetData = false;\n        this.get('/LeftTree.view').highlight(false);\n        return true;\n}",
                                                                                "drag_motion": "function (self, ctx, x, y, time) {\n    console.log(\"LEFT-TREE: drag-motion\");\n                var src = Gtk.drag_get_source_widget(ctx);\n\n                // a drag from  elsewhere...- prevent drop..\n                if (!src.dragData) {\n                    print(\"no drag data!\");\n                    Gdk.drag_status(ctx, 0, time);\n                    this.targetData = false;\n                    return true;\n                }\n                var action = Gdk.DragAction.COPY;\n                if (src == this.el) {\n                    // unless we are copying!!! ctl button..\n                    action = ctx.actions & Gdk.DragAction.MOVE ? Gdk.DragAction.MOVE : Gdk.DragAction.COPY ;\n                }\n                var data = {};\n\n\t\tif (!this.get('/LeftTree.model').el.iter_n_children(null)) {\n\t\t\t// no children.. -- asume it's ok..\n\t\t\tthis.targetData =  [ '' , Gtk.TreeViewDropPosition.INTO_OR_AFTER , ''];\n\t\t\tGdk.drag_status(ctx, action ,time);\n\t\t\treturn true;\n\t\t}\n\n                print(\"GETTING POS\");\n                var isOver = this.get('/LeftTree.view').el.get_dest_row_at_pos(x,y, data);\n                print(\"ISOVER? \" + isOver);\n                if (!isOver) {\n                    Gdk.drag_status(ctx, 0 ,time);\n                    return false; // not over apoint!?!\n                }\n                // drag node is parent of child..\n                console.log(\"SRC TREEPATH: \" + src.treepath);\n                console.log(\"TARGET TREEPATH: \" + data.path.to_string());\n                \n                // nned to check a  few here..\n                //Gtk.TreeViewDropPosition.INTO_OR_AFTER\n                //Gtk.TreeViewDropPosition.INTO_OR_BEFORE\n                //Gtk.TreeViewDropPosition.AFTER\n                //Gtk.TreeViewDropPosition.BEFORE\n                \n                if (typeof(src.treepath) != 'undefined'  && \n                    src.treepath == data.path.to_string().substring(0,src.treepath.length)) {\n                    print(\"subpath drag\");\n                     Gdk.drag_status(ctx, 0 ,time);\n                    return false;\n                }\n                \n                // check that \n                //print(\"DUMPING DATA\");\n                //console.dump(data);\n                // path, pos\n                \n                print(data.path.to_string() +' => '+  data.pos);\n                var tg = this.get('/LeftTree.model').findDropNodeByPath(\n                    data.path.to_string(), src.dropList, data.pos);\n                    \n                this.get('/LeftTree.view').highlight(tg);\n                if (!tg.length) {\n                    print(\"Can not find drop node path\");\n                    this.targetData = false;\n                    Gdk.drag_status(ctx, 0, time);\n                    return true;\n                }\n                //console.dump(tg);\n                this.targetData = tg;    \n                \n                \n                Gdk.drag_status(ctx, action ,time);\n                 \n                return true;\n}",
                                                                                "drag_drop": "function (w, ctx, x, y, time) {\n      Seed.print(\"TARGET: drag-drop\");\n                       \n                        Gtk.drag_get_data\n                        (\n                                w,         /* will receive 'drag-data-received' signal */\n                                ctx,        /* represents the current state of the DnD */\n                                this.get('/Window').atoms[\"STRING\"],    /* the target type we want */\n                                time            /* time stamp */\n                        );\n                        \n                         \n                        /* No target offered by source => error */\n                       \n\n                        return  true;\n}",
                                                                                "drag_data_received": "function (self, ctx, x, y, sel_data, info, time) {\n\t print(\"Tree: drag-data-received\");\n\n              var   delete_selection_data = false;\n               var  dnd_success = false;\n                /* Deal with what we are given from source */\n                if( sel_data && sel_data.length ) {\n                    \n                    if (ctx.action == Gdk.DragAction.ASK)  {\n                        /* Ask the user to move or copy, then set the ctx action. */\n                    }\n\n                    if (ctx.action == Gdk.DragAction.MOVE) {\n                        //delete_selection_data = true;\n                    }\n                    \n                    var source = Gtk.drag_get_source_widget(ctx);\n\n                    if (this.targetData) {\n                        if (source != this.el) {\n                            this.get('/LeftTree.model').dropNode(this.targetData,  source.dragData);\n                        } else {\n                            // drag around.. - reorder..\n                             this.get('/LeftTree.model').moveNode(this.targetData, ctx.action);\n                            \n                            \n                        }\n                        //Seed.print(this.targetData);\n                      \n                    }\n                    \n                    \n                    \n                    // we can send stuff to souce here...\n\n                    dnd_success = true;\n\n                }\n\n                if (dnd_success == false)\n                {\n                        Seed.print (\"DnD data transfer failed!\\n\");\n                }\n\n                Gtk.drag_finish (ctx, dnd_success, delete_selection_data, time);\n                return true;\n}",
                                                                                "cursor_changed": "function (self) {\n     if (this.blockChanges) { // probably not needed.. \n       return true;\n     }\n     var render = this.get('/LeftTree').getRenderer();                \n   \n    \n    if (this.selection.count_selected_rows() < 1) {\n        this.get('/LeftPanel.model').load( false);\n        this.get('/MidPropTree').activeElement =  false;\n        this.get('/MidPropTree').hideWin();\n\n        var pm = this.get('/RightPalete.model');\n        if (!this.get('/LeftTree').getPaleteProvider()) {\n            // it may not be loaded yet..\n            return  true;\n        }\n        pm.load( this.get('/LeftTree').getPaleteProvider().gatherList(\n            this.get('/LeftTree.model').listAllTypes()));\n        if (render && render.redraw) {\n            render.redraw();\n        }\n        return true;\n    }\n            \n            //console.log('changed');\n        var s = this.selection;\n          var iter = new Gtk.TreeIter();\n        s.get_selected(this.get('/LeftTree.model').el, iter);\n        \n        \n        // var val = \"\";\n        var value = new GObject.Value('');\n        this.get('/LeftTree.model').el.get_value(iter, 2, value);\n        this.get('/LeftTree.model').activePath = this.get('/LeftTree.model').el.get_path(iter).to_string();\n        \n        var data = JSON.parse(value.value);\n        this.get('/MidPropTree').activeElement =  data;\n        this.get('/MidPropTree').hideWin();\n        this.get('/LeftPanel.model').load( data);\n        \n        console.log(value.value);\n       // _g.button.set_label(''+value.get_string());\n\n        var pm =this.get('/RightPalete.model');\n        pm.load(  this.get('/LeftTree').getPaleteProvider().gatherList(\n             this.get('/LeftTree.model').listAllTypes()));\n       \n        \n           if (render && render.redraw) {\n            render.redraw();\n        }\n           \n            //Seed.print( value.get_string());\n            return true;\n                \n}"
                                                                            },
                                                                            "id": "view",
                                                                            "pack": "add",
                                                                            "tooltip_column": 1,
                                                                            "xtype": "TreeView",
                                                                            "|enable_tree_lines": true,
                                                                            "|headers_visible": false,
                                                                            "|highlight": "function(treepath_ar) {\n\n        // highlighting for drag/drop\n        if (treepath_ar.length && treepath_ar[0].length ) {\n            this.el.set_drag_dest_row( \n                    new  Gtk.TreePath.from_string( treepath_ar[0] ),  treepath_ar[1]);\n            } else {\n                this.el.set_drag_dest_row(null, Gtk.TreeViewDropPosition.INTO_OR_AFTER);\n            }\n             \n        }",
                                                                            "|init": "function() {\n    \tXObject.prototype.init.call(this);\n\tvar description = new Pango.FontDescription.c_new();\n\tdescription.set_size(8000);\n\tthis.el.modify_font(description);\n\n\tthis.selection = this.el.get_selection();\n\tthis.selection.set_mode( Gtk.SelectionMode.SINGLE);\n\tvar _this = this;\n\n\t// is this really needed??\n\tthis.selection.signal['changed'].connect(function() {\n\t\t_this.get('/LeftTree.view').listeners.cursor_changed.apply(\n\t\t    _this.get('/LeftTree.view'), [ _this.get('/LeftTree.view'), '']\n\t\t);\n\t});\n\n\tGtk.drag_source_set (\n\t\tthis.el,            /* widget will be drag-able */\n\t\tGdk.ModifierType.BUTTON1_MASK,       /* modifier that will start a drag */\n\t\tnull,            /* lists of target to support */\n\t\t0,              /* size of list */\n\t\tGdk.DragAction.COPY   | Gdk.DragAction.MOVE           /* what to do with data after dropped */\n\t);\n\n\tGtk.drag_source_set_target_list(this.el, this.get('/Window').targetList);\n\n\tGtk.drag_source_add_text_targets(this.el); \n\tGtk.drag_dest_set\n\t(\n\t    this.el,              /* widget that will accept a drop */\n\t    Gtk.DestDefaults.MOTION  | Gtk.DestDefaults.HIGHLIGHT,\n\t    null,            /* lists of target to support */\n\t    0,              /* size of list */\n\t    Gdk.DragAction.COPY   | Gdk.DragAction.MOVE       /* what to do with data after dropped */\n\t);\n\n\tGtk.drag_dest_set_target_list(this.el, this.get('/Window').targetList);\n\tGtk.drag_dest_add_text_targets(this.el);\n}\n",
                                                                            "|selectNode": "function(treepath_str) {\n    //this.selection.select_path(new  Gtk.TreePath.from_string( treepath_str));\n var tp = new Gtk.TreePath.from_string(treepath_str);\n          this.el.set_cursor(tp, null, false);  \n      this.el.scroll_to_cell(tp, null, false, 0,0);\n}\n",
                                                                            "|xns": "Gtk",
                                                                            "items": [
                                                                                {
                                                                                    "activePath": false,
                                                                                    "currentTree": false,
                                                                                    "id": "model",
                                                                                    "pack": "set_model",
                                                                                    "xtype": "TreeStore",
                                                                                    "|changed": "function(n, refresh) {\n         print(\"MODEL CHANGED CALLED\" + this.activePath);\n         if (this.activePath) {\n            var iter = new Gtk.TreeIter();\n            this.el.get_iter(iter, new Gtk.TreePath.from_string(this.activePath))\n            this.el.set_value(iter, 0, [GObject.TYPE_STRING, this.nodeTitle(n)]);\n            this.el.set_value(iter, 1, [GObject.TYPE_STRING, this.nodeTitle(n)]);\n            \n            this.el.set_value(iter, 2, [GObject.TYPE_STRING, this.nodeToJSON(n)]);\n        }\n            //this.currentTree = this.toJS(false, true)[0];\n        this.file.items = this.toJS(false, false);\n        print(\"AFTER CHANGED\");\n        //console.dump(this.file.items);\n        this.file.save();\n        this.currentTree = this.file.items[0];\n        //console.log(this.file.toSource());\n        \n        if (refresh) {\n            print(\"REDNER BROWSER?!\");\n            this.get('/LeftTree').renderView();\n\n            var pm = this.get('/RightPalete.model');\n            if (!this.get('/RightPalete').provider) {\n                pm.load([]);\n                return;\n            }\n            \n            \n            pm.load( this.get('/RightPalete').provider.gatherList(this.listAllTypes()));\n            //imports['Builder/RightBrowser.js'].renderJS(this.toJS());\n        }\n\t          \n}\n",
                                                                                    "|deleteSelected": "function() {\n    this.get('/LeftTree.view').blockChanges = true;\n    var old_iter = new Gtk.TreeIter();\n    var s = this.get('/LeftTree.view').selection;\n    s.get_selected(this.el, old_iter);\n    var path = this.el.get_path(old_iter).to_string();\n\n    this.activePath= false;      \n    s.unselect_all();\n\n    this.activePath= false;      \n     var iter = new Gtk.TreeIter();\n    this.el.get_iter_from_string(iter, path);\n    this.el.remove(iter);\n    \n    // rebuild treemap. -- depreciated.!!\n    this.map = {};\n    this.treemap = { };\n    //this.toJS(null, true) // does not do anything?\n    this.activePath= false;      \n    this.changed(false,true);\n    this.get('/LeftTree.view').blockChanges = false;\n}\n",
                                                                                    "|dropNode": "function(target_data, node) {\n         print(\"drop Node\");\n     // console.dump(node);\n  //    console.dump(target_data);\n        var tp = target_data[0].length ? new  Gtk.TreePath.from_string( target_data[0] ) : false;\n        \n        print(\"add \" + tp + \"@\" + target_data[1]  );\n        var parent = tp;\n        var after = false;\n        if (tp && target_data[1]  < 2) { // before or after..\n            var ar = target_data[0].split(':');\n            ar.pop();\n            parent  = new  Gtk.TreePath.from_string( ar.join(':') );\n            after = tp;\n        }\n        var n_iter = new Gtk.TreeIter();\n        var iter_par = new Gtk.TreeIter();\n        var iter_after = after ? new Gtk.TreeIter() : false;\n        \n        \n        \n        if (parent !== false) {\n            this.el.get_iter(iter_par, parent);\n        } else {\n            iter_par = null;\n        }\n        \n        \n        if (tp && after) {\n            print(target_data[1]  > 0 ? 'insert_after' : 'insert_before');\n            this.el.get_iter(iter_after, after);\n            this.el[ target_data[1]  > 0 ? 'insert_after' : 'insert_before'](\n                    n_iter, iter_par, iter_after);\n            \n        } else {\n            this.el.append(n_iter, iter_par);\n            \n        }\n        \n        if (typeof(node) == 'string') {\n            var ar = node.split('.');\n            var xtype = ar.pop();\n            \n            node = {\n                '|xns' : ar.join('.'),\n                'xtype' : xtype\n            };\n            if (target_data.length == 3 && target_data[2].length) {\n                node['*prop'] = target_data[2];\n            }\n            node = this.get('/DialogTemplateSelect').show(node);\n            \n        }\n        // work out what kind of packing to use..\n        if (typeof(node.pack) == 'undefined'  && parent !== false) {\n            var pal = this.get('/LeftTree').getPaleteProvider();\n            if (pal.name == 'Gtk') {\n                var pname = pal.guessName(this.singleNodeToJS(parent.to_string()));\n                var cname = pal.guessName(node);\n                node.pack = pal.getDefaultPack(pname, cname);\n            }\n            \n        }\n        \n        \n        var xitems = [];\n        if (node.items) {\n            xitems = node.items;\n            delete node.items;\n        }\n// load children - if it has any..\n\n        if (xitems) {\n            this.load(xitems, n_iter);\n            this.get('/LeftTree.view').el.expand_row(this.el.get_path(n_iter), true);\n        }\n        if (tp && (xitems || after)) {\n            this.get('/LeftTree.view').el.expand_row(this.el.get_path(iter_par), true);\n        }\n        // wee need to get the empty proptypes from somewhere..\n        \n        //var olditer = this.activeIter;\n        this.activePath = this.el.get_path(n_iter).to_string();\n\n  // changed actually set's the node data..\n        this.changed(node, true);\n        \n        \n        \n        this.get('/LeftTree.view').el.set_cursor(this.el.get_path(n_iter), null, false);\n        \n        //Builder.MidPropTree._model.load(node);\n        //Builder.MidPropTree._win.hideWin();\n        //Builder.LeftPanel._model.load( node);\n        \n            \n}\n",
                                                                                    "|findDropNode": "function(treepath_str, targets) {\n\n// this is used by the dragdrop code in the roo version AFAIR..\n\n    \t\tvar path = treepath_str.replace(/^builder-/, '');\n            // treemap is depreciated... - should really check if model has any entries..\n\n            if (!this.el.iter_n_children(null)) {\n                print(\"NO KEYS\");\n                return [ '',  Gtk.TreeViewDropPosition.INTO_OR_AFTER];\n            }\n            print(\"FIND treepath: \" + path);\n            //console.dump(this.treemap);\n            \n            if (!treepath_str.match(/^builder-/)) {\n                return []; // nothing!\n            }\n            if (targets === true) {\n                return [ path ];\n            }\n            return this.findDropNodeByPath(path,targets) \n}\n",
                                                                                    "|findDropNodeByPath": "function(treepath_str, targets, pref) {\n    var path = treepath_str + ''; // dupe it..\n    pref = typeof(pref) == 'undefined' ?  Gtk.TreeViewDropPosition.INTO_OR_AFTER : pref;\n    var last = false;\n    //console.dump(this.treemap);\n    while (path.length) {\n        print(\"LOOKING FOR PATH: \" + path);\n        var node_data = this.singleNodeToJS(path);\n        if (node_data === false) {\n            print(\"node not found\");\n            return [];\n        }\n        \n        var xname = this.get('/LeftTree.model').file.guessName(node_data);\n        var match = false;\n        var prop = '';\n        targets.forEach(function(tg) {\n            if (match) {\n                return;;\n            }\n            if ((tg == xname)  ) {\n                match = tg;\n            }\n            if (tg.indexOf(xname +':') === 0) {\n                match = tg;\n                prop = tg.split(':').pop();\n            }\n        });\n        \n        if (match) {\n            if (last) { // pref is after/before..\n                // then it's after last\n                if (pref > 1) {\n                    return []; // do not allow..\n                }\n                return [ last, pref , prop];\n                \n            }\n            return [ path , Gtk.TreeViewDropPosition.INTO_OR_AFTER , prop];\n        }\n        var par = path.split(':');\n        last = path;\n        par.pop();\n        path = par.join(':');\n    }\n    \n    return [];\n            \n}\n",
                                                                                    "|getIterValue": " function (iter, col) {\n    var gval = new GObject.Value('');\n    this.el.get_value(iter, col ,gval);\n    return  gval.value;\n    \n    \n}",
                                                                                    "|init": "function() {\n    XObject.prototype.init.call(this);\n this.el.set_column_types ( 3, [\n            GObject.TYPE_STRING, // title \n            GObject.TYPE_STRING, // tip\n            GObject.TYPE_STRING // source..\n            ] );\n}\n",
                                                                                    "|listAllTypes": "function() {\n    var s = this.get('/LeftTree.view').selection;\n    print (\"LIST ALL TYPES: \" + s.count_selected_rows() );\n    \n    if (s.count_selected_rows() > 0) {\n        var iter = new Gtk.TreeIter();    \n        s.get_selected(this.el, iter);\n\n        // set some properties of the tree for use by the dropped element.\n        var value = new GObject.Value('');\n        this.el.get_value(iter, 2, value);\n        var data = JSON.parse(value.value);\n        \n        \n        var xname = this.get('/LeftTree.model').file.guessName(data);\n        console.log('selected:' + xname);\n        if (xname.length) {\n            return [ xname ];\n        }\n        return []; // could not find it..\n    }\n    \n    var ret = [ ];\n    \n   var _this = this;\n    function addall(li)\n    {\n        li.forEach(function(el) {\n            // this is specific to roo!!!?\n            if (!el) { // skip empty?\n                return;\n            }\n            var fullpath =  _this.file.guessName(el);\n            if (fullpath.length && ret.indexOf(fullpath) < 0) {\n                ret.push(fullpath);\n            }\n            \n            \n            if (el.items && el.items.length) {\n                addall(el.items);\n            }\n            \n        });\n        \n        \n    }\n    \n    addall([this.currentTree]);\n    \n    // only if we have nothing, should we add '*top'\n    if (!ret.length) {\n        ret = [ '*top' ];\n    }\n    //console.log('all types in tree');\n    //console.dump(ret);\n    \n    return ret;\n                            \n}\n",
                                                                                    "|load": "function(tr,iter)\n        {\n            var citer = new Gtk.TreeIter();\n            //this.insert(citer,iter,0);\n            for(var i =0 ; i < tr.length; i++) {\n                if (iter) {\n                    this.el.insert(citer,iter,-1);\n                } else {\n                    this.el.append(citer);\n                }\n                \n                this.el.set_value(citer, 0, [GObject.TYPE_STRING, this.nodeTitle(tr[i]) ]);\n                this.el.set_value(citer, 1, [GObject.TYPE_STRING, this.nodeTip(tr[i]) ]);\n                this.el.set_value(citer, 2, [GObject.TYPE_STRING, this.nodeToJSON(tr[i])]);\n                if (tr[i].items && tr[i].items.length) {\n                    this.load(tr[i].items, citer);\n                }\n            }     \n        }",
                                                                                    "|loadFile": "function(f) {\n    //console.dump(f);\n            this.el.clear();\n            this.file = f;\n            \n            if (!f) {\n                console.log('missing file');\n                return;\n            }\n            \n            // load the file if not loaded..\n            if (f.items === false) {\n                var _this = this;\n                f.loadItems(function() {\n                    _this.loadFile(f);\n                });\n                return;\n                \n            }\n            this.get('/Window').setTitle(f.project.getName() + ' - ' + f.name);\n            \n            if (f.items.length && typeof(f.items[0]) == 'string') {\n            \n                this.get('/RightEditor').el.show();\n                this.get('/RightEditor.view').load( f.items[0]);\n                return;\n            }\n            print(\"LOAD\");\n            print(JSON.stringify(f.items, null,4));\n            //console.dump(f.items);\n            this.load(f.items);\n            this.get('/LeftTree.view').el.expand_all();\n\n            if (!f.items.length) {\n                // single item..\n                \n                this.get('/Window.leftvpaned').el.set_position(80);\n                // select first...\n                this.get('/LeftTree.view').el.set_cursor( \n                    new  Gtk.TreePath.from_string('0'), null, false);\n                \n                \n            } else {\n                  this.get('/Window.leftvpaned').el.set_position(200);\n            }\n            \n            \n            //print(\"hide right editior\");\n            this.get('/RightEditor').el.hide();\n            //print(\"set current tree\");\n            this.currentTree = this.toJS(false, false)[0];\n            //console.dump(this.currentTree);\n            this.currentTree = this.currentTree || { items: [] };\n            this.get('/LeftTree').renderView();\n            //console.dump(this.map);\n            //var RightPalete     = imports.Builder.RightPalete.RightPalete;\n            var pm = this.get('/RightPalete.model');\n            // set up provider..\n            \n            this.get('/RightPalete').provider = this.get('/LeftTree').getPaleteProvider();\n            \n            if (!this.get('/RightPalete').provider) {\n                print (\"********* PALETE PROVIDER MISSING?!!\");\n            }\n            this.get('/LeftTree').renderView();\n            \n            pm.load( this.get('/LeftTree').getPaleteProvider().gatherList(this.listAllTypes()));\n            \n            \n                    \n            this.get('/Window.view-notebook').el.set_current_page(\n                this.get('/LeftTree.model').file.getType()== 'Roo' ? 0 : -1);\n                    \n}\n",
                                                                                    "|moveNode": "function(target_data, action) {\n     //print(\"MOVE NODE\");\n           // console.dump(target_data);\n            var old_iter = new Gtk.TreeIter();\n            var s = this.get('/LeftTree.view').selection;\n            s.get_selected(this.el, old_iter);\n            var node = this.nodeToJS(old_iter,false);\n            //console.dump(node);\n            \n            \n            // needs to drop first, otherwise the target_data \n            // treepath will be invalid.\n            \n            this.dropNode(target_data, node);\n\t  if (action & Gdk.DragAction.MOVE) {\n                      //          print(\"REMOVING OLD NODE\");\n                                this.el.remove(old_iter);\n                                \n            }\n            \n            this.activePath= false;\n            this.changed(false,true);\n}\n",
                                                                                    "|nodeTip": "function(c) {\n    var ret = this.nodeTitle(c,true);\n    var funcs = '';\n\n    \n    for( var i in c) {\n\n        if (!i.length || i[0] != '|') {\n            continue;\n        }\n        if (i == '|init') { \n            continue;\n        }\n        if (typeof(c[i]) != 'string') {\n           continue;\n        }\n        //print(\"prop : \" + i + ':' + c[i]);\n        if (!c[i].match(new RegExp('function'))) {\n            continue;\n        }\n        funcs += \"\\n<b>\" + i.substring(1) + '</b> : ' + c[i].split(/\\n/).shift();\n            \n    }\n    if (funcs.length) {\n        ret+=\"\\n\\nMethods:\" + funcs;\n    }\n    return ret;\n    \n}\n",
                                                                                    "|nodeTitle": "function(c, renderfull) {\n      var txt = [];\n    c = c || {};\n    var sr = (typeof(c['+buildershow']) != 'undefined') &&  !c['+buildershow'] ? true : false;\n    if (sr) txt.push('<s>');\n    if (typeof(c['*prop']) != 'undefined')   { txt.push(c['*prop']+ ':'); }\n    \n    if (renderfull && c['|xns']) {\n        txt.push(c['|xns']);\n    }\n    \n    if (c.xtype)      { txt.push(c.xtype); }\n    if (c.id)      { txt.push('<b>[id=' + c.id + ']</b>'); }\n    if (c.fieldLabel) { txt.push('[' + c.fieldLabel + ']'); }\n    if (c.boxLabel)   { txt.push('[' + c.boxLabel + ']'); }\n    \n    \n    if (c.layout)     { txt.push('<i>' + c.layout + '</i>'); }\n    if (c.title)      { txt.push('<b>' + c.title + '</b>'); }\n    if (c.label)      { txt.push('<b>' + c.label+ '</b>'); }\n    if (c.header)    { txt.push('<b>' + c.header + '</b>'); }\n    if (c.legend)      { txt.push('<b>' + c.legend + '</b>'); }\n    if (c.text)       { txt.push('<b>' + c.text + '</b>'); }\n    if (c.name)       { txt.push('<b>' + c.name+ '</b>'); }\n    if (c.region)     { txt.push('<i>(' + c.region + ')</i>'); }\n    if (c.dataIndex) { txt.push('[' + c.dataIndex+ ']'); }\n    \n    // for flat classes...\n    if (typeof(c['*class']) != 'undefined')  { txt.push('<b>' +  c['*class']+  '</b>'); }\n    if (typeof(c['*extends']) != 'undefined')  { txt.push(': <i>' +  c['*extends']+  '</i>'); }\n    \n    \n    if (sr) txt.push('</s>');\n    return (txt.length == 0 ? \"Element\" : txt.join(\" \"));\n}\n",
                                                                                    "|nodeToJS": "function (treepath, with_id) \n{\n    \n    var iter = treepath;  // API used to be iter here..\n    if (typeof(iter) == 'string') {\n        iter = new Gtk.TreeIter(); \n        if (!this.el.get_iter(iter, new Gtk.TreePath.from_string(treepath))) {\n            return false;\n        }\n    } \n    var par = new Gtk.TreeIter(); \n    var iv = this.getIterValue(iter, 2);\n   // print(\"IV\" + iv);\n    var k = JSON.parse(iv);\n    if (k.json && !this.el.iter_parent( par, iter  )) {\n        delete k.json;\n    }\n    \n    if (with_id) {\n        var treepath_str = this.el.get_path(iter).to_string();\n        // not sure how we can handle mixed id stuff..\n        if (typeof(k.id) == 'undefined')  {\n            k.id =  'builder-'+ treepath_str ;\n        }\n        \n        // needed??\n        this.treemap[  treepath_str ] = k;\n        k.xtreepath = treepath_str ;\n        \n    }\n    if (this.el.iter_has_child(iter)) {\n        citer = new Gtk.TreeIter();\n        this.el.iter_children(citer, iter);\n        k.items = this.toJS(citer,with_id);\n    }\n    return k;\n}\n",
                                                                                    "|nodeToJSON": "function(c) {\n    var o  = {}\n    for (var i in c) {\n        if (i == 'items') {\n             continue;\n        }\n        o[i] = c[i];\n    }\n    return JSON.stringify(o);\n}\n",
                                                                                    "|singleNodeToJS": "function (treepath) \n        {\n            var iter = new Gtk.TreeIter(); \n            if (!this.el.get_iter(iter, new Gtk.TreePath.from_string(treepath))) {\n                return false;\n            }\n            \n            var iv = this.getIterValue(iter, 2);\n           \n            return JSON.parse(iv);\n            \n        }",
                                                                                    "|toJS": "function(treepath, with_id)\n{\n    //Seed.print(\"WITHID: \"+ with_id);\n    var iter = treepath;  // API used to be iter here..\n    if (typeof(iter) == 'string') {\n        iter = new Gtk.TreeIter(); \n        if (!this.el.get_iter(iter, new Gtk.TreePath.from_string(treepath))) {\n            return false;\n        }\n    } \n    var first = false;\n    if (!iter) {\n        \n        this.treemap = { }; \n        \n        iter = new Gtk.TreeIter();\n        if (!this.el.get_iter_first(iter)) {\n            return [];\n        }\n        first = true;\n    } \n    \n    var ar = [];\n       \n    while (true) {\n        \n        var k = this.nodeToJS(iter, with_id); \n        ar.push(k);\n        \n        \n        if (!this.el.iter_next(iter)) {\n            break;\n        }\n    }\n    \n    if (treepath === false) {\n        //dupe!!!\n        return JSON.parse(JSON.stringify(ar));\n    }\n    \n    return ar;\n    // convert the list into a json string..\n\n    \n}",
                                                                                    "|xns": "Gtk"
                                                                                },
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "TreeViewColumn",
                                                                                    "pack": "append_column",
                                                                                    "|init": "function() {\n    XObject.prototype.init.call(this);\n   this.el.add_attribute(this.items[0].el , 'markup', 0 );\n}\n",
                                                                                    "items": [
                                                                                        {
                                                                                            "|xns": "Gtk",
                                                                                            "xtype": "CellRendererText",
                                                                                            "pack": "pack_start"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "|xns": "Gtk",
                                                                            "xtype": "Menu",
                                                                            "pack": false,
                                                                            "id": "LeftTreeMenu",
                                                                            "items": [
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "MenuItem",
                                                                                    "pack": "add",
                                                                                    "label": "Delete Element",
                                                                                    "listeners": {
                                                                                        "activate": "function (self) {\n\n     this.get('/LeftTree.model').deleteSelected();\n}"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "listeners": {
                                                                                        "activate": "function (self) {\n\n     var tree = this.get('/LeftTree');\n      var model = this.get('/LeftTree.model');\n     var el = tree.getActivePath();\n     print(el);\n     var js = model.toJS(el, false);\n    // print(JSON.stringify(js[0], null,4));\n     this.get('/DialogSaveTemplate').show(JSON.stringify(js[0], null,4));\n     \n    \n}"
                                                                                    },
                                                                                    "label": "Save as Template",
                                                                                    "pack": "add",
                                                                                    "xtype": "MenuItem",
                                                                                    "|xns": "Gtk"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "|xns": "Gtk",
                                                                    "xtype": "VBox",
                                                                    "pack": "add",
                                                                    "id": "LeftProjectTree",
                                                                    "|showNoProjectSelected": "function() {\n   this.get('/StandardErrorDialog').show(\"Select a Project first.\"); \n}\n",
                                                                    "|getActiveProject": "function() {\n     return this.project;\n}\n",
                                                                    "listeners": {
                                                                        "leave_notify_event": "function (self, event) {\n    return false;\n}"
                                                                    },
                                                                    "items": [
                                                                        {
                                                                            "|xns": "Gtk",
                                                                            "xtype": "HBox",
                                                                            "pack": "pack_start,false,false",
                                                                            "items": [
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "ComboBox",
                                                                                    "id": "combo",
                                                                                    "|init": "function() {\n    XObject.prototype.init.call(this);\n    this.el.add_attribute(this.get('render').el , 'markup', 1 );  \n}\n",
                                                                                    "|getValue": "function() {\n    var ix = this.el.get_active();\n    if (ix < 0 ) {\n        return false;\n    }\n    var data = imports.Builder.Provider.ProjectManager.ProjectManager.projects;\n    if (typeof(data[ix]) == 'undefined') {\n \treturn false; \n    }\n    return data[ix].fn;\n}",
                                                                                    "|setValue": "function(fn)\n{\n    var el = this.el;\n    el.set_active(-1);\n    var data = imports.Builder.Provider.ProjectManager.ProjectManager.projects;\n    data.forEach(function(n, ix) {\n        if (fn == n.fn) {\n            el.set_active(ix);\n            return false;\n        }\n    });\n}\n",
                                                                                    "listeners": {
                                                                                        "changed": "function (self) {\n\tvar fn = this.getValue();\n\tvar pm  = imports.Builder.Provider.ProjectManager.ProjectManager;\n\tthis.get('/LeftProjectTree.model').loadProject(pm.getByFn(fn))\n}"
                                                                                    },
                                                                                    "items": [
                                                                                        {
                                                                                            "|xns": "Gtk",
                                                                                            "xtype": "CellRendererText",
                                                                                            "pack": "pack_start,true",
                                                                                            "id": "render"
                                                                                        },
                                                                                        {
                                                                                            "|xns": "Gtk",
                                                                                            "xtype": "ListStore",
                                                                                            "pack": "set_model",
                                                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n  this.el.set_column_types ( 2, [\n        GObject.TYPE_STRING,  // real key\n        GObject.TYPE_STRING // real type\n        \n        \n    ] );\n   var pm = imports.Builder.Provider.ProjectManager.ProjectManager;\n   var _this = this;\n   pm.on('changed', function() {\n       print(\"caught changed hook on project manager - reloading data\");\n\t_this.loadData(pm.projects);\n\n   });\n}\n",
                                                                                            "|loadData": "function(data) {\n     var ov = this.get('/LeftProjectTree.combo').getValue();\n    this.el.clear();\n    var iter = new Gtk.TreeIter();\n    var el = this.el;\n    data.forEach(function(p) {\n        \n        el.append(iter);\n        \n         \n        el.set_value(iter, 0, p.fn);\n        el.set_value(iter, 1, p.name);\n        \n    });\n    \n    this.get('/LeftProjectTree.combo').setValue(ov);\n}\n",
                                                                                            "id": "combomodel"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "|xns": "Gtk",
                                                                            "xtype": "ScrolledWindow",
                                                                            "pack": "add",
                                                                            "|shadow_type": "Gtk.ShadowType.IN",
                                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n    this.el.set_policy  (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC );\n}\n",
                                                                            "items": [
                                                                                {
                                                                                    "listeners": {
                                                                                        "cursor_changed": "function (self) {\n \tvar iter = new Gtk.TreeIter();\n                                \n        if (this.selection.count_selected_rows() < 1) {\n            //XN.get('Builder.LeftTree.model').\n            this.get('/LeftTree.model').load( false);\n            \n            return;\n        }\n        var model = this.get('/LeftProjectTree.model');\n        //console.log('changed');\n        var s = this.selection;\n        s.get_selected(model, iter);\n        value = new GObject.Value('');\n        model.el.get_value(iter, 2, value);\n        \n        console.log(value.value);// id..\n        \n        var file = this.get('/LeftProjectTree').project.getById(value.value);\n        \n        file.items = false;\n        console.log(file);\n        \n\n\n        var nb = this.get('/LeftTopPanel.expander');\n        nb.el.expanded = false;\n        nb.listeners.activate.call(nb);\n        //_expander.el.set_expanded(false);\n\n        var ltm = this.get('/LeftTree.model');\n        ltm.loadFile(file);\n        \n        return true;\n}"
                                                                                    },
                                                                                    "id": "view",
                                                                                    "tooltip_column": 1,
                                                                                    "xtype": "TreeView",
                                                                                    "|enable_tree_lines": true,
                                                                                    "|headers_visible": false,
                                                                                    "|init": "function() {\n    XObject.prototype.init.call(this);\nvar description = new Pango.FontDescription.c_new();\n                            description.set_size(8000);\n                            this.el.modify_font(description);\n                            \n                            this.selection = this.el.get_selection();\n                            this.selection.set_mode( Gtk.SelectionMode.SINGLE);\n}\n",
                                                                                    "|xns": "Gtk",
                                                                                    "items": [
                                                                                        {
                                                                                            "|xns": "Gtk",
                                                                                            "xtype": "TreeStore",
                                                                                            "pack": "set_model",
                                                                                            "id": "model",
                                                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n  this.el.set_column_types ( 3, [\n                    GObject.TYPE_STRING, // title \n                    GObject.TYPE_STRING, // tip\n                    GObject.TYPE_STRING // id..\n                    ] );\n   \n}\n",
                                                                                            "|loadProject": "function(pr) {\nprint(\"LOAD PROJECT\");\n           this.el.clear();\n            if (!pr) {\n                return;\n            }\n            \n            this.get('/LeftProjectTree').project = pr;\n            this.load(pr.toTree());\n            this.get('/LeftProjectTree.view').el.expand_all();\n}\n",
                                                                                            "|load": "function(tr,iter) {\n  //  console.dump(tr);\n            console.log('Project tree load: ' + tr.length);\n            var citer = new Gtk.TreeIter();\n            //this.insert(citer,iter,0);\n            \n            var _this = this;\n            tr.forEach(function (r) {\n                if (!iter) {\n                    _this.el.append(citer);   \n                } else {\n                    _this.el.insert(citer,iter,-1);\n                }\n                _this.el.set_value(citer, 0,  '' + r.getTitle() ); // title \n                _this.el.set_value(citer, 1, '' + r.getTitleTip()); // tip\n                _this.el.set_value(citer, 2, '' + r.id ); //id\n                if (r.cn && r.cn.length) {\n                    _this.load(r.cn, citer);\n                }\n                \n            });\n}\n",
                                                                                            "|getValue": "function(iter, col) {\n    var gval = new GObject.Value('');\n    this.el.get_value(iter, col ,gval);\n    return  '' + gval.value;\n}\n"
                                                                                        },
                                                                                        {
                                                                                            "|xns": "Gtk",
                                                                                            "xtype": "TreeViewColumn",
                                                                                            "pack": "append_column",
                                                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n    this.el.add_attribute(this.items[0].el , 'markup', 0 );\n}\n",
                                                                                            "items": [
                                                                                                {
                                                                                                    "|xns": "Gtk",
                                                                                                    "xtype": "CellRendererText",
                                                                                                    "pack": "pack_start"
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "|xns": "Gtk",
                                                    "xtype": "VBox",
                                                    "listeners": {},
                                                    "items": [
                                                        {
                                                            "|xns": "Gtk",
                                                            "xtype": "HBox",
                                                            "pack": "pack_start,false,true,0",
                                                            "id": "LeftProps",
                                                            "items": [
                                                                {
                                                                    "|xns": "Gtk",
                                                                    "xtype": "Button",
                                                                    "pack": "add",
                                                                    "listeners": {
                                                                        "button_press_event": "function (self, event) {\n    this.get('/MidPropTree.model').showData('props');\n    return false;\n}"
                                                                    },
                                                                    "items": [
                                                                        {
                                                                            "|xns": "Gtk",
                                                                            "xtype": "HBox",
                                                                            "pack": "add",
                                                                            "items": [
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "Image",
                                                                                    "pack": "add",
                                                                                    "|stock": "Gtk.STOCK_ADD",
                                                                                    "|icon_size": "Gtk.IconSize.MENU"
                                                                                },
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "Label",
                                                                                    "pack": "add",
                                                                                    "label": "Property"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "|xns": "Gtk",
                                                                    "xtype": "Button",
                                                                    "pack": "add",
                                                                    "listeners": {
                                                                        "button_press_event": "function (self, event) {\n    this.get('/MidPropTree.model').showData('events');\n    return false;\n}"
                                                                    },
                                                                    "items": [
                                                                        {
                                                                            "|xns": "Gtk",
                                                                            "xtype": "HBox",
                                                                            "pack": "add",
                                                                            "items": [
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "Image",
                                                                                    "pack": "add",
                                                                                    "|stock": "Gtk.STOCK_ADD",
                                                                                    "|icon_size": "Gtk.IconSize.MENU"
                                                                                },
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "Label",
                                                                                    "pack": "add",
                                                                                    "label": "Handler"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "|xns": "Gtk",
                                                                    "xtype": "Button",
                                                                    "pack": "add",
                                                                    "listeners": {
                                                                        "button_press_event": "function (self, ev) {\n\tvar p = this.get('/AddPropertyPopup');\n\tif (!p.el) {\n\t\tp.init();\n\t}\n \tp.el.set_screen(Gdk.Screen.get_default());\n        p.el.show_all();\n         p.el.popup(null, null, null, null, 3, ev.button.time);\n    return true;\n}"
                                                                    },
                                                                    "items": [
                                                                        {
                                                                            "|xns": "Gtk",
                                                                            "xtype": "HBox",
                                                                            "pack": "add",
                                                                            "items": [
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "Image",
                                                                                    "pack": "add",
                                                                                    "|stock": "Gtk.STOCK_ADD",
                                                                                    "|icon_size": "Gtk.IconSize.MENU"
                                                                                },
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "Label",
                                                                                    "pack": "add",
                                                                                    "label": "Other"
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "|xns": "Gtk",
                                                                            "xtype": "Menu",
                                                                            "pack": false,
                                                                            "id": "AddPropertyPopup",
                                                                            "items": [
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "MenuItem",
                                                                                    "pack": "append",
                                                                                    "tooltip_markup": "Using this.get('*someid') will find any id in an application.",
                                                                                    "label": "ID",
                                                                                    "listeners": {
                                                                                        "activate": "function (self) {\n\n    this.get('/LeftPanel.model').add( {\n        key : 'id', \n        type : 'string',\n        val : '',\n        //skel  : skel,\n        etype : 'props'\n    });\n}"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "MenuItem",
                                                                                    "pack": "append",
                                                                                    "tooltip_markup": "Add what type of packing is to be used",
                                                                                    "label": "PACK",
                                                                                    "listeners": {
                                                                                        "activate": "function (self) {\n\n    this.get('/LeftPanel.model').add( {\n    \t key : 'pack', \n       \t type : 'string',\n       \t val : 'add',\n          etype : 'props'\n    });\n}"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "MenuItem",
                                                                                    "pack": "append",
                                                                                    "tooltip_markup": "Override the init method",
                                                                                    "label": "INIT",
                                                                                    "listeners": {
                                                                                        "activate": "function (self) {\n\n    this.get('/LeftPanel.model').add( {\n       key : '|init', \n        type : 'function',\n        val  : \"function() {\\n    XObject.prototype.init.call(this);\\n}\\n\",\n        etype : 'props'\n    });\n}"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "SeparatorMenuItem",
                                                                                    "pack": "add"
                                                                                },
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "MenuItem",
                                                                                    "pack": "append",
                                                                                    "tooltip_markup": "Add a user defined string property",
                                                                                    "label": "String",
                                                                                    "listeners": {
                                                                                        "activate": "function (self) {\n\n    this.get('/LeftPanel.model').add( {\n  \t\t  key : '', \n                type : 'string',\n                val  : \"\",\n                etype : 'props'\n    });\n}"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "MenuItem",
                                                                                    "pack": "append",
                                                                                    "tooltip_markup": "Add a user defined number property",
                                                                                    "label": "Number",
                                                                                    "listeners": {
                                                                                        "activate": "function (self) {\n\n    this.get('/LeftPanel.model').add( {\n  \t\t  key : '', \n                type : 'number',\n                val  : 0,\n                etype : 'props'\n    });\n}"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "MenuItem",
                                                                                    "pack": "append",
                                                                                    "tooltip_markup": "Add a user defined boolean property",
                                                                                    "label": "Boolean",
                                                                                    "listeners": {
                                                                                        "activate": "function (self) {\n\n    this.get('/LeftPanel.model').add( {\n  \t\t  key : '', \n                type : 'boolean',\n                val  : false,\n                etype : 'props'\n    });\n}"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "SeparatorMenuItem",
                                                                                    "pack": "add"
                                                                                },
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "MenuItem",
                                                                                    "pack": "append",
                                                                                    "tooltip_markup": "Add a user function boolean property",
                                                                                    "label": "Function",
                                                                                    "listeners": {
                                                                                        "activate": "function (self) {\n\n    this.get('/LeftPanel.model').add( {\n  \t    key : '|', \n                        type : 'function',\n                        val  : \"function() {\\n    \\n}\\n\",\n                        etype : 'props'\n    });\n}"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "|xns": "Gtk",
                                                            "xtype": "ScrolledWindow",
                                                            "id": "LeftPanel",
                                                            "pack": "add",
                                                            "|shadow_type": "Gtk.ShadowType.IN",
                                                            "editing": false,
                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n   this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n}\n",
                                                            "items": [
                                                                {
                                                                    "|xns": "Gtk",
                                                                    "xtype": "TreeView",
                                                                    "id": "view",
                                                                    "tooltip_column": 5,
                                                                    "|headers_visible": false,
                                                                    "|enable_tree_lines": true,
                                                                    "|init": "function() {\n     XObject.prototype.init.call(this); \n                       \n                    this.selection = this.el.get_selection();\n                    this.selection.set_mode( Gtk.SelectionMode.SINGLE);\n                 \n                    \n                    var description = new Pango.FontDescription.c_new();\n                    description.set_size(8000);\n                    this.el.modify_font(description);\n}\n",
                                                                    "listeners": {
                                                                        "button_press_event": "function (self, ev) {\n    \n                \n                var res = { }; \n                if (!this.el.get_path_at_pos(ev.button.x,ev.button.y, res)) {\n                    return false; //not on a element.\n                }\n                \n                \n                if (ev.type != Gdk.EventType.BUTTON_PRESS  || ev.button.button != 3) {\n                    \n                    if (res.column.title != 'value') {\n                        return false; // ignore..\n                    }\n                    if (  this.get('/LeftPanel').editing) {\n                        return false;\n                    }\n                    var renderer = this.get('/LeftPanel').editableColumn.items[0].el; // set has_entry..\n                    this.get('/LeftPanel').editableColumn.items[0].el.stop_editing();\n                    var type = this.get('/LeftPanel.model').getType(res.path.to_string());\n                    \n                     \n\n                    var provider = this.get('/LeftTree').getPaleteProvider();\n                    \n                    var opts = provider.findOptions(type);\n                    \n                    if (opts === false) {\n                         this.get('/LeftPanel').editableColumn.setOptions([]);\n                        renderer.has_entry = true;\n                    } else {\n                        LeftPanel.editableColumn.setOptions(opts);\n                        renderer.has_entry = false;\n                    }\n                    \n                    \n                   //Seed.print(\"click\" + ev.type);\n                    //console.dump(res);\n                    return false;\n                }\n              \n            \n               \n                if (res.column.title == 'value') {\n                    return false;\n                }\n                //if (! this.get('/LeftPanelPopup')LeftPanelPopup.el) LeftPanelPopup.init();\n\t\tvar p = this.get('/LeftPanelPopup');\n\t\tif (!p.el) {\n\t\t\tp.init();\n\t\t}\n\n                p.el.set_screen(Gdk.Screen.get_default());\n                p.el.show_all();\n                p.el.popup(null, null, null, null, 3, ev.button.time);\n                //Seed.print(\"click:\" + res.column.title);\n                \n                \n                return false;\n}"
                                                                    },
                                                                    "items": [
                                                                        {
                                                                            "activePath": false,
                                                                            "id": "model",
                                                                            "pack": "set_model",
                                                                            "xtype": "TreeStore",
                                                                            "|add": "function(info) {\n      // info includes key, val, skel, etype..\n              console.dump(info);\n            type = info.type.toLowerCase();\n            var data = this.toJS();\n            \n            if (info.etype == 'events') {\n                data.listeners = data.listeners || { };\n                if (typeof(data.listeners[info.key]) != 'undefined') {\n                    return; //already set!\n                }\n            } else {\n                if (typeof(data[info.key]) != 'undefined') {\n                    return;\n                }\n            }\n            \n            if (typeof(info.val) == 'undefined') {\n                    \n                info.val = '';\n                if (info.type.toLowerCase() == 'boolean') {\n                    info.val = true;\n                }\n                if (type == 'number') {\n                    info.val = 0;\n                }\n                // utf8 == string..\n                \n                \n            }\n            var k = info.key;\n            if (info.etype == 'events') {\n             \n                data.listeners[info.key] = info.val;\n                k = '!' + info.key;\n            } else {\n                data[info.key] = info.val;\n            }\n            \n            \n            var map = this.load(data);\n            \n            // flag it as changed to the interface..\n\n            this.get('/LeftTree.model').changed(data, true); \n            \n            \n            this.startEditing(map[k]);\n             \n            /*\n            LeftPanel.get('view').el.row_activated(\n                new Gtk.TreePath.from_string(map[k]), \n                LeftPanel.editableColumn.el\n            );\n            */\n}\n",
                                                                            "|changed": "function(str, doRefresh) {\n    if (!this.activePath) {\n        return;\n    }\n    var iter = new Gtk.TreeIter();\n    this.el.get_iter(iter, new Gtk.TreePath.from_string(this.activePath));\n    \n    this.el.set_value(iter, 1, '' +str);\n    this.el.set_value(iter, 3, '' + this.toShort(str));\n    var type = this.getIterValue(iter, 4);\n\n    this.el.set_value(iter, 5, type + ' : ' + str);\n    // update the tree...  \n\n    this.get('/LeftTree.model').changed(this.toJS(), doRefresh); \n}\n",
                                                                            "|deleteSelected": "function() {\n     var data = this.toJS();\n    var iter = new Gtk.TreeIter();\n    var s = this.get('/LeftPanel.view').selection;\n    s.get_selected(this.el, iter);\n         \n       \n    var gval = new GObject.Value('');\n   this.get('/LeftPanel.model').el.get_value(iter, 0 ,gval);\n    \n    var val = gval.value;\n    if (val[0] == '!') {\n        // listener..\n        if (!data.listeners || typeof(data.listeners[  val.substring(1)]) == 'undefined') {\n            return;\n        }\n        delete data.listeners[  val.substring(1)];\n        if (!XObject.keys(data.listeners).length) {\n            delete data.listeners;\n        }\n        \n    } else {\n        if (typeof(data[val]) == 'undefined') {\n            return;\n        }\n        delete data[val];\n    }\n    \n    \n    this.load(data);\n    this.get('/LeftTree.model').changed(data, true);\n    \n}\n",
                                                                            "|editSelected": "function(e) {\n    print(\"EDIT SELECTED?\");\n    var iter = new Gtk.TreeIter();\n    var s = this.get('/LeftPanel.view').selection;\n    s.get_selected(this.get('/LeftPanel.model').el, iter);\n    var m = this.get('/LeftPanel.model')\n   \n    var gval = new GObject.Value('');\n    this.el.get_value(iter, 0 ,gval);\n    var val = '' + gval.value;\n    \n    gval = new GObject.Value('');\n    this.el.get_value(iter, 1 ,gval);\n    var rval = gval.value;\n    var activePath = this.el.get_path(iter).to_string(); \n    this.activePath = activePath ;\n    // was activeIter...\n    //  not listener...\n\n    var showEditor = false;\n    \n    if (val[0] == '!') {\n        showEditor = true;\n    }\n    if (val[0] == '|') {\n        if (rval.match(/function/g) || rval.match(/\\n/g) || rval.length > 20) {\n            showEditor = true;\n        }\n    }\n    \n    if (showEditor) {\n        var _this = this;\n        this.activePath = false;\n        GLib.timeout_add(0, 1, function() {\n            //   Gdk.threads_enter();\n            _this.get('/BottomPane').el.show();\n            _this.get('/RightEditor').el.show();\n            _this.get('/RightEditor.view').load( rval );\n            \n            e.editing_done();\n            e.remove_widget();\n            _this.activePath = activePath ;\n            \n     //       Gdk.threads_leave();\n            return false;\n        });\n        return;\n    }\n      this.get('/BottomPane').el.hide();\n    this.get('/RightEditor').el.hide();\n\n        //var type = this.getValue(this.el.get_path(iter).to_string(),4);\n        \n        \n}\n",
                                                                            "|getIterValue": "function(iter, col) {\n     var gval = new GObject.Value('');\n    this.get('/LeftPanel.model').el.get_value(iter, col ,gval);\n    return '' + gval.value;\n}\n",
                                                                            "|getType": "function(treepath) {\n     return this.getValue(treepath, 4);\n}\n",
                                                                            "|getValue": "function(treepath_str, col) {\n      var iter = new Gtk.TreeIter();\n    this.el.get_iter(iter, new Gtk.TreePath.from_string(treepath_str));\n    \n    var gval = new GObject.Value('');\n    this.get('/LeftPanel.model').el.get_value(iter, col ,gval);\n    var val = '' + gval.value;\n    if (col != 1) {\n        return val;\n    }\n    var type = this.getType(this.el.get_path(iter).to_string());\n    print(\"TYPE: \" +type + \" -  val:\" + val);\n    switch(type.toLowerCase()) {\n        case 'number':\n        case 'uint':\n        case 'int':\n            return parseFloat(val); // Nan ?? invalid!!?        \n        case 'float':\n        case 'gfloat':\n            return 1.0 * parseFloat(val); // Nan ?? invalid!!?\n        case 'boolean':\n            return val == 'true' ? true : false;\n        default: \n            var nv = parseFloat(val);\n            if (!isNaN(nv) && (val == ''+nv)) {\n                return nv;\n            }\n            return val;\n    }\n                            \n}\n",
                                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\nthis.el.set_column_types ( 6, [\n                                GObject.TYPE_STRING,  // 0 real key\n                                GObject.TYPE_STRING, // 1 real value \n                                 GObject.TYPE_STRING,  // 2 visable key\n                                 GObject.TYPE_STRING, // 3 visable value\n                                 GObject.TYPE_STRING, // 4 need to store type of!!!\n                                  GObject.TYPE_STRING // 5 tooltip\n                              \n                            ]);\n}\n",
                                                                            "|load": "function(ar) {\n  this.el.clear();\n                        \n    this.get('/RightEditor').el.hide();\n    if (ar === false) {\n        return ;\n    }\n    var ret = {}; \n    \n\n    var provider = this.get('/LeftTree').getPaleteProvider();\n     var iter = new Gtk.TreeIter();\n     \n    // sort!!!?\n    var keys  = XObject.keys(ar);\n    keys.sort();\n    ar.listeners = ar.listeners || {};\n    \n    for (var i in ar.listeners ) {\n        this.el.append(iter);\n        var p = this.el.get_path(iter).to_string();\n        ret['!' + i] = p;\n        \n        this.el.set_value(iter, 0, '!'+  i  );\n        this.el.set_value(iter, 1, '' + ar.listeners[i]);\n        this.el.set_value(iter, 2, '<b>'+ i + '</b>');\n        \n        this.el.set_value(iter, 3, '' + this.toShort(ar.listeners[i]));\n        this.el.set_value(iter, 4, 'function');\n        this.el.set_value(iter, 5, i + ' : ' + ar.listeners[i]);\n    }\n    \n    \n   \n    var _this = this;\n    keys.forEach(function(i) {\n        if (typeof(ar[i]) == 'object') {\n            return;\n        }\n        \n        var type = provider.findType(ar, i, ar[i]);\n        \n        _this.el.append(iter);\n        var p = _this.el.get_path(iter).to_string();\n        ret[i] = p;\n        _this.el.set_value(iter, 0, ''+i);\n        _this.el.set_value(iter, 1, '' + ar[i]);  \n        _this.el.set_value(iter, 2, ''+i);\n        _this.el.set_value(iter, 3, ''+ _this.toShort(ar[i]));\n        _this.el.set_value(iter, 4, ''+type);\n        _this.el.set_value(iter, 5, type + ' : ' + ar[i]);\n    })\n    return ret;\n}\n",
                                                                            "|startEditing": "function(path,col) {\n    /**\n    * start editing path (or selected if not set..)\n    * @param {String|false} path  (optional) treepath to edit - selected tree gets\n    *     edited by default.\n    * @param {Number} 0 or 1 (optional)- column to edit. \n    */\n     var tp;\n    if (typeof(path) == 'string') {\n        tp = new Gtk.TreePath.from_string(path);\n    } else {\n        var iter = new Gtk.TreeIter();\n        var s = this.get('/LeftPanel.view').selection;\n        s.get_selected(this.el, iter);\n        tp = this.el.get_path(iter);\n        path = tp.to_string();\n    }\n    \n   \n    // which colum is to be edited..\n    var colObj = false;\n    if (typeof(col) == 'undefined') {\n        var k = this.getValue(path, 0);\n        colObj = (!k.length || k == '|') ? \n            this.get('/LeftPanel').propertyColumn : this.get('/LeftPanel').editableColumn;\n    } else {\n        colObj = col ? this.get('/LeftPanel').editableColumn : this.get('/LeftPanel').propertyColumn;\n    }\n    \n    // make sure the pulldown is set correctly..\n    // not really needed for second col...\n\n    var provider = this.get('/LeftTree').getPaleteProvider();\n   \n    var type = this.get('/LeftPanel.model').getType(path);\n    var opts = provider.findOptions(type);\n    var renderer = this.get('/LeftPanel').editableColumn.items[0].el;\n    \n    if (opts === false) {\n        this.get('/LeftPanel').editableColumn.setOptions([]);\n        renderer.has_entry = true; /// probably does not have any effect.\n    } else {\n        this.get('/LeftPanel').editableColumn.setOptions(opts);\n        renderer.has_entry = false;\n    }\n    \n    var _this=this;\n    // iter now has row...\n    GLib.timeout_add(0, 100, function() {\n        \n        colObj.items[0].el.editable = true; // esp. need for col 0..\n        _this.get('/LeftPanel.view').el.set_cursor_on_cell(\n            tp,\n            colObj.el,\n            colObj.items[0].el,\n            true\n        );\n    });\n    \n}\n",
                                                                            "|toJS": "function() {\n     var iter = new Gtk.TreeIter();\n    this.get('/LeftPanel.model').el.get_iter_first(iter);\n    var ar = {};\n       \n    while (true) {\n        \n        var k = this.getValue(this.el.get_path(iter).to_string(), 0);\n       // Seed.print(k);\n        if (k[0] == '!') {\n            ar.listeners = ar.listeners || {};\n            ar.listeners[  k.substring(1)] = this.getValue(this.el.get_path(iter).to_string(), 1);\n            \n        } else {\n            ar[ k ] = this.getValue(this.el.get_path(iter).to_string(), 1);\n        }\n        \n        if (! this.get('/LeftPanel.model').el.iter_next(iter)) {\n            break;\n        }\n    }\n    \n    \n    //print(JSON.stringify(ar));\n    return ar;\n    // convert the l\n}\n",
                                                                            "|toShort": "function(str) {\n    var a = typeof(str) == 'string' ? str.split(\"\\n\") : [];\n        return a.length > 1 ? a[0] + '....' : '' + str;\n}\n",
                                                                            "|xns": "Gtk"
                                                                        },
                                                                        {
                                                                            "|xns": "Gtk",
                                                                            "xtype": "TreeViewColumn",
                                                                            "pack": "append_column",
                                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n\n    this.el.add_attribute(this.items[0].el , 'markup', 2 );\n    this.get('/LeftPanel').propertyColumn = this;\n}\n",
                                                                            "title": "key",
                                                                            "items": [
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "CellRendererText",
                                                                                    "pack": "pack_start",
                                                                                    "listeners": {
                                                                                        "editing_started": "function (self, editable, path) {\n\n        this.get('/LeftPanel.model').activePath  = path;\n\n}",
                                                                                        "edited": "function (self, object, p0) {\n\tvar model = this.get('/LeftPanel.model');\n        var path = model.activePath;\n        var iter = new Gtk.TreeIter();\n        model.el.get_iter(iter, new Gtk.TreePath.from_string(path));\n        model.el.set_value(iter, 0, p0);\n        model.el.set_value(iter, 2, p0);\n        \n\tmodel.activePath = false;\n\n\tthis.get('/LeftTree.model').changed(model.toJS(), true); \n        this.el.editable = false;\n}"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "|xns": "Gtk",
                                                                            "xtype": "TreeViewColumn",
                                                                            "pack": "append_column",
                                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n\tthis.el.add_attribute(this.items[0].el , 'text', 3 );\n\tthis.el.add_attribute(this.items[0].el , 'sensitive', 3 );\n\tthis.el.add_attribute(this.items[0].el , 'editable', 3 );\n          // this.el.set_cell_data_func(cell, age_cell_data_func, NULL, NULL);\n\n \tthis.get('/LeftPanel').editableColumn= this;\n}\n",
                                                                            "|setOptions": "function(ar) {\n       var m = this.items[0].el.model;\n            m.clear();\n            var iter = new Gtk.TreeIter();\n            ar.forEach(function(i) {\n                   // sort!!!?\n                m.append(iter);\n                m.set_value(iter, 0, i);\n            });\n            \n}\n",
                                                                            "items": [
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "CellRendererCombo",
                                                                                    "pack": "pack_start",
                                                                                    "|editable": true,
                                                                                    "|has_entry": true,
                                                                                    "text_column": 0,
                                                                                    "|init": "function() {\n    XObject.prototype.init.call(this);\n   this.el.model = new Gtk.ListStore();\n    this.el.model.set_column_types ( 1, [\n        GObject.TYPE_STRING  // 0 real key\n      ]);\n}\n",
                                                                                    "listeners": {
                                                                                        "edited": "function (self, object, p0) {\n \tthis.get('/LeftPanel').editing = false;\n\tprint(\"EDITED? p:\" + p0 + \" t:\" + p0);\n        this.get('/LeftPanel.model').changed(p0, true);\n        this.get('/LeftPanel.model').activePath = false;\n}",
                                                                                        "editing_started": "function (self, editable, path) {\n   this.get('/LeftPanel').editing  = true;\n\t//  console.log('editing started');\n       // r.has_entry = false;\n   this.get('/LeftPanel.model').editSelected(editable);\n}"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "|xns": "Gtk",
                                                                    "xtype": "Menu",
                                                                    "pack": false,
                                                                    "id": "LeftPanelPopup",
                                                                    "items": [
                                                                        {
                                                                            "|xns": "Gtk",
                                                                            "xtype": "MenuItem",
                                                                            "pack": "append",
                                                                            "label": "Delete",
                                                                            "listeners": {
                                                                                "activate": "function (self) {\n\tthis.get('/LeftPanel.model').deleteSelected();\n}"
                                                                            }
                                                                        },
                                                                        {
                                                                            "|xns": "Gtk",
                                                                            "xtype": "MenuItem",
                                                                            "pack": "append",
                                                                            "label": "Edit",
                                                                            "listeners": {
                                                                                "activate": "function (self) {\n\tthis.get('/LeftPanel.model').startEditing(false, 0);\n}"
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "ScrolledWindow",
                                            "pack": "pack_end,false,true,0",
                                            "id": "MidPropTree",
                                            "|shadow_type": "Gtk.ShadowType.IN",
                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n       XObject.prototype.init.call(this); \n    this.el.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)\n    this.el.set_size_request ( 150, -1 );\n    this.shown = true;\n}\n",
                                            "activeElement": false,
                                            "|hideWin": "function() {\n     \n    if (!this.shown) {\n        return;\n    }\n    \n    \n    if (this.get('/Window.left').el.position < 160) {\n        return;\n    }\n    this.get('/Window.left').el.position = this.get('/Window.left').el.position  - 150;\n        \n    this.el.hide();\n    this.shown = false;\n}\n",
                                            "items": [
                                                {
                                                    "listeners": {
                                                        "cursor_changed": "function (self) {\n       var iter = new Gtk.TreeIter();\n                        \n                        //console.log('changed');\n        var m = this.get('model');\n\tif (!this.selection){\n\t\tthis.selection = this.el.get_selection();\n\t}\n\n        var s = this.selection;\n        if (!s.get_selected(m.el, iter)) {\n\t\treturn; \n\t}\n        var tp = m.el.get_path(iter).to_string();\n        \n        \n        // var val = \"\";\n        \n        var key = m.getValue(tp, 0);\n        \n        var type = m.getValue(tp, 1);\n        var skel = m.getValue(tp, 3);\n        var etype = m.getValue(tp, 5);\n        \n        \n        this.get('/MidPropTree').hideWin();\n\n        if (type.toLowerCase() == 'function') {\n            \n            if (etype != 'events') {\n                key = '|' + key;\n            }\n            \n            this.get('/LeftPanel.model').add({\n                key :  key, \n                type : type,\n                val  : skel,\n                etype : etype\n            })  \n            return;\n        }\n        // has dot in name, and is boolean???? this does not make sense..\n        //if (type.indexOf('.') > -1 ||  type.toLowerCase() == 'boolean') {\n        //     key = '|' + key;\n       // }\n        \n        this.get('/LeftPanel.model').add( {\n            key : key, \n            type : type,\n            //skel  : skel,\n            etype : etype\n           }) //, \n}"
                                                    },
                                                    "pack": "add",
                                                    "tooltip_column": 2,
                                                    "xtype": "TreeView",
                                                    "|enable_tree_lines": true,
                                                    "|headers_visible": false,
                                                    "|init": "function() {\n\tXObject.prototype.init.call(this); \n                    \n       var description = new Pango.FontDescription.c_new();\n     description.set_size(8000);\n    this.el.modify_font(description);     \n                    \n    //this.selection = this.el.get_selection();\n    // this.selection.set_mode( Gtk.SelectionMode.SINGLE);\n \n\n    \n  \n    \n}\n",
                                                    "|xns": "Gtk",
                                                    "items": [
                                                        {
                                                            "id": "model",
                                                            "pack": "set_model",
                                                            "xtype": "ListStore",
                                                            "|getValue": "function(treepath, col)\n{\n    var tp = new Gtk.TreePath.from_string (treepath);\n    var iter = new Gtk.TreeIter();\n    this.el.get_iter (iter, tp);\n    var value = new GObject.Value('');\n    this.el.get_value(iter, col, value);\n    return value.value;\n    \n}",
                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n   this.el.set_column_types ( 6, [\n        GObject.TYPE_STRING,  // real key\n         GObject.TYPE_STRING, // real type\n         GObject.TYPE_STRING, // docs ?\n         GObject.TYPE_STRING, // visable desc\n         GObject.TYPE_STRING, // function desc\n         GObject.TYPE_STRING // element type (event|prop)\n        \n    ] );\n}\n",
                                                            "|showData": "function(type) {\n    this.el.clear();\n            if (!this.get('/MidPropTree').activeElement || !type) {\n                return; // no active element\n            }\n\n            var fullpath = this.get('/LeftTree.model').file.guessName(this.get('/MidPropTree').activeElement);\n            var palete = this.get('/LeftTree').getPaleteProvider();\n            \n             \n            \n            Seed.print('Showing right?');\n            if (!this.get('/MidPropTree').shown) {\n\n                this.get('/Window.left').el.position = this.get('/Window.left').el.position  + 150;\n                this.get('/MidPropTree').el.show();\n                this.get('/MidPropTree').shown = true;\n            }\n            \n            var elementList = palete.getPropertiesFor(fullpath, type).sort(function(a,b) { \n                return a.name >  b.name ? 1 : -1;\n            });\n            print (\"GOT \" + elementList.length + \" items for \" + fullpath + \"|\" + type);\n           // console.dump(elementList);\n           \n            \n            var iter = new Gtk.TreeIter();\n            for(var i =0 ; i < elementList.length; i++) {\n                var p=elementList[i];\n                this.el.append(iter);\n              //  console.log( '<b>' + p.name +'</b> ['+p.type+']');\n                    //GObject.TYPE_STRING,  // real key\n                    // GObject.TYPE_STRING, // real type\n                    // GObject.TYPE_STRING, // docs ?\n                    // GObject.TYPE_STRING // func def?\n                    \n                \n                this.el.set_value(iter, 0, p.name);\n                this.el.set_value(iter, 1, p.type);\n                this.el.set_value(iter, 2, '<span size=\"small\"><b>' + p.name +'</b> ['+p.type+']</span>' + \"\\n\" + p.desc);\n                this.el.set_value(iter, 3, p.sig ? p.sig  : '');\n                this.el.set_value(iter, 4, '<span size=\"small\"><b>' + p.name +'</b> ['+p.type+']</span>');\n                this.el.set_value(iter, 5, type);\n                \n            }\n                             \n}\n",
                                                            "|xns": "Gtk"
                                                        },
                                                        {
                                                            "|xns": "Gtk",
                                                            "xtype": "TreeViewColumn",
                                                            "|init": "function() {\n    this.el = new Gtk.TreeViewColumn();\n    this.parent.el.append_column(this.el);\n    \n    XObject.prototype.init.call(this);\n    this.el.add_attribute(this.items[0].el , 'markup', 4  );\n}\n",
                                                            "pack": false,
                                                            "items": [
                                                                {
                                                                    "|xns": "Gtk",
                                                                    "xtype": "CellRendererText",
                                                                    "pack": "pack_start,true"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "|xns": "Gtk",
                                    "xtype": "HBox",
                                    "pack": "add",
                                    "items": [
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "VPaned",
                                            "pack": "add",
                                            "position": 300,
                                            "items": [
                                                {
                                                    "|xns": "Gtk",
                                                    "xtype": "VBox",
                                                    "pack": "add",
                                                    "items": [
                                                        {
                                                            "|xns": "Gtk",
                                                            "xtype": "Notebook",
                                                            "pack": "pack_start,true,true",
                                                            "id": "view-help-nb",
                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n   this.el.set_tab_label(this.items[0].el, new Gtk.Label({ label : \"Preview\" }));\n    this.el.set_tab_label(this.items[1].el, new Gtk.Label({ label : \"Help\" }));\n}\n",
                                                            "items": [
                                                                {
                                                                    "id": "view-notebook",
                                                                    "pack": "add",
                                                                    "tab_border": 0,
                                                                    "xtype": "Notebook",
                                                                    "|init": "function() {\n    XObject.prototype.init.call(this);\n    this.el.set_current_page(0);\n    //print(\"SET LABEL?\")\n    this.el.set_tab_label(this.items[0].el, new Gtk.Label({ label : \"Roo View\" }));\n    this.el.set_tab_label(this.items[1].el, new Gtk.Label({ label : \"Gtk View\" }));\n}\n",
                                                                    "|show_tabs": false,
                                                                    "|xns": "Gtk",
                                                                    "items": [
                                                                        {
                                                                            "id": "RightBrowser",
                                                                            "pack": "add",
                                                                            "xtype": "VBox",
                                                                            "|xns": "Gtk",
                                                                            "items": [
                                                                                {
                                                                                    "pack": "add",
                                                                                    "xtype": "ScrolledWindow",
                                                                                    "|init": "function() {\n    XObject.prototype.init.call(this);\n    this.el.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n}\n",
                                                                                    "|shadow_type": "Gtk.ShadowType.IN",
                                                                                    "|xns": "Gtk",
                                                                                    "items": [
                                                                                        {
                                                                                            "listeners": {
                                                                                                "load_finished": "function (self, object) {\n    print(\"load finished\");\n//    print(\"load_finished\"); return;\n\t// if (this.ready) { // dont do it twice!\n\t //   return; \n\t//}\n\tif (!this.inspectorShown) {\n           this.el.get_inspector().show();\n           this.inspectorShown = true;\n\t}\n\n\tthis.ready = true;\n\t\n        if (this.pendingRedraw) {\n            this.pendingRedraw = false;\n            this.refreshRequired  = true;\n        }\n        //var js = this.get('/LeftTree.model').toJS();\n        //if (js && js[0]) {\n    \t//    this.renderJS(js[0]);\n    \t//}\n\n}",
                                                                                                "script_alert": "function (self, object, p0) {\n    // \tprint(p0);\n        return false;\n        return true; // do not display anything...\n}",
                                                                                                "console_message": "function (self, object, p0, p1) {\n    print(object);\n   //  console.log(object);\n        if (!object.match(/^\\{/)) {\n        \n            //this.get('/Terminal').feed(object);\n            return true; // do not handle!!! -> later maybe in console..\n        }\n       // console.log(object);\n        var val =  JSON.parse(object);\n\n        if (typeof(val['hover-node']) != 'undefined') {\n            this.activeNode = val['hover-node'];\n            console.log('active node: ' + this.activeNode);\n            return true;\n        }\n\n         var ret = false;\n         if (typeof(val['id']) != 'undefined') {\n           // this.activeNode = val['id'];\n            var tg = this.get('/LeftTree.model').findDropNode(val['id'], true); \n            if (!tg || typeof(tg[0]) == 'undefined') {\n                return false;\n            }\n            print(\"SELECT node \" + tg[0]);\n            \n            this.get('/LeftTree.view').selectNode(tg[0]);\n            ret  = true;\n            \n        } \n        if (ret && typeof(val['set']) != 'undefined') {\n           this.get('/LeftPanel.model').add({\n                key : val['set'],\n                val : val['value']\n            });\n            //console.log('active node: ' + this.activeNode);\n            \n        }\n        //Seed.print('a:'+a);\n        //Seed.print('b:'+b);\n        //Seed.print('c:'+c);\n        return ret;\n}",
                                                                                                "drag_motion": "function (w, ctx,  x,   y,   time, ud) {\n   // console.log('DRAG MOTION'); \n        // status:\n        // if lastCurrentNode == this.currentNode.. -- don't change anything..\n        this.targetData = [];\n        this.el.execute_script(\"Builder.overPos(\" + x +','+ y + \");\");\n        \n        // A) find out from drag all the places that node could be dropped.\n        var src = Gtk.drag_get_source_widget(ctx);\n        if (!src.dropList) {\n            Gdk.drag_status(ctx, 0, time);\n            return true;\n        }\n        // b) get what we are over.. (from activeNode)\n        // tree is empty.. - list should be correct..\n        if (!this.get('/LeftTree.model').currentTree) {\n            Gdk.drag_status(ctx, Gdk.DragAction.COPY,time);\n            return true;\n            \n        }\n        // c) ask tree where it should be dropped... - eg. parent.. (after node ontop)\n        \n        var tg = this.get('/LeftTree.model').findDropNode(this.activeNode, src.dropList);\n        console.dump(tg);\n        if (!tg.length) {\n            Gdk.drag_status(ctx, 0,time);\n            this.get('/LeftTree.view').highlight(false);\n            return true;\n        }\n         \n        // if we have a target..\n        // -> highlight it! (in browser)\n        // -> highlight it! (in tree)\n        \n        Gdk.drag_status(ctx, Gdk.DragAction.COPY,time);\n        this.get('/LeftTree.view').highlight(tg);\n        this.targetData = tg;\n        // for tree we should handle this...\n        return true;\n}",
                                                                                                "drag_drop": "function (w, ctx, x, y,time, ud) {\n\tprint(\"TARGET: drag-drop\");\n        var is_valid_drop_site = true;\n        \n         \n        Gtk.drag_get_data\n        (\n                w,         /* will receive 'drag-data-received' signal */\n                ctx,        /* represents the current state of the DnD */\n                this.get('/Window').atoms[\"STRING\"],    /* the target type we want */\n                time            /* time stamp */\n        );\n                        \n                        \n                        /* No target offered by source => error */\n                       \n\n\treturn  is_valid_drop_site;\n}",
                                                                                                "drag_data_received": "function (w, ctx,  x,  y, sel_data,  target_type,  time, ud) \n    {\n        print(\"Browser: drag-data-received\");\n        var delete_selection_data = false;\n        vardnd_success = false;\n        /* Deal with what we are given from source */\n        if( sel_data && sel_data.length ) {\n            \n            if (ctx.action == Gdk.DragAction.ASK)  {\n                /* Ask the user to move or copy, then set the ctx action. */\n            }\n\n            if (ctx.action == Gdk.DragAction.MOVE) {\n                delete_selection_data = true;\n            }\n            var source = Gtk.drag_get_source_widget(ctx);\n\n            print(\"Browser: source.DRAGDATA? \" + source.dragData);\n            if (this.targetData) {\n                print(this.targetData);\n                this.get('/LeftTree.model').dropNode(this.targetData,  source.dragData);\n            }\n            \n            \n            \n            dnd_success = true;\n\n        }\n\n        if (dnd_success == false)\n        {\n                Seed.print (\"DnD data transfer failed!\\n\");\n        }\n        \n        Gtk.drag_finish (ctx, dnd_success, delete_selection_data, time);\n        return true;\n    }",
                                                                                                "create_web_view": "function (self, object) {\n  print(\"CREATE WEB VIEW\");\n   return null; //new WebKit.WebView();\n}"
                                                                                            },
                                                                                            "id": "view",
                                                                                            "pack": "add",
                                                                                            "xtype": "WebView",
                                                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n    // this may not work!?\n    var settings =  this.el.get_settings();\n    settings.enable_developer_extras = true;\n    \n    // this was an attempt to change the url perms.. did not work..\n    // settings.enable_file_access_from_file_uris = true;\n    // settings.enable_offline_web_application_cache - true;\n    // settings.enable_universal_access_from_file_uris = true;\n    var _this = this;\n     \n     // init inspector..\n    this.el.get_inspector().signal.inspect_web_view.connect(function(wi, pg) {\n         _this.get('/BottomPane.inspector').el.show();\n         return _this.get('/BottomPane.inspector').el;\n    \n    });\n     \n     // FIXME - base url of script..\n     // we need it so some of the database features work.\n    this.el.load_html_string( \"Render not ready\" , \n            //fixme - should be a config option!\n            'http://www.akbkhome.com/e/'\n    );\n        \n        \n   //this.el.open('file:///' + __script_path__ + '/../builder.html');\n                          \n    Gtk.drag_dest_set\n    (\n            this.el,              /* widget that will accept a drop */\n            Gtk.DestDefaults.MOTION  | Gtk.DestDefaults.HIGHLIGHT,\n            null,            /* lists of target to support */\n            0,              /* size of list */\n            Gdk.DragAction.COPY         /* what to do with data after dropped */\n    );\n                            \n   // print(\"RB: TARGETS : \" + LeftTree.atoms[\"STRING\"]);\n    Gtk.drag_dest_set_target_list(this.el, this.get('/Window').targetList);\n    \n    GLib.timeout_add_seconds(0, 1, function() {\n        //    print(\"run refresh?\");\n         _this.runRefresh(); \n         return true;\n     });\n    \n    \n}\n",
                                                                                            "|renderJS": "function(data) {\n    this.refreshRequired  = true;\n}\n",
                                                                                            "|runRefresh": "function() \n{\n    // this is run every 2 seconds from the init..\n\n  \n    \n    if (!this.refreshRequired) {\n       // print(\"no refresh required\");\n        return;\n    }\n\n    if (this.lastRedraw) {\n       // do not redraw if last redraw was less that 5 seconds ago.\n       if (((new Date()) -  this.lastRedraw) < 5000) {\n            return;\n        }\n    }\n    \n    \n    \n    \n     if (!this.get('/Window.LeftTree').getActiveFile()) {\n        return;\n     }\n     this.refreshRequired = false;\n   //  print(\"HTML RENDERING\");\n     \n     this.get('/BottomPane').el.show();\n     this.get('/BottomPane').el.set_current_page(2);// webkit inspector\n\n    \n    var js = this.get('/LeftTree.model').toJS();\n    if (!js || !js.length) {\n        print(\"no data\");\n        return;\n    }\n    var  data = js[0];\n    \n    \n     var project = this.get('/Window.LeftTree').getActiveFile().project;\n     //print (project.fn);\n     // set it to non-empty.\n     project.runhtml  =     project.runhtml  || '';\n     project.runhtml  = project.runhtml.length ?  project.runhtml : '<script type=\"text/javascript\"></script>'; \n    \n\n     this.runhtml  = this.runhtml || '';\n    \n     if (project.runhtml != this.runhtml) {\n        // then we need to reload the browser using\n        // load_html_string..\n        \n        // then trigger a redraw once it's loaded..\n        this.pendingRedraw = true;\n         var runhtml = '<script type=\"text/javascript\">' + \"\\n\" ;\n         runhtml +=imports.File.File.read(__script_path__ + '/../builder.html.js') + \"\\n\";\n         runhtml += '</script>'+ \"\\n\" ;\n        \n        this.runhtml = project.runhtml;\n        // need to modify paths\n        \n        \n        \n        var html = imports.File.File.read(__script_path__ + '/../builder.html');\n        html = html.replace('</head>', runhtml + this.runhtml + '</head>');\n        print(\"LOAD HTML \" + html);\n        this.el.load_html_string( html , \n            //fixme - should be a config option!\n            'http://www.akbkhome.com/e/'\n        );\n        \n        // should trigger load_finished! - which in truns shoudl set refresh Required;\n        return;\n    \n    }\n    \n    \n    this.renderedData = data;\n    var str = JSON.stringify(data) ;\n    \n    if (!this.ready) {\n        console.log('not loaded yet');\n    }\n    this.lastRedraw = new Date();\n \n    this.el.execute_script(\"Builder.render(\" + JSON.stringify(data) + \");\");\n    \n}\n",
                                                                                            "|xns": "WebKit"
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "id": "RightGtkView",
                                                                            "pack": "add",
                                                                            "xtype": "VBox",
                                                                            "|redraw": "function() {\n   this.highlightWidget = false;\n    print(\"REDRAW CALLED\");\n    this.activePath = this.get('/LeftTree').getActivePath();\n    if (this.renderedEl) {\n      print(\"QUEUE DRAW CALLING\");\n      this.renderedEl.queue_draw();\n   }\n}\n",
                                                                            "|renderJS": "function(data, withDebug)\n{\n      this.highlightWidget = false;\n   \n    this.withDebug = false;\n    while (this.get('view').el.get_children().length) {\n        var c = this.get('view').el.get_children()[0];\n        this.get('view').el.remove(c);        \n        c.destroy();\n    }\n     if (!data) {\n         return; \n    }\n    \n    var tree =  this.get('/LeftTree.model').toJS(false,true)[0];\n    // in theory tree is actually window..  \n   try {\n  \n        this.renderedEl = this.viewAdd(tree.items[0], this.get('view').el);\n      \n  } catch (e) {\n     print(e.message);\n    return;\n  }\n    this.get('view').el.set_size_request(\n        tree.default_width * 1 || 400, tree.default_height * 1 || 400\n    ) ;\n    if (this.renderedEl) {\n        this.renderedEl.set_size_request(\n            tree.default_width || 600,\n            tree.default_height || 400\n        );\n    }\n    this.get('view').el.show_all();\n    \n    \n    \n}",
                                                                            "|showInWindow": "function() {\n  print(\"GET PROEJCT\");\n\tvar pr = this.get('/LeftProjectTree').getActiveProject();\n  \n\tconsole.log(pr.paths);\n    return;\n/*\n     var src= this.buildJS(\n\t\tthis.get('/LeftTree.model').toJS()[0], \n\t\ttrue);\n      // show term?? \n\n\n    //var x = new imports.sandbox.Context();\n    //x.add_globals();\n    //print(src);\n    try {\n        Seed.check_syntax('var e = ' + src);\n        //x.eval(src);\n    } catch( e) {\n        this.get('/Terminal').feed(e.message || e.toString() + \"\\n\");\n        this.get('/Terminal').feed(console._dump(e)+\"\\n\");\n        if (e.line) {\n            var lines = src.split(\"\\n\");\n            var start = Math.max(0, e.line - 10);\n            var end = Math.min(lines.length, e.line + 10);\n            for (var i =start ; i < end; i++) {\n                if (i == e.line) {\n                    this.get('/Terminal').feed(\">>>>>\" + lines[i] + \"\\n\");\n                    continue;\n                }\n                this.get('/Terminal').feed(lines[i] + \"\\n\");\n            }\n            \n        }\n        \n        return;\n    }\n     this.get('/BottomPane').el.set_current_page(1);\n    this.get('/Terminal').el.fork_command( null , [], [], \"/tmp\", false,false,false); \n    var cmd = \"/usr/bin/seed /tmp/BuilderGtkView.js\\n\";\n    this.get('/Terminal').el.feed_child(cmd, cmd.length);\n     /*\n    var _top = x.get_global_object()._top;\n    \n    _top.el.set_screen(Gdk.Screen.get_default()); // just in case..\n    _top.el.show_all();\n    if (_top.el.popup) {\n        _top.el.popup(null, null, null, null, 3, null);\n    }\n*/\n}\n",
                                                                            "|viewAdd": "function(item, par)\n        {\n    // does something similar to xobject..\n    item.pack = (typeof(item.pack) == 'undefined') ?  'add' : item.pack;\n    \n    if (item.pack===false || item.pack === 'false') {  // no ;\n        return;\n    }\n    print(\"CREATE: \" + item['|xns'] + '.' + item['xtype']);\n    var type = item['|xns'] + '.' + item['xtype'];\n    \n    if (item['|xns'] == 'GtkClutter') { // we can not add this yet!\n        return false;\n    }\n    var ns = imports.gi[item['|xns']];\n    var ctr = ns[item['xtype']];\n    var ctr_args = { };\n    for(var k in item) {\n        var kv = item[k];\n        if (typeof(kv) == 'object' || typeof(kv) == 'function') {\n            continue;\n        }\n        if ( \n            k == 'pack' ||\n            k == 'items' ||\n            k == 'id' ||\n            k == 'xtype' ||\n            k == 'xdebug' ||\n            k == 'xns' ||\n            k == '|xns'\n        ) {\n            continue;\n        }\n\n\tif (k[0] == '|' && typeof(kv) == 'string') {\n\n\t\tif (kv.match(new RegExp('function'))) {\n\t\t\tcontinue;\n                }\n\t\t print(\"WASL \" + k + '=' + kv);\n\t\ttry {\n\t\t\teval( 'kv = ' + kv);\n\t\t} catch(e) {    continue; }\n                \n\t\tk = k.substring(1);\n             // print(k + '=' + kv);\n\t}\n        if (k[0] == '|') { // should be boolean or number..\n\t\tk = k.substring(1);\n\t\t//print(k + '=' + kv);\n        }\n         \n\tif (k == 'show_tabs') { // force tab showing for notebooks.\n           kv = true;\n        }\n        print(k + '=' + typeof(kv) + \" : \" + kv);\n        ctr_args[k] = kv;\n        \n    } \n    \n    \n    var el = new ctr(ctr_args);\n    \n    print(\"PACK\" + item.pack);\n    //console.dump(item.pack);\n    \n    \n    \n    \n    var args = [];\n    var pack_m  = false;\n    if (typeof(item.pack) == 'string') {\n         \n        item.pack.split(',').forEach(function(e, i) {\n            \n            if (e == 'false') { args.push( false); return; }\n            if (e == 'true') {  args.push( true);  return; }\n            if (!isNaN(parseInt(e))) { args.push( parseInt(e)); return; }\n            args.push(e);\n        });\n        //print(args.join(\",\"));\n        \n        pack_m = args.shift();\n    } else {\n        pack_m = item.pack.shift();\n        args = item.pack;\n    }\n    \n    // handle error.\n    if (pack_m && typeof(par[pack_m]) == 'undefined') {\n        throw {\n                name: \"ArgumentError\", \n                message : 'pack method not available : ' + par.id + \" : \" + par + '.' +  pack_m +\n                        \"ADDING : \" + item.id + \" \" +  el\n                    \n\t    };\n\n        return;\n    }\n    \n    console.dump(args);\n    args.unshift(el);\n    //if (XObject.debug) print(pack_m + '[' + args.join(',') +']');\n    //Seed.print('args: ' + args.length);\n    if (pack_m) {\n        par[pack_m].apply(par, args);\n    }\n    \n    var _this = this;\n    item.items = item.items || [];\n    item.items.forEach(function(ch,n) {\n\n          print (\"type:\" + type);\n          \n           print (\"ch.pack:\" + ch.pack);\n         if (type == 'Gtk.Table' && ch.pack == 'add') {\n            var c = n % item.n_columns;\n            var r = Math.floor(n/item.n_columns);\n            ch.pack = [ 'attach', c, c+1, r, r+1, \n                     typeof(ch.x_options) == 'undefined' ?  5 : ch.x_options,\n                        typeof(ch.y_options) == 'undefined' ?  5 : ch.y_options,\n                        typeof(ch.x_padding) == 'undefined' ?  0 : ch.x_padding,\n                        typeof(ch.x_padding) == 'undefined' ?  0 : ch.x_padding\n            ].join(',');\n        }\n    \n        _this.viewAdd(ch, el);\n    });\n    \n    \n    \n    // add the signal handlers.\n    // is it a widget!?!!?\n   \n    \n    try {\n         \n        \n        el.signal.expose_event.connect(XObject.createDelegate(this.widgetExposeEvent, this, [ item  ], true));\n        el.signal.drag_motion.connect(XObject.createDelegate(this.widgetDragMotionEvent, this,[ item  ], true));\n        el.signal.drag_drop.connect(XObject.createDelegate(this.widgetDragDropEvent, this, [ item  ], true));\n        el.signal.button_press_event.connect(XObject.createDelegate(this.widgetPressEvent, this, [ item  ], true ));\n  el.signal.button_release_event.connect(XObject.createDelegate(this.widgetReleaseEvent, this, [ item  ], true ));\n    } catch(e) {\n        // ignore!\n       }\n    \n    \n    \n    return el;\n    \n}",
                                                                            "|widgetDragDropEvent": "function() {\n      print(\"WIDGET DRAGDROP\"); \n            return true;\n}\n",
                                                                            "|widgetDragMotionEvent": "function() {\n     print(\"WIDGET DRAGMOTION\"); \n            return true;\n}\n",
                                                                            "|widgetExposeEvent": "function(w, evt, ud, item) {\n    var widget = w;\n     if (this.inRender) {\n         return false;\n     }\n     \n     if ( this.highlightWidget) {\n          this.inRender = true;\n          if (item.xtreepath.substring(0, this.activePath.length) == this.activePath) {\n                 Gdk.draw_rectangle(this.highlightWidget.window, this.gc, false, this.box.x , this.box.y, this.box.w, this.box.h);\n            }\n           this.inRender = false;\n           return false;\n     }\n     \n     \n     if (this.activePath != item.xtreepath) {\n        return false;\n     }\n     \n   //  print(\"HIGHLIGHT: \" + item.xtreepath ); // draw highlight??\n     // work out the coords of the window..\n     if (!this.gc) {\n      var dr = widget.window;\n      this.gc = (new Gdk.GC.c_new(dr));\n      this.gc.set_rgb_fg_color(new Gdk.Color({ red: 0xFFFF, green: 0, blue : 0 }));\n      this.gc.set_line_attributes(4,  Gdk.LineStyle.SOLID, Gdk.CapStyle.ROUND , Gdk.JoinStyle.ROUND);\n    }\n\n    \n     var r  = evt.expose.area;\n     // console.dump([r.x, r.y, r.width, r.height ] );\n     //return false;\n//     print(widget.get_parent().toString().match(/GtkScrolledWindow/);\n     if (widget.get_parent().toString().match(/GtkScrolledWindow/)) { // eak\n         // happens with gtkscrollview embedded stuff..\n         var np =this.activePath.split(':');\n         np.pop();\n         this.activePath = np.join(':');\n         this.renderedEl.queue_draw();\n         return true;\n\n        \n     }\n\n       \n     \n     \n      this.box = {\n        x : r.x - 2,\n        y : r.y - 2,\n        w: r.width + 4,\n        h: r.height + 4\n      }; \n      // let's draw it..\n      this.inRender = true;\n\n      \n      this.highlightWidget = widget;\n    \n    \n \n\n    //  print(\"DRAW BOX\");\n       //console.dump(this.box);\n      Gdk.draw_rectangle(widget.window, this.gc, false, this.box.x , this.box.y, this.box.w,this.box.h);\n            this.inRender = false;\n            return false;\n}\n",
                                                                            "|widgetPressEvent": "function(w,e,u,d) {\n     if (this.get('view').pressed) {\n        return false;\n     }\nthis.get('view').pressed = true;\n      print(\"WIDGET PRESS \" + d.xtreepath );       \n          this.get('/LeftTree.view').selectNode(   d.xtreepath );        \n            return false;\n}\n",
                                                                            "|widgetReleaseEvent": "function() {\n    this.get('view').pressed = false;\n   return false;\n}\n",
                                                                            "|xns": "Gtk",
                                                                            "items": [
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "HBox",
                                                                                    "pack": "pack_start,false,true,0",
                                                                                    "items": [
                                                                                        {
                                                                                            "|xns": "Gtk",
                                                                                            "xtype": "Button",
                                                                                            "pack": "pack_start,false,false,0",
                                                                                            "label": "Run The Application",
                                                                                            "listeners": {
                                                                                                "button_press_event": "function (self, event) {\n    // call render on left tree - with special option!?!\n \n    //print(\"GET PROEJCT\");\n    var pr = this.get('/LeftProjectTree').getActiveProject();\n  \n    var dir = '';\n    for (var i in pr.paths) { \n        dir = i;\n        break;\n    }\n    var runner = GLib.path_get_dirname (__script_path__) + '/gtkrun.js'; \n    this.get('/Terminal').feed(\"RUN DIR:\" + dir);\n    \n    this.get('/Terminal').el.fork_command( null , [], [], GLib.path_get_dirname (__script_path__) \n\t, false,false,false); \n    var cmd = \"/usr/bin/seed \" + runner + \" \" + dir + \"\\n\";\n    this.get('/Terminal').el.feed_child(cmd, cmd.length);\n    return false;\n  \n\n}"
                                                                                            }
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "ScrolledWindow",
                                                                                    "pack": "add",
                                                                                    "id": "view-sw",
                                                                                    "|shadow_type": "Gtk.ShadowType.IN",
                                                                                    "|init": "function() {\n    XObject.prototype.init.call(this);\n this.el.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n}\n",
                                                                                    "items": [
                                                                                        {
                                                                                            "|xns": "Gtk",
                                                                                            "xtype": "EventBox",
                                                                                            "pack": "add_with_viewport",
                                                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\nthis.el.modify_bg(Gtk.StateType.NORMAL, new Gdk.Color({\n            red: 0x9F00, green: 0xB800 , blue : 0xA800\n           }));\n} \n",
                                                                                            "items": [
                                                                                                {
                                                                                                    "|xns": "Gtk",
                                                                                                    "xtype": "Fixed",
                                                                                                    "pack": "add",
                                                                                                    "|init": "function() {\n\tXObject.prototype.init.call(this);\n\t//this.el.set_hadjustment(this.parent.el.get_hadjustment());\n\t//this.el.set_vadjustment(this.parent.el.get_vadjustment());\n \n}\n",
                                                                                                    "items": [
                                                                                                        {
                                                                                                            "|xns": "Gtk",
                                                                                                            "xtype": "EventBox",
                                                                                                            "pack": "put,10,10",
                                                                                                            "|init": "function() {\n\t//this.el =     new Gtk.Image.from_stock (Gtk.STOCK_HOME,  Gtk.IconSize.MENU);\n\tXObject.prototype.init.call(this);\n\n            Gtk.drag_dest_set\n            (\n                    this.el,              /* widget that will accept a drop */\n                    Gtk.DestDefaults.MOTION  | Gtk.DestDefaults.HIGHLIGHT,\n                    null,            /* lists of target to support */\n                    0,              /* size of list */\n                    Gdk.DragAction.COPY         /* what to do with data after dropped */\n            );\n            \n           // print(\"RB: TARGETS : \" + LeftTree.atoms[\"STRING\"]);\n            Gtk.drag_dest_set_target_list(this.el, this.get('/Window').targetList);\n}\n",
                                                                                                            "ready": false,
                                                                                                            "|getActiveNode": "function(x,y)\n{\n   // workout what node is here..\n    return '0'; // top..\n}",
                                                                                                            "id": "view",
                                                                                                            "listeners": {
                                                                                                                "drag_motion": "function (self, ctx, x, y, time) {\n    \n                // A) find out from drag all the places that node could be dropped.\n                var src = Gtk.drag_get_source_widget(ctx);\n                if (!src.dropList) {\n                    Gdk.drag_status(ctx, 0, time);\n                    return true;\n                }\n                // b) get what we are over.. (from activeNode)\n                // tree is empty.. - list should be correct..\n                if (!this.get('/LeftTree.model').currentTree) {\n                    Gdk.drag_status(ctx, Gdk.DragAction.COPY,time);\n                    return true;\n                    \n                }\n                // c) ask tree where it should be dropped... - eg. parent.. (after node ontop)\n                var activeNode = this.getActiveNode(x, y);\n                \n                \n                var tg = this.get('/LeftTree.model').findDropNode(activeNode, src.dropList);\n                console.dump(tg);\n                if (!tg.length) {\n                    Gdk.drag_status(ctx, 0,time);\n                    this.get('/LeftTree.view').highlight(false);\n                    return true;\n                }\n                 \n                // if we have a target..\n                // -> highlight it! (in browser)\n                // -> highlight it! (in tree)\n                \n                Gdk.drag_status(ctx, Gdk.DragAction.COPY,time);\n                this.get('/LeftTree.view').highlight(tg);\n                this.targetData = tg;\n                // for tree we should handle this...\n                return true;\n}",
                                                                                                                "drag_drop": "function (self,ctx, x, y, time) {\n\tSeed.print(\"TARGET: drag-drop\");\n        var is_valid_drop_site = true;\n        \n         \n        Gtk.drag_get_data\n        (\n                self,         /* will receive 'drag-data-received' signal */\n                ctx,        /* represents the current state of the this.gDnD */\n                this.get('/Window').atoms[\"STRING\"],    /* the target type we want */\n                time            /* time stamp */\n        );\n        \n        \n        /* No target offered by source => error */\n       \n\n        return  is_valid_drop_site;\n  \n}",
                                                                                                                "drag_data_received": "function (w, ctx,  x,  y, sel_data,  target_type,  time, ud) \n    {\n        Seed.print(\"GtkView: drag-data-received\");\n        var delete_selection_data = false;\n        var dnd_success = false;\n        /* Deal with what we are given from source */\n        if( sel_data && sel_data.length ) {\n            \n            if (ctx.action == Gdk.DragAction.ASK)  {\n                /* Ask the user to move or copy, then set the ctx action. */\n            }\n\n            if (ctx.action == Gdk.DragAction.MOVE) {\n                delete_selection_data = true;\n            }\n            var source = Gtk.drag_get_source_widget(ctx);\n\n            Seed.print(\"Browser: source.DRAGDATA? \" + source.dragData);\n            if (this.targetData) {\n                Seed.print(this.targetData);\n                this.get('/LeftTree.model').dropNode(this.targetData,  source.dragData);\n            }\n            \n            \n            \n            dnd_success = true;\n\n        }\n\n        if (dnd_success == false)\n        {\n                Seed.print (\"DnD data transfer failed!\\n\");\n        }\n        \n        Gtk.drag_finish (ctx, dnd_success, delete_selection_data, time);\n        return true;\n    }",
                                                                                                                "button_press_event": "function (self, event) {\n  this.pressed = false;\n    return false;\n}"
                                                                                                            }
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "id": "Help",
                                                                    "pack": "add",
                                                                    "xtype": "ScrolledWindow",
                                                                    "|show": "function() {\n    \n    var file = this.get('/LeftTree').getActiveFile();\n    if (!file) {\n        return;\n    }\n    var activeEl = this.get('/LeftTree').getActiveElement();\n    var xtype = file.guessName( activeEl )\n    if (!xtype || !xtype.length) {\n        return;\n    }\n    //this.get('/Window.view-help-nb').el.set_current_page(1);\n    \n    // get the active element being edited.\n    var helpurl = file.getHelpUrl(xtype);       \n    \n    // now load the help info in the page..\n    this.get('help-view').el.open(helpurl);\n}\n",
                                                                    "|xns": "Gtk",
                                                                    "items": [
                                                                        {
                                                                            "|xns": "WebKit",
                                                                            "xtype": "WebView",
                                                                            "pack": "add",
                                                                            "id": "help-view",
                                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n   this.get('/Window.help-view').el.open(\n     \"http://devel.akbkhome.com/seed/\");\n\n}\n",
                                                                            "zoom_level": 0.8
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    "id": "BottomPane",
                                                    "pack": "add",
                                                    "xtype": "Notebook",
                                                    "|init": "function() {\n    XObject.prototype.init.call(this);\n\tthis.el.set_tab_label(this.items[0].el, new Gtk.Label({ label : \"Code Editor\" }));\n    \tthis.el.set_tab_label(this.items[1].el, new Gtk.Label({ label : \"Console\" }));\n    \tthis.el.set_tab_label(this.items[2].el, new Gtk.Label({ label : \"Inspector\" }));\n}\n",
                                                    "|xns": "Gtk",
                                                    "items": [
                                                        {
                                                            "|xns": "Gtk",
                                                            "xtype": "ScrolledWindow",
                                                            "pack": "add",
                                                            "id": "RightEditor",
                                                            "items": [
                                                                {
                                                                    "|xns": "GtkSource",
                                                                    "xtype": "View",
                                                                    "pack": "add",
                                                                    "id": "view",
                                                                    "|init": "function() {\n    XObject.prototype.init.call(this);\n     var description = Pango.Font.description_from_string(\"monospace\")\n    description.set_size(8000);\n    this.el.modify_font(description);\n\n}\n",
                                                                    "|load": "function(str) {\n\n// show the help page for the active node..\n   this.get('/Help').show();\n\n\n   this.get('/BottomPane').el.set_current_page(0);\n    this.el.get_buffer().set_text(str, str.length);\n    var lm = GtkSource.LanguageManager.get_default();\n    \n    this.el.get_buffer().set_language(lm.get_language('js'));\n    var buf = this.el.get_buffer();\n    var cursor = buf.get_mark(\"insert\");\n    var iter= new Gtk.TextIter;\n    buf.get_iter_at_mark(iter, cursor);\n    iter.set_line(1);\n    iter.set_line_offset(4);\n    buf.move_mark(cursor, iter);\n    \n    \n    cursor = buf.get_mark(\"selection_bound\");\n    iter= new Gtk.TextIter;\n    buf.get_iter_at_mark(iter, cursor);\n    iter.set_line(1);\n    iter.set_line_offset(4);\n    buf.move_mark(cursor, iter);\n     \n    this.el.grab_focus();\n}",
                                                                    "|insert_spaces_instead_of_tabs": true,
                                                                    "indent_width": 4,
                                                                    "|auto_indent": true,
                                                                    "|show_line_numbers": true,
                                                                    "items": [
                                                                        {
                                                                            "|xns": "GtkSource",
                                                                            "xtype": "Buffer",
                                                                            "pack": "set_buffer",
                                                                            "listeners": {
                                                                                "changed": "function (self) {\n    var s = new Gtk.TextIter();\n    var e = new Gtk.TextIter();\n    this.el.get_start_iter(s);\n    this.el.get_end_iter(e);\n    var str = this.el.get_text(s,e,true);\n    try {\n        Seed.check_syntax('var e = ' + str);\n    } catch (e) {\n        this.get('/RightEditor.view').el.modify_base(Gtk.StateType.NORMAL, new Gdk.Color({\n            red: 0xFFFF, green: 0xCCCC , blue : 0xCCCC\n           }));\n        print(\"SYNTAX ERROR IN EDITOR\");   \n        print(e);\n        console.dump(e);\n        return;\n    }\n    this.get('/RightEditor.view').el.modify_base(Gtk.StateType.NORMAL, new Gdk.Color({\n            red: 0xFFFF, green: 0xFFFF , blue : 0xFFFF\n           }));\n    \n     this.get('/LeftPanel.model').changed(  str , false);\n}"
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "|xns": "Gtk",
                                                            "xtype": "ScrolledWindow",
                                                            "pack": "add",
                                                            "items": [
                                                                {
                                                                    "|xns": "Vte",
                                                                    "xtype": "Terminal",
                                                                    "pack": "add",
                                                                    "id": "Terminal",
                                                                    "|feed": "function(istr) {\n    var str = istr.replace(/\\n/g, \"\\r\\n\") + \"\\r\\n\";\n    // we should make ourselves visable!!!\n    this.get('/BottomPane').el.show();\n    this.get('/BottomPane').el.set_current_page(1);\n\n    this.el.feed(str ,str.length);\n}\n",
                                                                    "|scroll_on_output": true,
                                                                    "|init": "function() {\n    XObject.prototype.init.call(this);\n    this.el.set_size (80, 1000);\n}\n",
                                                                    "scrollback_lines": 1000
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "xtype": "ScrolledWindow",
                                                            "|xns": "Gtk",
                                                            "pack": "add",
                                                            "listeners": {},
                                                            "items": [
                                                                {
                                                                    "id": "inspector",
                                                                    "pack": "add",
                                                                    "xtype": "WebView",
                                                                    "|xns": "WebKit"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "|xns": "Gtk",
                                            "xtype": "VBox",
                                            "pack": "pack_start,false,false",
                                            "id": "RightPalete",
                                            "|hide": "function() {\n    \n      this.get('buttonbar').el.show();\n       this.get('viewbox').el.hide();\n    print(\"TRIED TO HIDE\");\n}\n",
                                            "|show": "function() {\n    this.get('buttonbar').el.hide();\n    this.get('viewbox').el.show();\n   // this.get('model').expanded();\n            \n}\n",
                                            "provider": false,
                                            "items": [
                                                {
                                                    "|xns": "Gtk",
                                                    "xtype": "VBox",
                                                    "pack": "add",
                                                    "id": "buttonbar",
                                                    "items": [
                                                        {
                                                            "|xns": "Gtk",
                                                            "xtype": "Button",
                                                            "pack": "pack_start,false,true",
                                                            "listeners": {
                                                                "clicked": "function (self) {\n\tthis.get('/RightPalete').show();\n}"
                                                            },
                                                            "items": [
                                                                {
                                                                    "|xns": "Gtk",
                                                                    "xtype": "Image",
                                                                    "pack": "add",
                                                                    "|stock": "Gtk.STOCK_GOTO_FIRST",
                                                                    "|icon_size": "Gtk.IconSize.MENU"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "|xns": "Gtk",
                                                            "xtype": "Label",
                                                            "pack": "add",
                                                            "label": "Palete",
                                                            "angle": 270,
                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n    this.el.add_events ( Gdk.EventMask.BUTTON_MOTION_MASK );\n}\n",
                                                            "listeners": {
                                                                "enter_notify_event": "function (self, event) {\n    this.get('/RightPalete').show();\n    return false;\n}"
                                                            }
                                                        }
                                                    ]
                                                },
                                                {
                                                    "|xns": "Gtk",
                                                    "xtype": "VBox",
                                                    "pack": "add",
                                                    "id": "viewbox",
                                                    "items": [
                                                        {
                                                            "|xns": "Gtk",
                                                            "xtype": "HBox",
                                                            "pack": "pack_start,false,true",
                                                            "items": [
                                                                {
                                                                    "|xns": "Gtk",
                                                                    "xtype": "Label",
                                                                    "pack": "add",
                                                                    "label": "Palete"
                                                                },
                                                                {
                                                                    "|xns": "Gtk",
                                                                    "xtype": "Button",
                                                                    "pack": "pack_start,false,true",
                                                                    "listeners": {
                                                                        "clicked": "function (self) {\n\tthis.get('/RightPalete').hide();\n}"
                                                                    },
                                                                    "items": [
                                                                        {
                                                                            "|xns": "Gtk",
                                                                            "xtype": "Image",
                                                                            "pack": "add",
                                                                            "|stock": "Gtk.STOCK_GOTO_LAST",
                                                                            "|icon_size": "Gtk.IconSize.MENU"
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "|xns": "Gtk",
                                                            "xtype": "ScrolledWindow",
                                                            "pack": "add",
                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n\tthis.el.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n    this.el.set_size_request(-1,200);\n}\n",
                                                            "|shadow_type": "Gtk.ShadowType.IN",
                                                            "items": [
                                                                {
                                                                    "|xns": "Gtk",
                                                                    "xtype": "TreeView",
                                                                    "pack": "add",
                                                                    "|init": "function() {\n    XObject.prototype.init.call(this);\n  this.el.set_size_request(150,-1);\n                          //  set_reorderable: [1]\n                                  \n            var description = new Pango.FontDescription.c_new();\n    description.set_size(8000);\n    this.el.modify_font(description);\n    \n    this.selection = this.el.get_selection();\n    this.selection.set_mode( Gtk.SelectionMode.SINGLE);\n   // this.selection.signal['changed'].connect(function() {\n    //    _view.listeners['cursor-changed'].apply(_view, [ _view, '']);\n    //});\n    // see: http://live.gnome.org/GnomeLove/DragNDropTutorial\n     \n    Gtk.drag_source_set (\n            this.el,            /* widget will be drag-able */\n            Gdk.ModifierType.BUTTON1_MASK,       /* modifier that will start a drag */\n            null,            /* lists of target to support */\n            0,              /* size of list */\n            Gdk.DragAction.COPY         /* what to do with data after dropped */\n    );\n    //Gtk.drag_source_set_target_list(this.el, LeftTree.targetList);\n   \n    Gtk.drag_source_set_target_list(this.el, this.get('/Window').targetList);\n    Gtk.drag_source_add_text_targets(this.el); \n    /*\n    print(\"RP: TARGET:\" + LeftTree.atoms[\"STRING\"]);\n    targets = new Gtk.TargetList();\n    targets.add( LeftTree.atoms[\"STRING\"], 0, 0);\n    targets.add_text_targets( 1 );\n    Gtk.drag_dest_set_target_list(this.el, LeftTree.targetList);\n    \n    //if you want to allow text to be output elsewhere..\n    //Gtk.drag_source_add_text_targets(this.el);\n    */\n    return true; \n}\n",
                                                                    "|headers_visible": false,
                                                                    "|enable_tree_lines": true,
                                                                    "listeners": {
                                                                        "drag_begin": "function (self, ctx) {\n    // we could fill this in now...\n        Seed.print('SOURCE: drag-begin');\n        \n        \n        \n        var iter = new Gtk.TreeIter();\n        var s = this.selection;\n        s.get_selected(this.get('/RightPalete.model').el, iter);\n        var path = this.get('/RightPalete.model').el.get_path(iter);\n        \n        var pix = this.el.create_row_drag_icon ( path);\n            \n                \n        Gtk.drag_set_icon_pixmap (ctx,\n            pix.get_colormap(),\n            pix,\n            null,\n            -10,\n            -10);\n        \n        var value = new GObject.Value('');\n        this.get('/RightPalete.model').el.get_value(iter, 0, value);\n        if (!this.get('/RightPalete').provider) {\n            return false;\n        }\n        this.el.dropList = this.get('/RightPalete').provider.getDropList(value.value);\n        this.el.dragData = value.value;\n        \n        \n        \n        \n        return true;\n}",
                                                                        "drag_data_get": "function (self, drag_context, selection_data, info, time) {\n \t//Seed.print('Palete: drag-data-get: ' + target_type);\n        if (this.el.dragData && this.el.dragData.length ) {\n            selection_data.set_text(this.el.dragData ,this.el.dragData.length);\n        }\n        \n        \n        //this.el.dragData = \"TEST from source widget\";\n        \n        \n}",
                                                                        "drag_end": "function (self, drag_context) {\n \tSeed.print('SOURCE: drag-end');\n\tthis.el.dragData = false;\n\tthis.el.dropList = false;\n\tthis.get('/LeftTree.view').highlight(false);\n\treturn true;\n}"
                                                                    },
                                                                    "items": [
                                                                        {
                                                                            "|xns": "Gtk",
                                                                            "xtype": "ListStore",
                                                                            "pack": "set_model",
                                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\nthis.el.set_column_types ( 2, [\n                            GObject.TYPE_STRING, // title \n                            GObject.TYPE_STRING // tip\n                            \n                            ] );\n}\n",
                                                                            "id": "model",
                                                                            "|load": "function(tr,iter)\n{\n    if (!iter) {\n        this.el.clear();\n    }\n    //console.log('Project tree load: ' + tr.length);\n    var citer = new Gtk.TreeIter();\n    //this.insert(citer,iter,0);\n    for(var i =0 ; i < tr.length; i++) {\n        if (!iter) {\n            \n            this.el.append(citer);   \n        } else {\n            this.el.insert(citer,iter,-1);\n        }\n        \n        var r = tr[i];\n        //Seed.print(r);\n        this.el.set_value(citer, 0,  '' +  r ); // title \n        \n        //this.el.set_value(citer, 1,  new GObject.Value( r)); //id\n        //if (r.cn && r.cn.length) {\n        //    this.load(r.cn, citer);\n        //}\n    }\n    \n    \n}",
                                                                            "|getValue": "function (iter, col) {\n    var gval = new GObject.Value('');\n     this.el.get_value(iter, col ,gval);\n    return  gval.value;\n    \n    \n}"
                                                                        },
                                                                        {
                                                                            "|xns": "Gtk",
                                                                            "xtype": "TreeViewColumn",
                                                                            "pack": "append_column",
                                                                            "|init": "function() {\n    XObject.prototype.init.call(this);\n\tthis.el.add_attribute(this.items[0].el , 'markup', 0 );\n}\n",
                                                                            "items": [
                                                                                {
                                                                                    "|xns": "Gtk",
                                                                                    "xtype": "CellRendererText",
                                                                                    "pack": "pack_start"
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}