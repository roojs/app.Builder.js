{
 "name" : "GtkView",
 "parent" : "",
 "title" : "",
 "path" : "/home/alan/gitlive/app.Builder.js/src/Builder4/GtkView.bjs",
 "permname" : "",
 "modOrder" : "",
 "build_module" : "builder",
 "items" : [
  {
   "listeners" : {
    "size_allocate" : "(aloc) => {\n\n    this.width = aloc.width;\n    this.height =aloc.height;\n    }\n"
   },
   "id" : "GtkView",
   "# Gtk.Widget lastObj" : "null",
   "| void createThumb" : "() {\n    \n    \n    if (this.file == null) {\n        return;\n    }\n    var filename = this.file.getIconFileName(false);\n    \n    var  win = this.el.get_parent_window();\n    var width = win.get_width();\n    var height = win.get_height();\n\n    Gdk.Pixbuf screenshot = Gdk.pixbuf_get_from_window(win, 0, 0, width, height); // this.el.position?\n\n    screenshot.save(filename,\"png\");\n    return;\n    \n    \n    \n    \n    \n     \n    \n    // should we hold until it's printed...\n    \n      \n\n    \n    \n\n\n    \n     \n}\n",
   "| void loadFile" : "(JsRender.JsRender file) \n{\n    \n       // this.el.set_position((int)(this.el.max_position * 0.7));\n        this.el.set_position(this.el.max_position );\n        this.file = null;\n        \n        if (file.tree == null) {\n            return;\n        }\n        this.file = file;\n        if (this.lastObj != null) {\n            this.container.el.remove(this.lastObj);\n        }\n        \n        // hide the compile view at present..\n          \n        \n        var w = this.width;\n        var h = this.height;\n        \n        print(\"ALLOC SET SIZES %d, %d\\n\", w,h); \n        \n        // set the container size min to 500/500 or 20 px less than max..\n        w = int.max (w-20, 500);\n        h = int.max (h-20, 500); \n        \n        print(\"SET SIZES %d, %d\\n\", w,h);       \n        _this.container.el.set_size_request(w,h);\n        \n        _this.view_layout.el.set_size(w,h); // should be baded on calc.. -- see update_scrolled.\n        var rgba = Gdk.RGBA ();\n        rgba.parse (\"#ccc\");\n        _this.view_layout.el.override_background_color(Gtk.StateFlags.NORMAL, rgba);\n        \n        \n\tvar x = new JsRender.NodeToGtk(file.tree);\n        var obj = x.munge() as Gtk.Widget;\n        this.lastObj = null;\n\tif (obj == null) {\n        \treturn;\n\t}\n\tthis.lastObj = obj;\n        \n        this.container.el.add(obj);\n        obj.show_all();\n        \n         \n        \n}\n ",
   "int width" : 0,
   "Xcls_MainWindow main_window" : "",
   "xtype" : "VPaned",
   "# JsRender.JsRender file" : "null",
   "int height" : 0,
   "| void compileNotice" : "( string  type,   string file,   int line,   string  message) {\n    // if type = \"START\"... then we reset the tree?\n    // the issue is that the compiler is continually going..\n    // so editing a file etc.. may change things.?\n    // probably not an issue.\n    if (type ==\"START\") {\n        // reset the tree;\n        return;\n    }\n    var cs = _this.compile_result_store;\n    \n    var top = 0;\n    var title = \"\";\n    switch(type) {\n        case \"ERR\":\n            title = \"Errors\";\n            top =0;\n            break;\n        \n        case \"WARN\":\n            title = \"Warnings\";\n            top =1;\n            break;\n            \n        case \"DEPR\":\n            title = \"Depricated\";\n            top=2;\n            \n    }\n            \n    \n     var tv = cs.nodeFindOrCreate(null, top.to_string(), title);\n     tv = cs.nodeFindOrCreate(tv, \"%d:%s\".print(top, file), file);\n//     tv = cs.nodeAppendOrCreate(tv, \"%d:%s:%d\".print(top, file,line), file,line, message);\n    \n}\n",
   "$ xns" : "Gtk",
   "items" : [
    {
     "* pack" : "pack1,true,true",
     "xtype" : "ScrolledWindow",
     "$ xns" : "Gtk",
     "items" : [
      {
       "id" : "view_layout",
       "* pack" : "add",
       "xtype" : "Layout",
       "$ xns" : "Gtk",
       "items" : [
        {
         "id" : "container",
         "xtype" : "HBox",
         "* pack" : "put,10,10",
         "$ xns" : "Gtk"
        }
       ]
      }
     ]
    },
    {
     "id" : "compile_view",
     "* pack" : "pack2,true,true",
     "xtype" : "VBox",
     "gboolean homogeneous" : false,
     "$ xns" : "Gtk",
     "items" : [
      {
       "xtype" : "HBox",
       "* pack" : "pack_start,false,false,0",
       "$ xns" : "Gtk",
       "items" : [
        {
         "* pack" : "pack_start,true,true,0",
         "xtype" : "Button",
         "$ xns" : "Gtk",
         "utf8 label" : "Full Compile"
        }
       ]
      },
      {
       "* pack" : "pack_start,true,true,0",
       "xtype" : "HBox",
       "gboolean homogeneous" : true,
       "$ xns" : "Gtk",
       "items" : [
        {
         "* pack" : "add",
         "xtype" : "TreeView",
         "$ xns" : "Gtk",
         "items" : [
          {
           "gint n_columns" : 4,
           "id" : "compile_result_store",
           "columns" : "  typeof(string), typeof(int), typeof(string), typeof(string) ",
           "* pack" : "set_model",
           "xtype" : "TreeStore",
           "$ xns" : "Gtk",
           "| Gtk.TreePath nodeFindOrCreate" : "(Gtk.TreePath? par, string id, string title) {\n\n    // loop through parent childnre\n    Gtk.TreeIter piter;\n    if (par != null) {\n        this.el.get_iter(out piter, par);\n    }\n    Gtk.TreeIter iter;\n    if (this.el.iter_children(out iter, par == null ? null : piter)) {\n        var loop = true;\n        while (loop) {\n            GLib.Value val;\n            this.el.get_value(iter, 0, out val);\n            var sval = (string)val;\n            if (sval == id) {\n                return this.el.get_path(iter);\n            }\n            loop = this.el.iter_next(iter);    \n        }\n    }\n    // create the node...\n    \n    \n    \n    return new Gtk.TreePath(); \n\n}\n   "
          },
          {
           "utf8 title" : "Compile output",
           "xtype" : "TreeViewColumn",
           "string id" : "column",
           "$ xns" : "Gtk",
           "items" : [
            {
             "* pack" : "pack_start,false",
             "xtype" : "CellRendererText",
             "$ xns" : "Gtk"
            }
           ]
          }
         ]
        },
        {
         "* pack" : "pack_start,true,true,0",
         "xtype" : "ScrolledWindow",
         "$ xns" : "Gtk",
         "items" : [
          {
           "gboolean show_line_marks" : true,
           "* pack" : "add",
           "xtype" : "View",
           "$ xns" : "GtkSource",
           "gboolean show_line_numbers" : true,
           "gboolean editable" : false
          }
         ]
        }
       ]
      }
     ]
    }
   ]
  }
 ]
}