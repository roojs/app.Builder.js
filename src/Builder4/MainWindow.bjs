{
 "name" : "MainWindow",
 "parent" : "",
 "title" : "",
 "path" : "/home/alan/gitlive/app.Builder.js/src/Builder4/MainWindow.bjs",
 "permname" : "",
 "modOrder" : "",
 "build_module" : "builder",
 "items" : [
  {
   "listeners" : {
    "delete_event" : "  (   event) => {\n    return false;\n}",
    "destroy" : "() =>  {\n Xcls_MainWindow.singleton().no_windows--;\n \n Resources.singleton().disconnect(_this.statusbar.handler_id);\n \n \n if (Xcls_MainWindow.singleton().no_windows < 1) {\n\n     Gtk.main_quit();\n }\n}",
    "show" : "  ( ) => {\n    // hide the file editing..\n   \n    //this.hideViewEditing();\n    _this.statusbar.el.hide();\n     _this.statusbar_errors.el.hide();\n    _this.statusbar_warnings.el.hide();\n    _this.statusbar_depricated.el.hide();\n    \n  \n    Resources.singleton().checkResources();\n\n}"
   },
   "id" : "MainWindow",
   "default_width" : 800,
   "* init" : " \n\t  \n    //this.el.show_all();\n    \n     ",
   "# Project.Project project" : "null",
   "# string title" : "\"Application Builder\"",
   "xtype" : "Window",
   "# int no_windows" : 1,
   "default_height" : 500,
   "|        void initChildren" : " () {\n    // this needs putting in a better place..\n    this.windowstate = new WindowState(this);\n     \n\n    //w.el.show_all();\n    var tl = new Clutter.Timeline(6000);\n    tl.set_repeat_count(-1);\n    tl.start();\n    tl.ref();\n\n    \n\n\n\n}\n",
   "$ xns" : "Gtk",
   "|             void show" : "() {\n   \n    this.el.show_all();\n\n}",
   "# WindowState windowstate" : "null",
   "border_width" : 0,
   "$ type" : "Gtk.WindowType.TOPLEVEL",
   "|             void setTitle" : " (string str) {\n    this.headerbar.el.set_title(this.title + \" - \" + str);\n} \n",
   "items" : [
    {
     "id" : "headerbar",
     "xtype" : "HeaderBar",
     "* pack" : "set_titlebar",
     "bool show_close_button" : true,
     "$ xns" : "Gtk",
     "string title" : "Application Builder",
     "items" : [
      {
       "* pack" : "pack_start",
       "xtype" : "HBox",
       "$ xns" : "Gtk",
       "items" : [
        {
         "bool use_popover" : false,
         "xtype" : "MenuButton",
         "* pack" : "add",
         "$ xns" : "Gtk",
         "items" : [
          {
           "id" : "topbarmenu",
           "* init" : "{\n    this.el.show_all();\n}\n",
           "xtype" : "Menu",
           "* pack" : "set_popup",
           "$ xns" : "Gtk",
           "items" : [
            {
             "listeners" : {
              "activate" : "  ( ) => {\n        Xcls_MainWindow.singleton().no_windows++;\n        var w = new Xcls_MainWindow();\n        w.ref();\n\n        w.el.show_all();\n        w.initChildren();\n        w.windowstate.switchState(WindowState.State.FILES);\n}"
             },
             "string label" : "Open a new Window",
             "* pack" : "append",
             "xtype" : "MenuItem",
             "$ xns" : "Gtk"
            },
            {
             "* pack" : "append",
             "xtype" : "SeparatorMenuItem",
             "$ xns" : "Gtk"
            },
            {
             "listeners" : {
              "activate" : " ( ) => {\n         Resources.singleton().fetchStart();\n}"
             },
             "xtype" : "MenuItem",
             "string label" : "Download updated Resources",
             "* pack" : "append",
             "$ xns" : "Gtk"
            },
            {
             "listeners" : {
              "activate" : "() => {\n    About.singleton().el.show();\n    }"
             },
             "* pack" : "append",
             "xtype" : "MenuItem",
             "string label" : "About the Builder",
             "$ xns" : "Gtk"
            }
           ]
          },
          {
           "utf8 icon_name" : "help-about",
           "* pack" : "set_image",
           "xtype" : "Image",
           "$ xns" : "Gtk"
          }
         ]
        }
       ]
      }
     ]
    },
    {
     "id" : "vbox",
     "* pack" : "add",
     "xtype" : "VBox",
     "$ xns" : "Gtk",
     "$ homogeneous" : false,
     "items" : [
      {
       "id" : "mainpane",
       "position" : 400,
       "* pack" : "pack_start,true,true,0",
       "# int lastWidth" : 0,
       "xtype" : "HPaned",
       "$ xns" : "Gtk",
       "items" : [
        {
         "id" : "leftpane",
         "xtype" : "VBox",
         "* pack" : "add1",
         "$ xns" : "Gtk",
         "items" : [
          {
           "id" : "editpane",
           "xtype" : "VPaned",
           "* pack" : "pack_start,false,true,0",
           "$ xns" : "Gtk",
           "items" : [
            {
             "id" : "tree",
             "xtype" : "VBox",
             "* pack" : "add1",
             "$ xns" : "Gtk"
            },
            {
             "id" : "props",
             "xtype" : "VBox",
             "* pack" : "add2",
             "$ xns" : "Gtk"
            }
           ]
          }
         ]
        },
        {
         "* pack" : "add2",
         "xtype" : "VBox",
         "$ xns" : "Gtk",
         "items" : [
          {
           "listeners" : {
            "size_allocate" : "  (  alloc) => {\n    if (_this.windowstate == null) {\n        return;\n    }\n    _this.windowstate.resizeCanvas(); \n        \n}"
           },
           "id" : "clutterembed",
           "* init" : "    var stage = this.el.get_stage();\n    stage.set_background_color(  Clutter.Color.from_string(\"#000\"));\n    \n    \n",
           "xtype" : "Embed",
           "* pack" : "pack_start,true,true,0",
           "$ xns" : "GtkClutter",
           "items" : [
            {
             "id" : "rooview",
             "* init" : "{\n   \n   \n    this.el.add_constraint(\n        new Clutter.AlignConstraint(\n            _this.clutterembed.el.get_stage(), \n            Clutter.AlignAxis.X_AXIS,\n            1.0f\n        )\n    );\n        \n    //this.el.set_position(100,100);\n    this.el.set_pivot_point(1.0f,1.0f);\n    \n    this.el.set_size(_this.clutterembed.el.get_stage().width-50,\n            _this.clutterembed.el.get_stage().height);\n            \n}",
             "xtype" : "Actor",
             "* pack" : "get_stage().add_child",
             "$ xns" : "GtkClutter"
            },
            {
             "id" : "objectview",
             "* init" : "{\n   \n   /*\n    this.el.add_constraint(\n        new Clutter.AlignConstraint(\n            _this.clutterembed.el.get_stage(), \n            Clutter.AlignAxis.X_AXIS,\n            0.0f\n        )\n    );\n    */\n    this.el.fixed_x = 50.0f;\n    this.el.fixed_y = 0.0f;\n    //this.el.set_position(100,100);\n    this.el.set_pivot_point(0.0f,0.0f);\n    this.el.set_scale(0.0f,1.0f);\n    this.el.set_size((_this.clutterembed.el.get_stage().width-50)/2,\n            _this.clutterembed.el.get_stage().height);\n            \n}",
             "xtype" : "Actor",
             "* pack" : "get_stage().add_child",
             "$ xns" : "GtkClutter"
            },
            {
             "id" : "codeeditview",
             "* init" : "{\n   \n   /*\n    this.el.add_constraint(\n        new Clutter.AlignConstraint(\n            _this.clutterembed.el.get_stage(), \n            Clutter.AlignAxis.X_AXIS,\n            0.0f\n        )\n    );\n    */\n    this.el.fixed_x = 50.0f;\n    this.el.fixed_y = 0.0f;\n    //this.el.set_position(100,100);\n    this.el.set_pivot_point(0.0f,0.0f);\n    this.el.set_scale(0.0f,1.0f);\n    this.el.set_size((_this.clutterembed.el.get_stage().width-50)/2,\n            _this.clutterembed.el.get_stage().height);\n            \n}",
             "xtype" : "Actor",
             "* pack" : "get_stage().add_child",
             "$ xns" : "GtkClutter"
            },
            {
             "id" : "addpropsview",
             "* init" : "{\n   \n   /*\n    this.el.add_constraint(\n        new Clutter.AlignConstraint(\n            _this.clutterembed.el.get_stage(), \n            Clutter.AlignAxis.X_AXIS,\n            0.0f\n        )\n    );\n    */\n    this.el.fixed_x = 50.0f;\n    this.el.fixed_y = 0.0f;\n    //this.el.set_position(100,100);\n    this.el.set_pivot_point(0.0f,0.0f);\n    this.el.set_scale(0.0f,1.0f);\n    this.el.set_size((_this.clutterembed.el.get_stage().width-50)/2,\n            _this.clutterembed.el.get_stage().height);\n            \n}",
             "xtype" : "Actor",
             "* pack" : "get_stage().add_child",
             "$ xns" : "GtkClutter"
            },
            {
             "id" : "projecteditview",
             "* init" : "{\n   \n   \n    this.el.add_constraint(\n        new Clutter.AlignConstraint(\n            _this.clutterembed.el.get_stage(), \n            Clutter.AlignAxis.X_AXIS,\n            1.0f\n        )\n    );\n        \n    //this.el.set_position(100,100);\n    this.el.set_pivot_point(0.0f,0.0f);\n    this.el.set_scale(1.0f,0.0f);\n    this.el.set_size(_this.clutterembed.el.get_stage().width-50,\n            _this.clutterembed.el.get_stage().height /2);\n            \n}",
             "xtype" : "Actor",
             "* pack" : "get_stage().add_child",
             "$ xns" : "GtkClutter"
            },
            {
             "id" : "buttonlayout",
             "* init" : "{\n    \n    this.el.add_constraint(\n        new Clutter.AlignConstraint(\n            _this.clutterembed.el.get_stage(), \n            Clutter.AlignAxis.X_AXIS,\n            0.0f\n        )\n    );\n     \n    \n    //this.el.set_position(100,100);\n    this.el.set_pivot_point(0.5f,0.5f);\n     this.el.set_size(50,\n           _this.clutterembed.el.get_stage().height);\n     \n}",
             "xtype" : "Actor",
             "* pack" : "get_stage().add_child",
             "$ xns" : "Clutter",
             "items" : [
              {
               "$ orientation" : "Clutter.Orientation.VERTICAL",
               "xtype" : "BoxLayout",
               "$ xns" : "Clutter",
               "* prop" : "layout_manager"
              },
              {
               "id" : "backbutton",
               "* init" : "this.el.set_size(50,50);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "xtype" : "Actor",
                 "* pack" : "add_child",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n  \n    _this.windowstate.switchState(WindowState.State.PREVIEW);\n    \n\n}"
                   },
                   "utf8 tooltip_text" : "Back",
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "height_request" : 50,
                   "items" : [
                    {
                     "xtype" : "Image",
                     "utf8 icon_name" : "go-previous",
                     "* pack" : "set_image",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "projectbutton",
               "* init" : "this.el.set_size(50,50);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n   _this.windowstate.switchState(WindowState.State.FILES);\n      \n\n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "height_request" : 50,
                   "$ tooltop_text" : "\"Open File\"",
                   "items" : [
                    {
                     "* pack" : "set_image",
                     "xtype" : "Image",
                     "utf8 icon_name" : "document-open",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "editfilebutton",
               "* init" : "this.el.set_size(50.0f,50.0f);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n  \n    // create a new file in project..\n    if (_this.project == null || _this.windowstate.left_tree.model.file == null) {\n        return  ;\n    }\n     _this.windowstate.file_details.show(\n        _this.windowstate.left_tree.model.file, this.el\n    );\n     \n    return  ;    \n\n\n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "$ tooltip_text" : "\"File Details\"",
                   "height_request" : 50,
                   "items" : [
                    {
                     "utf8 icon_name" : "document-properties",
                     "* pack" : "set_image",
                     "xtype" : "Image",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "projecteditbutton",
               "* init" : "this.el.set_size(50,50);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n     _this.windowstate.switchState(WindowState.State.PROJECT);\n   \n\n\n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "$ tooltip_text" : "\"Project Details\"",
                   "height_request" : 50,
                   "items" : [
                    {
                     "xtype" : "Image",
                     "utf8 icon_name" : "emblem-system",
                     "* pack" : "set_image",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "listeners" : {
                "enter_event" : "(  event)  => {\n    this.el.background_color = new Clutter.Color.from_string(\"#333\");\n        return false;\n}",
                "leave_event" : "(  event)  => {\n    this.el.background_color = new Clutter.Color.from_string(\"#000\");\n    return false;\n}"
               },
               "id" : "objectshowbutton",
               "* init" : "this.el.set_size(50,50);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n    \n     _this.windowstate.switchState(WindowState.State.OBJECT);\n  \n \n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "$ tooltip_text" : "\"Add Child Element\"",
                   "height_request" : 50,
                   "items" : [
                    {
                     "* pack" : "set_image",
                     "xtype" : "Image",
                     "utf8 icon_name" : "list-add",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "addpropbutton",
               "* init" : "this.el.set_size(50,50);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n    \n     _this.windowstate.switchState(WindowState.State.PROP);\n \n\n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "$ tooltip_text" : "\"Add Property\"",
                   "height_request" : 50,
                   "items" : [
                    {
                     "utf8 icon_name" : "format-justify-left",
                     "* pack" : "set_image",
                     "xtype" : "Image",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "addlistenerbutton",
               "* init" : "this.el.set_size(50,50);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n    \n    _this.windowstate.switchState(WindowState.State.LISTENER);\n  \n\n\n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "$ tooltip_text" : "\"Add Event Code\"",
                   "height_request" : 50,
                   "items" : [
                    {
                     "xtype" : "Image",
                     "utf8 icon_name" : "appointment-new",
                     "* pack" : "set_image",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "addprojectbutton",
               "* init" : "this.el.set_size(50.0f,50.0f);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n  \n    // create a new file in project..\n    //Xcls_DialogNewComponent.singleton().show(\n   var  pe =     Xcls_EditProject.singleton();\n    pe.el.set_transient_for(_this.el);\n    pe.el.set_modal(true);   \n   \n    var p  = pe.show();\n\n    if (p == null) {\n        return;\n    }\n    \n    \n    _this.windowstate.left_projects.is_loaded = false;    \n    _this.windowstate.left_projects.load();\n    _this.windowstate.left_projects.selectProject(p);\n    return  ;    \n\n\n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "$ tooltip_text" : "\"New\\nProj.\"",
                   "height_request" : 50,
                   "items" : [
                    {
                     "utf8 icon_name" : "folder-new",
                     "* pack" : "set_image",
                     "xtype" : "Image",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "addfilebutton",
               "* init" : "this.el.set_size(50.0f,50.0f);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : " () => {\n    // create a new file in project..\n    \n    // what's the currently selected project...\n    var proj = _this.windowstate.left_projects.getSelectedProject();\n    \n    if (proj == null) {\n        return  ;\n    }\n    \n    \n    \n    var f = JsRender.JsRender.factory(proj.xtype,  proj, \"\");\n    _this.project = proj;\n    \n     _this.windowstate.file_details.show(\n       f, this.el\n    );\n    \n    \n    return  ;    \n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "$ tooltip_text" : "\"Add File\"",
                   "height_request" : 50,
                   "items" : [
                    {
                     "* pack" : "set_image",
                     "xtype" : "Image",
                     "utf8 icon_name" : "document-new",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              },
              {
               "id" : "delprojectbutton",
               "* init" : "this.el.set_size(50,50);",
               "xtype" : "Actor",
               "* pack" : "add_child",
               "$ xns" : "Clutter",
               "items" : [
                {
                 "* init" : "((Gtk.Container)(this.el.get_widget())).add ( child_0.el);",
                 "* pack" : "add_child",
                 "xtype" : "Actor",
                 "$ xns" : "GtkClutter",
                 "items" : [
                  {
                   "listeners" : {
                    "clicked" : "  ( ) => {\n     \n     var cd = DialogConfirm.singleton();\n     cd.el.set_transient_for(_this.el);\n    cd.el.set_modal(true);\n\n     var project =   _this.windowstate.left_projects.getSelectedProject();\n    if (project == null) {\n        print(\"SKIP - no project\\n\");\n        return;\n    }\n    \n        \n     if (Gtk.ResponseType.YES != cd.show(\"Confirm\", \n        \"Are you sure you want to delete project %s\".printf(project.name))) {\n        return;\n    }\n     \n\n    // confirm?\n    Project.Project.remove(project);\n    _this.project = null;\n    \n    _this.windowstate.left_projects.is_loaded =  false;\n    _this.windowstate.left_projects.load();\n    _this.windowstate.clutterfiles.clearFiles();\n\n}"
                   },
                   "* pack" : false,
                   "xtype" : "Button",
                   "width_request" : 50,
                   "$ xns" : "Gtk",
                   "$ tooltip_text" : "\"Delete Project\"",
                   "height_request" : 50,
                   "items" : [
                    {
                     "utf8 icon_name" : "user-trash",
                     "* pack" : "set_image",
                     "xtype" : "Image",
                     "$ xns" : "Gtk"
                    }
                   ]
                  }
                 ]
                }
               ]
              }
             ]
            }
           ]
          }
         ]
        }
       ]
      },
      {
       "bool homogeneous" : false,
       "xtype" : "HBox",
       "* pack" : "pack_end,false,true,0",
       "$ xns" : "Gtk",
       "items" : [
        {
         "* pack" : "pack_start,true,true,0",
         "xtype" : "Label",
         "string label" : "   ",
         "$ xns" : "Gtk"
        },
        {
         "bool show_text" : true,
         "id" : "statusbar",
         "ulong handler_id" : "-1",
         "* init" : "{\n     this.handler_id = Resources.singleton().updateProgress.connect((pos,total) => {\n        if (pos < 1) {\n            this.el.hide();\n            _this.mainpane.el.set_sensitive(true);\n            \n            return;\n        }\n         _this.mainpane.el.set_sensitive(false);\n         this.el.show();\n         this.el.set_fraction ((1.0f * pos) / (1.0f * total));\n         this.el.set_text(\"Fetching Resource : %s/%s\".printf(pos.to_string(), total.to_string()));\n       \n     });\n}\n",
         "xtype" : "ProgressBar",
         "* pack" : "pack_start,true,true,0",
         "$ xns" : "Gtk"
        },
        {
         "* pack" : "pack_end,false,true,0",
         "xtype" : "MenuBar",
         "$ xns" : "Gtk",
         "items" : [
          {
           "listeners" : {
            "activate" : "",
            "button_press_event" : "() => {\n    if (this.errpopup == null) {\n        this.errpopup = new Xcls_ValaCompileErrors();\n        this.errpopup.window = this;\n    }\n    this.errpopup.show(this.notices, this.el);\n}"
           },
           "bool always_show_image" : true,
           "id" : "statusbar_errors",
           "Xcls_ValaCompileErrors errpopup" : "",
           "string label" : "Errors",
           "* pack" : "add",
           "xtype" : "ImageMenuItem",
           "# Json.Object notices" : "new Json.Object() ",
           "$ xns" : "Gtk",
           "items" : [
            {
             "xtype" : "Image",
             "utf8 icon_name" : "dialog-error",
             "* pack" : "set_image",
             "$ xns" : "Gtk"
            }
           ]
          },
          {
           "listeners" : {
            "activate" : "() => {\n    _this.windowstate.vala_compile_errors.show(this.notices, this.el);\n}"
           },
           "bool always_show_image" : true,
           "id" : "statusbar_warnings",
           "* pack" : "add",
           "string label" : "Warnings",
           "xtype" : "ImageMenuItem",
           "# Json.Object notices" : "new Json.Object()",
           "$ xns" : "Gtk",
           "items" : [
            {
             "* pack" : "set_image",
             "xtype" : "Image",
             "utf8 icon_name" : "dialog-warning",
             "$ xns" : "Gtk"
            }
           ]
          },
          {
           "listeners" : {
            "activate" : "() => {\n    _this.windowstate.vala_compile_errors.show(this.notices, this.el);\n}"
           },
           "bool always_show_image" : true,
           "id" : "statusbar_depricated",
           "string label" : "Depricated",
           "* pack" : "add",
           "xtype" : "ImageMenuItem",
           "# Json.Object notices" : "new Json.Object()",
           "$ xns" : "Gtk",
           "items" : [
            {
             "utf8 icon_name" : "dialog-information",
             "* pack" : "set_image",
             "xtype" : "Image",
             "$ xns" : "Gtk"
            }
           ]
          }
         ]
        }
       ]
      }
     ]
    }
   ]
  }
 ]
}